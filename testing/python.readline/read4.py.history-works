#!/usr/bin/python3
#-----------------------------------------------------------------------------
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
#-----------------------------------------------------------------------------
import os
import logging
import readline

HIST_FILE = os.path.join(os.path.expanduser("~"), ".updateDNS_history")
print("HIST_FILE={}".format(HIST_FILE))

def get_history_items():
    return [ readline.get_history_item(i) for i in range(1, readline.get_current_history_length() + 1) ]

class HistoryCompleter(object):
    
    def __init__(self):
        self.matches = []
        return

    def complete(self, text, state):
        response = None
        if state == 0:
            history_values = get_history_items()
            if text:
                self.matches = sorted(h 
                                      for h in history_values 
                                      if h and h.startswith(text))
            else:
                self.matches = []
        try:
            response = self.matches[state]
        except IndexError:
            response = None
        return response

def input_loop():
    if os.path.exists(HIST_FILE):
        readline.read_history_file(HIST_FILE)
    print('Max history file length:', readline.get_history_length())
    print('Startup history:', get_history_items())
    try:
        while True:
            line = input('Prompt ("stop" to quit): ')
            if line == 'stop':
                break
            if line:
                print('Adding "%s" to the history' % line)
    finally:
        print('Final history:', get_history_items())
        readline.write_history_file(HIST_FILE)

# Register our completer function
readline.set_completer(HistoryCompleter().complete)

# Use the tab key for completion
readline.parse_and_bind('tab: complete')

# Prompt the user for text
input_loop()
