#!/usr/bin/perl -w
#-----------------------------------------------------------------------------
use warnings;
use strict;

require 'nn.common.pm';
#-----------------------------------------------------------------------------
# Forward referenced subroutines.
sub checkargs();

#-----------------------------------------------------------------------------
# Global variables initialized from arguments passed to script.
my $PROG = $0;
my $NIMBLE_IP = $ARGV[0];
my $LOGIN = $ARGV[1];
my $HYPERQ = $ARGV[2];
my $SOURCE = $ARGV[3];
my $INITIATORGRP = $ARGV[4];
if ($#ARGV > 4) {die "$PROG only takes maximum of 5 arguments, not " . $#ARGV+1 . "\n";}

# Global variables.
our $command;                           # Command to execute.
our $output;                            # Output from command executed.
our $status;
our $SSH = '';                          # Where to execute a command.

#-----------------------------------------------------------------------------
checkargs();

#-----------------------------------------------------------------------------
# Print error message, then usage statement, then exit script with error.

sub usage($)
{
    my $e = $_[0];
    print STDERR "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n";
    print STDERR "${e}\n";
    print STDERR "..............................................................................\n";
    print STDERR "Usage: ${PROG} NIMBLE_IP LOGIN HYPERQ_IP SOURCE_VOL INITIATOR_GROUP\n";
    print STDERR "       NIMBLE_IP       = IP of NIMBLE iSCSI volume server.\n";
    print STDERR "       LOGIN           = Name of login on NIMBLE.\n";
    print STDERR "       HYPERQ_IP       = IP of the HyperQ.\n";
    print STDERR "       SOURCE_VOL      = Name of Source Volume.\n";
    print STDERR "       INITIATOR_GROuP = Name of initiator group to create.\n";
    print STDERR "This script ssh's into the Nimble iSCSI volume server and allows the source volume\n";
    print STDERR "to be accessed by the HyperQ (i.e. initiator group addition).\n";
    print STDERR "\n";
    print STDERR "Example: ${PROG} 10.0.11.123 admin 10.0.11.34 at-m4-source initiator-grp\n";
    print STDERR "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n";
    exit 1;
}   # End of usage

#-----------------------------------------------------------------------------
# Check that the arguments passed in have somewhat reasonable values.

sub checkargs()
{
    if (!defined($NIMBLE_IP) || $NIMBLE_IP eq '')
    {
	usage('First argument must be the IP of the NIMBLE system used.');
    }

    if (!defined($LOGIN) || $LOGIN eq '')
    {
	usage('Second argument must be the login of the NIMBLE system used.');
    }

    $SSH = "ssh -x ${LOGIN}\@${NIMBLE_IP}";	# Where to execute a command.
    my $SAVE_NIMBLE_SSH = $SSH;

    # Check NIMBLE_IP works with no password ssh.
    execute('echo works 2>&1');
    if ($output ne 'works')
    {
	cmd_error("Storage IP ($NIMBLE_IP) not reachable via ssh.", __FILE__, __LINE__)
    }

    if (!defined($HYPERQ) || $HYPERQ eq '')
    {
	usage('Third argument must be the IP of the RedHat system used.');
    }
    $SSH = "ssh -x root\@${HYPERQ}";		# Where to execute a command.
    # Check HYPERQ works with no password ssh.
    execute('echo works 2>&1');
    if ($output ne 'works')
    {
	cmd_error("Client IP ($HYPERQ) not reachable via ssh.", __FILE__, __LINE__)
    }

    # Restore NIMBLE as the thing we execute commands on.
    $SSH = $SAVE_NIMBLE_SSH;

    if (!defined($SOURCE) || $SOURCE eq '')
    {
       usage('Fourth argument must be the name of the SOURCE volume on the Nimble.');
    }

    if (!defined($INITIATORGRP) || $INITIATORGRP eq '')
    {
       usage('Fifth argument must be the name of the initiatorgrp on the Nimble.');
    }
}   # End of checkargs

#-----------------------------------------------------------------------------
sub allow_multi_initiator($)
{
    my $vol = $_[0];

    execute("vol --edit $vol --multi_initiator yes");
    if ($output ne '')
    {
	cmd_error("Error setting multi-initiator to yes for vol $vol on Nimble $NIMBLE_IP.", __FILE__, __LINE__);
    }
}   # End of allow_multi_initiator

#-----------------------------------------------------------------------------
sub add_to_initiatorgrp($$$)
{
    my $ig = $_[0];
    my $ip = $_[1];
    my $vol = $_[2];

    execute("initiatorgrp --add_initiators $ig --label $ig-$ip-$vol --initiator_name '*' --ipaddr $ip 2>&1");
    if ($output ne '')
    {
	cmd_error("Error creating initiatorgrp with name $ig on Nimble $NIMBLE_IP.", __FILE__, __LINE__);
    }
}   # End of add_to_initiatorgrp

#=============================================================================
# Start of main program.

allow_multi_initiator($SOURCE);
add_to_initiatorgrp($INITIATORGRP, $HYPERQ, $SOURCE);

#-----------------------------------------------------------------------------
print STDERR "\nDONE with $PROG\n";
#-----------------------------------------------------------------------------
exit 0;
#-----------------------------------------------------------------------------
