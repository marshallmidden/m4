#!/usr/bin/perl -w
#-----------------------------------------------------------------------------
use warnings;
use strict;

require 'nn.common.pm';
use warnings;
use strict;
#-----------------------------------------------------------------------------
# Forward referenced subroutines.
sub checkargs();

#-----------------------------------------------------------------------------
# Global variables initialized from arguments passed to script.
my $PROG = $0;
my $HYPERQ_IP = $ARGV[0];
my $NIMBLE_IP = $ARGV[1];
my $SOURCE = $ARGV[2];
my $TARGET = $ARGV[3];
if ($#ARGV > 3) {die "$PROG only takes maximum of 4 arguments, not " . $#ARGV+1 . "\n";}

# Global variables.
our $command;                           # Command to execute.
our $output;                            # Output from command executed.
our $status;
our $SSH = '';                          # Where to execute a command.

#-----------------------------------------------------------------------------
checkargs();

#-----------------------------------------------------------------------------
# Print error message, then usage statement, then exit script with error.

sub usage($)
{
    my $e = $_[0];
    print STDERR "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n";
    print STDERR "${e}\n";
    print STDERR "..............................................................................\n";
    print STDERR "Usage: ${PROG} HYPERQ_IP NIMBLE_IP SOURCE_VOL TARGET_VOL\n";
    print STDERR "       HYPERQ_IP  = HyperQ IP.\n";
    print STDERR "       NIMBLE_IP  = IP of the iSCSI storage.\n";
    print STDERR "       SOURCE_VOL = Name of Source Volume.\n";
    print STDERR "       TARGET_VOL = Name of Target Volume.\n";
    print STDERR "This script ssh's into the HQ and removes MFS associated with source and target.\n";
    print STDERR "\n";
    print STDERR "Example: ${PROG} 10.0.11.34 10.0.11.123 at-m4-source at-m4-target\n";
    print STDERR "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n";
    exit 1;
}   # End of usage

#-----------------------------------------------------------------------------
# Check that the arguments passed in have somewhat reasonable values.

sub checkargs()
{
    if (!defined($HYPERQ_IP) || $HYPERQ_IP eq '')
    {
        usage('First argument must be the HyperQ IP address.');
    }

    if (!defined($NIMBLE_IP) || $NIMBLE_IP eq '')
    {
        usage('Second argument must be the HyperQ IP address.');
    }

    if (!defined($SOURCE) || $SOURCE eq '')
    {
        usage('Third argument must be the name of the Source volume.');
    }

    if (!defined($TARGET) || $TARGET eq '')
    {
        usage('Fourth argument must be the name of the Target volume.');
    }

    $SSH = "ssh -x root\@${HYPERQ_IP}";		# Where to execute a command.
    # Check HYPERQ_IP works with no password ssh.
    execute('echo works 2>&1');
    if ($output ne 'works')
    {
        usage("First argument, HYPERQ IP ($HYPERQ_IP) not reachable via ssh.");
    }
}   # End of checkargs

#-----------------------------------------------------------------------------
sub get_mfs_names()
{
    my $src;
    my $target;

    execute("/home/padmin/listmfs");
    if ($output eq '')
    {
	cmd_error("Did not get any HyperQ output from listmfs.", __FILE__, __LINE__);
    }
    my @lines = split(/\n/, $output);
    my $skip = 0;
    my $okay = 0;
    foreach my $l (@lines)
    {
	if ($l =~ /^---------------------------------------------------------------------------$/) { next; }
	if ($l =~ /^Current MFS's configurations:$/) { next; }
	if ($l =~ /^ID: /) { next; }			# Ignore the ID number.
	if ($l =~ /^Name: /)
	{

	    if ($l =~ /^Name: (ip-[0-9.]+:[0-9]+-iscsi-iqn.*:$SOURCE-.*)$/)
	    {
		$src = $1;
	    }
	    elsif ($l =~ /^Name: (ip-[0-9.]+:[0-9]+-iscsi-iqn.*:$TARGET-.*)$/)
	    {
		$target = $1;
	    }
	    next;
	}
	if ($l =~ /^Target: /) { next; }		# This is not verified.
	if ($l =~ /^Host: iSCSI$/) { next; }
	if ($l =~ /^In-Path: /) { next; }
	if ($l =~ /^Mode: SCSI$/) { next; }
	if ($l =~ /^Mig Target: /) { next; }
	if ($l =~ /^Status: ONLINE$/) { next; }
	if ($l =~ /^Mapped: /) { next; }
	if ($l =~ /^Emulate: /) { next; }
	if ($l =~ /^Client HBA: /) { next; }
	if ($l =~ /^Target HBA: /) { next; }
	if ($l =~ /^Target HBA 2: /) { next; }
	if ($l =~ /^Client HBA 2: /) { next; }
	if ($l =~ /^Target HBA 3: /) { next; }
	if ($l =~ /^Client HBA 3: /) { next; }
	if ($l =~ /^Target HBA 4: /) { next; }
	if ($l =~ /^Client HBA 4: /) { next; }
	cmd_error("Unexpected line from listmfs: '$l'", __FILE__, __LINE__);
    }

    if (!defined($src))
    {
	cmd_error("Did not find MFS with $SOURCE", __FILE__, __LINE__);
    }
#++    if (!defined($target))
#++    {
#++	cmd_error("Did not find MFS with $TARGET", __FILE__, __LINE__);
#++    }
    return ($src, $target);
}   # End of get_mfs_names

#-----------------------------------------------------------------------------
sub remove_mfs($$)
{
    my $src = $_[0];
    my $target = $_[1];

    # Turn off all options.
    execute("/home/padmin/maptargets block --name $src --mapped N --emulate N --target N --tgtiqn1 \"\" --clientiqn1 \"\"");
    execute("/home/padmin/maptargets block --name $target --mapped N --emulate N --target N --tgtiqn1 \"\" --clientiqn1 \"\"");

NOTDONEYET - need to go through output and remove each IP:  Target: @ ---- line.
    execute("/home/padmin/listtargets");
    my $portal = $output;
    my $iqn = $output;
    $portal =~ /IP: ([0-9.]+:[0-9]+)/;
    $portal = $1;
    $iqn =~ /TARGET: (.*)$/;
    $iqn = $1;
print STDERR "portal='$portal'\n";
print STDERR "iqn='$iqn'\n";
    execute("/home/padmin/removemfs iscsi $portal $iqn");
    if ($output !~ /Successfully removed $iqn from the HyperQ/)
    {
	cmd_error("Unexpected output from hsm maptargets.", __FILE__, __LINE__);
    }

    $target =~ /^ip-([0-9.]+:[0-9]+)-iscsi-(iqn.*:$TARGET-.*)$/;
    $portal = $1;
    $iqn = $2;
    execute("/home/padmin/removemfs iscsi $portal $iqn");
    if ($output !~ /Successfully removed $iqn from the HyperQ/)
    {
	cmd_error("Unexpected output from hsm maptargets.", __FILE__, __LINE__);
    }
}   # End of remove_mfs

#-----------------------------------------------------------------------------
sub verify_mfs_gone()
{
    execute('/home/padmin/hsm listmigrations');

    if ($output eq '')
    {
	cmd_error("HyperQ $HYPERQ_IP did not return anything for hsm listmigrations command", __FILE__, __LINE__);
    }

    my @lines = split(/\n/, $output);
    my $flag_src;
    my $flag_target;

    foreach my $l (@lines)
    {
	if ($l =~ /^Current Migrations/) { next; }
	if ($l =~ /^---------------------------------------------------------------------------/)
	{
	    next;
	}
	cmd_error("Unexpected line from hsm listmigrations: '$l'", __FILE__, __LINE__);
    }
}   # End of verify_mfs_gone

#-----------------------------------------------------------------------------
# What should output of 'multipath -ll' be? Check it is correct.
sub check_multipath()
{
    print STDERR "NOTDONEYET - " . __FILE__ . ':' . __LINE__ . ':' . (caller(0))[3] . "\n";
}   # End of check_multipath

#=============================================================================
# Start of main program.

my ($mfs_source_name, $mfs_target_name) = get_mfs_names();

remove_mfs($mfs_source_name, $mfs_target_name);

verify_mfs_gone();		# Verify command did something reasonable.

#-----------------------------------------------------------------------------
print STDERR "\nDONE with $PROG\n";
#-----------------------------------------------------------------------------
exit 0;
#-----------------------------------------------------------------------------
