#!/usr/bin/perl -w

# vol --create $TARGET \
#     --size 2048 \
#     --description 'M4-automated-testing-target' \
#     --perfpolicy 'Other Workloads' \
#     --initiatorgrp $INITIATORGRP \
#     --lun 1 \
#     --multi_initiator no
# vol --online $TARGET

#-----------------------------------------------------------------------------
use warnings;
use strict;

require 'nn.common.pm';
#-----------------------------------------------------------------------------
# Forward referenced subroutines.
sub checkargs();

#-----------------------------------------------------------------------------
# Global variables initialized from arguments passed to script.
my $PROG = $0;
my $NIMBLE_IP = $ARGV[0];
my $LOGIN = $ARGV[1];
my $TARGET = $ARGV[2];
my $INITIATORGRP = $ARGV[3];
if ($#ARGV > 3) {die "$PROG only takes maximum of 4 arguments, not " . $#ARGV+1 . "\n";}

# Global variables.
our $command;                           # Command to execute.
our $output;                            # Output from command executed.
our $status;
our $SSH = '';                          # Where to execute a command.

#-----------------------------------------------------------------------------
checkargs();

#-----------------------------------------------------------------------------
# Print error message, then usage statement, then exit script with error.

sub usage($)
{
    my $e = $_[0];
    print STDERR "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n";
    print STDERR "${e}\n";
    print STDERR "..............................................................................\n";
    print STDERR "Usage: ${PROG} NIMBLE_IP LOGIN TARGET_VOL INITIATOR_GROUP\n";
    print STDERR "       NIMBLE_IP       = IP of NIMBLE iSCSI volume server.\n";
    print STDERR "       LOGIN           = Name of login on NIMBLE.\n";
    print STDERR "       TARGET_VOL      = Name of Target Volume.\n";
    print STDERR "       INITIATOR_GROuP = Name of initiator group to create.\n";
    print STDERR "This script ssh's into the Nimble iSCSI volume server and creates the target volume.\n";
    print STDERR "\n";
    print STDERR "Example: ${PROG} 10.0.11.123 admin at-m4-target at-m4-initiator-grp\n";
    print STDERR "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n";
    exit 1;
}   # End of usage

#-----------------------------------------------------------------------------
# Check that the arguments passed in have somewhat reasonable values.

sub checkargs()
{
    if (!defined($NIMBLE_IP) || $NIMBLE_IP eq '')
    {
	usage('First argument must be the IP of the NIMBLE system used.');
    }

    if (!defined($LOGIN) || $LOGIN eq '')
    {
	usage('Second argument must be the login of the NIMBLE system used.');
    }

    $SSH = "ssh -x ${LOGIN}\@${NIMBLE_IP}";	# Where to execute a command.

    # Check NIMBLE_IP works with no password ssh.
    execute('echo works 2>&1');
    if ($output ne 'works')
    {
	cmd_error("Storage IP ($NIMBLE_IP) not reachable via ssh.", __FILE__, __LINE__)
    }

    if (!defined($TARGET) || $TARGET eq '')
    {
       usage('Thirda argument must be the name of the TARGET volume on the Nimble.');
    }

    if (!defined($INITIATORGRP) || $INITIATORGRP eq '')
    {
       usage('Fourth argument must be the name of the initiatorgrp on the Nimble.');
    }
}   # End of checkargs

#-----------------------------------------------------------------------------
# Check volume NOT on Nimble.

sub check_no_volume($)
{
    my $volume = $_[0];

    execute("vol --list 2>&1");
    my @lines = split(/\n/, $output);
    foreach my $l (@lines)
    {
        if ($l =~ /^$volume\s/)
        {
            cmd_error("Already a volume with name $volume on Nimble $NIMBLE_IP.", __FILE__, __LINE__);
        }
    }
}   # End of check_no_volume

#-----------------------------------------------------------------------------
# Check initiatorgroup is on Nimble.

sub check_initiatorgrp($)
{
    my $ig = $_[0];

    execute("initiatorgrp --list 2>&1");
    my @lines = split(/\n/, $output);
    foreach my $l (@lines)
    {
        if ($l =~ /^$ig\s/)
        {
	    return;
        }
    }
    cmd_error("No initiatorgrp with name $ig on Nimble $NIMBLE_IP.", __FILE__, __LINE__);
}   # End of check_no_initiatorgrp

#-----------------------------------------------------------------------------
sub create_volume($$)
{
    my $vol = $_[0];
    my $ig = $_[1];

    execute("vol --create $vol --size 2048 --description $vol-$ig " .
            "--perfpolicy default --initiatorgrp $ig --start_offline --multi_initiator no 2>&1");
    if ($output ne '')
    {
        cmd_error("Error creating volume $vol with initiatorgrp $ig on Nimble $NIMBLE_IP.", __FILE__, __LINE__);
    }
}   # End of create_volume

#-----------------------------------------------------------------------------
# Set nimble volume online.

sub set_volume_online($)
{
    my $vol = $_[0];

    execute("vol --online $vol 2>&1");
    if ($output ne '')
    {
        cmd_error("Error setting volume $vol online on Nimble $NIMBLE_IP.", __FILE__, __LINE__);
    }
}   # End of set_volume_online

#=============================================================================
# Start of main program.

check_no_volume($TARGET);			# Error if target already exists on nimble.
check_initiatorgrp($INITIATORGRP);		# Error if NO initiatorgrp on nimble.

create_volume($TARGET, $INITIATORGRP);
set_volume_online($TARGET);

#-----------------------------------------------------------------------------
print STDERR "\nDONE with $PROG\n";
#-----------------------------------------------------------------------------
exit 0;
#-----------------------------------------------------------------------------

