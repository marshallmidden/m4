spaces

title   test of a process which allows for opal notated
title   scores to have different tempi on different staves

* In order for this to work, set the tempo to 60,1
* set the variable, -speed-, to the metronome marking
* set -mult- to 60/speed
process modify,STRING
.       vars    secs,dur,num
* Make all default settings on the note explicit
.       encode  STRING =STRING;explicit
* Put notenumber of the note in -num-, the length in -dur-
.       decode  STRING;notenumber,num;duration,dur
* Multiply the duration by -mult-, a factor computed in
* the main part of the program
.       calc    secs = round(1000*dur*mult)/1000
* Update the time in seconds on this staff
.       calc    tics(curstaf) = tics(curstaf)+secs
* Reencode the note with the modified duration
.       encode  NEW =STRING;type,2;notenumber,num;duration,secs
* Play the note as modified
.       NEW
endprocess
*
macro   endpiece
* Pad out the end of the piece with rests so that there are
* no different secs length of staves in measure errors.
.       vars    maxsecs         $$ maximum secs elapsed since measure
.       vars    staff           $$ current staff number
* Initialize 'maxsecs' and search for maximum secs of all
* the staves.
.       calc    maxsecs = 0
.       calc    staff = 1
.       loop    staff <= numstav
.       .       if      tics(staff) > maxsecs
.       .       .       calc    maxsecs = tics(staff)
.       .       endif
.       .       calc    staff = staff + 1
.       endloop
* Now pad out all the staves with rests to make them all
* the same length.
.       calc    staff = 1
.       loop    staff <= numstav
.       .       if      tics(staff) < maxsecs
.       .       .       Staff{staff,1}:  (r,maxsecs-tics(staff))
.       .       endif
.       .       calc    staff = staff + 1
.       endloop
endmacro
*
instr   imsmusic,default
vars    NEW,MOTIV,speed,mult,pos,i
vars    tics(4)                 $$ secs elapsed on staff
vars    numstav                 $$ number of staves (const)
vars    curstaf                 $$ current staff
*
vars    Staff           $$ staff names
encode  Staff =one two three four
*
* Set time on each staff to zero and assign instruments
calc    numstav = 4
loop    curstaff = 1, numstav
.       staff   Staff{curstaf,1}: curstaf
.       calc    tics(curstaf) = 0
endloop
* 
tempo   60,1                    $$ one quarter note per second
one:    
encode  MOTIV =6a8 g+ d+ 5a+3(2) e3(4) f4d 4b4d
*
* The length of a beat differs by about .2 milliseconds
* between staves resulting in the staves gradually moving
* out of phase with one another
* Position varies from 25% in the right channel to 100% in
* the right channel
calc    speed = 60
calc    curstaf = 1
loop    curstaf <= numstav
.       calc    mult = 60/speed
.       calc    pos = 25 ^ curstaf
.       calc    i = 1
* Play 20 repetitions of the motive on the current staff
.       loop    i <= 20
.       .       Staff{curstaf,1}:  p(pos) begin modify MOTIV quit
.       .       calc    i = i+1
.       endloop
.       calc    curstaf = curstaf+1
.       calc    speed = speed+1
endloop
*
* Call macro -endpiece- to pad out shorter measures w/rests
endpiece
* 
title   manipulate
*
* Program to perform standard contrapuntal manipulations
instr   imsmusic,default
staff   one: 1,2,3,4,5,6
staff   two: 7,8,9,10,11,12
staff   three: 13,14,15,16
one:
*
* Macro to link the durations of DUR and the pitches
* of PCH together and to loop through them on staff -STAFF-
*
macro   play[PCH,DUR,REST,STAFF]
.       vars    i
.       loop    i = 1, length
..              STFNAME{STAFF,1}:(PCH(i),DUR(i))
.       endloop
.       STFNAME{STAFF,1}: (r,REST)
endmacro
*
macro   squish[PCH,DUR,REST,STAFF]
.       vars    i
STFNAME{STAFF,1}:[
.       loop    i = 1, length
..              (PCH(i),DUR(i))
.       endloop
]
.       STFNAME{STAFF,1}: (r,REST)
endmacro
*
macro   retro[ARRAY]
vars    temp
.       vars    i
.       loop    i = 1, length/2
..              calc    j = length+1-i
..              calc    temp = ARRAY(i)
..              calc    ARRAY(i) = ARRAY(j)
..              calc    ARRAY(j) = temp
.       endloop
endmacro
* 
macro   inv[PCH,FIRST]
.       vars    sub,start,k
.       decode  FIRST;notenumber,start
.       calc    sub = PCH(1)+start
.       loop    k = 1, length
..              calc    PCH(k) = sub-PCH(k)
.       endloop
endmacro
* 
macro   trsp[PCH,STEPS]
.       vars    k
.       loop    k = 1, length
..              calc    PCH(k) = PCH(k)+STEPS
.       endloop
endmacro
*
macro   dimaug[ARRAY,MULT]
.       vars    k
.       loop    k = 1, length
..              calc    ARRAY(k) = ARRAY(k)^MULT
.       endloop
endmacro
*
macro   seq[PCH,DUR,STEPS,TIMES,REST]
.       vars    k
.       loop    k = 1, TIMES
..              trsp[PCH,STEPS]
..              play[PCH,DUR,REST,staffno]
.       endloop
endmacro
*
macro   seqtrun[PCH,DUR,STEPS,REST]
.       vars    i,k
.       calc    i = 0
.       loop    k = 1, length
..              trsp[PCH,STEPS]
..              dimaug[DUR,.9]
..              calc    i = i+k-1
..              loop    (i=i+1) <= length
...                   STFNAME{staffno,1}:(PCH(i),DUR(i))
..              endloop
..             STFNAME{staffno,1}: (r,REST)
..              calc    i = 0
.       endloop
endmacro
* 
macro   enter[NOTE]
* Decodes -NOTE- into notenumber and fraction of a whole note
.       calc    length = length + 1
.       decode  NOTE;notenumber,pch(length);duration,dur(length)
endmacro
* 
macro   pad
* Tests lengths of each staff against that of longest
* staff and pads out shorter staves with appropriate
* number of rests tacked onto the ends of the staves
.       vars    max
.       calc    max = 0
.       loop    i = 1, staffno
..              STFNAME{i,1}:
..              if      time > max
...                     calc    max = time
..              endif
.       endloop
.       loop    i = 1, staffno
..              STFNAME{i,1}:
..              if      time < max
...                     (r,max-time)
..              endif
.       endloop
endmacro
*
vars    motive,i,j,staffno,length,voices,delay
vars    pch(6),dur(6)
*
vars    STFNAME
encode  STFNAME =one two three
*
* Initialize -length- to 0
* Enter a sequence into the arrays -pch1- and -dur1-
calc    length = 0
enter[2f4]
enter[2b8]
enter[3a+8]
enter[3a8]
enter[4g+4]
*
*               canon
calc    delay = .75
calc    voices = 2
loop    i = 1, voices
.       calc    staffno = i
.       STFNAME{staffno,1}:      (r,delay^i)
.       trsp[pch,7^i]
.       play[pch,dur,1,staffno]
.       retro[pch]
.       play[pch,dur,1,staffno]
.       seqtrun[pch,dur,1,.0001]
.       squish[pch,dur,1,staffno]
.       STFNAME{staffno,1}:      (r,delay^(voices-i+1))
endloop
*
* Pad out shorter staves with rests.
*
pad
* 
macro   motive(INSNO,PCH,DUR,SP)
* Recursive macro: for every note on staff, INSNO, this
* generates 3 notes of duration, (DUR/3) on staff (INSNO-1)
.       vars    inv     $$ 1=norm, 0=repeated note, -1=invert
* Set the global variable -vf- to a random number 1-100
.       .       randu   vf,100
* Set -inv- to 0, 1, or -1
.       .       randu   inv,3
.       .       calc    inv = inv-2
* Play the sequence or its inversion (or repeat PCH)
.         STFNAME{INSNO,1}: vf< (PCH,DUR/2) (PCH+3^inv,DUR/2)
.       (PCH+2^inv,DUR)  (PCH+5^inv,DUR)
* On the next highest staff, play the sequence 4 times
* at 4 times the speed and transposed up by SP
.       if      INSNO<5
.       .       motive(INSNO+1,PCH+SP,DUR/4,SP-1)
.       .       motive(INSNO+1,PCH+SP+3,DUR/4,SP-1)
.       .       motive(INSNO+1,PCH+SP+2,DUR/4,SP-1)
.       .       motive(INSNO+1,PCH+SP+5,DUR/4,SP-1)
.       endif
endmacro
*
* Define instrument file and staves
*
vars    STFNAME,looper
encode  STFNAME =one two three four five
*
instr   carla3,selfsimilar
loop    looper = 1,5
.       staff   STFNAME{looper,1}: looper
endloop
*
* Make first call to macro with instrument 1, starting on
* pitch, 2c, duration 12 whole notes, vertical intrvl, octv
*
tempo   60,4,accel
measure 1
motive(1,24,12,12)              $$insno,pch,dur,largest intv
* Use the second measure only for terminal tempo and volume
*
measure 2
one:    v80
two:    v60
three:  v40
four:   v20
five:   v0
tempo   240,4
* 
instr   carla2,timbres
staff   1:1
staff   2:2
staff   3:3
staff   4:4
*
1:
macro   play[IMAC,PMAC,DMAC]
.       vars    j,STF,insno
* PMAC is the name of the permutation macro to use on the
* pitch series; DMAC is the one to use on the durations, and
* IMAC determines the order of the instrument choice
.       PMAC(pord)
.       DMAC(dord)
.       IMAC(iord)
* Play this permutation
.       loop    j = 1,4
.       measure
.       .       calc    insno = inset(iord(j))
.       .       encode  STF =;number,insno
.       .       STF:
.       .       (pchset(pord(j)),durset(dord(j)))
.       .       (r,.75)
.       endloop
endmacro
*
macro   swap[ONE,TWO]
.       vars    temp
.       calc    temp =TWO
.       calc    TWO =ONE
.       calc    ONE =temp
endmacro
*
* Each of the "p" macros swaps one pair of values in an
* array of order numbers, ORD
macro   p1(ORD)
.       swap[ORD(3),ORD(4)]
endmacro
*
macro   p2(ORD)
.       swap[ORD(2),ORD(3)]
endmacro
*
macro   p3(ORD)
.       swap[ORD(1),ORD(2)]
endmacro
* 
vars    pchset(4),durset(4),inset(4)    $$ ordered sets
vars    pord(4),dord(4),iord(4)         $$ order numbers
vars    i,k,l,m,n
vars    Pp,Qq                           $$ macro names
*
* Initialize order arrays
loop    i = 1,4
.       calc    pord(i) = i
.       calc    dord(i) = i
.       calc    iord(i) = 5-i
endloop
*
* Initialize sets of pitches, instrument numbers, durations
calc    pchset(1) = 50
calc    pchset(2) = 48
calc    pchset(3) = 57
calc    pchset(4) = 55
calc    durset(1) = .25
calc    durset(2) = .25
calc    durset(3) = .25
calc    durset(4) = .25
calc    inset(1) = 2
calc    inset(2) = 4
calc    inset(3) = 1
calc    inset(4) = 3
*
* Go through each of the "p" macros
loop    i = 1,3
.       loop    k = 1,4
.       .       calcs   k=4,m = 1,k
.       .       encode  Pp =p;number,m    $$ name of "p" macro
.       .       play[Pp,Pp,Pp]
.       endloop
.       loop    l = 1,4
.       .       calc    m = 4-l
.       .       calcs   m=0,m = 3,m
.       .       encode  Pp =p;number,m
.       .       play[Pp,Pp,Pp]
.       endloop
endloop
* 
macro   func(ARG)
.       calc  ARG =(a^(3.77823-a))^ARG(1-ARG)
endmacro
*
macro   iterate(ARG,TIMES)
.       vars    i
.       loop    i = 1,TIMES
.       .       func(ARG)
.       endloop
endmacro
*
instr   carla2,f(2)quadratic
*
* Define a character string variable which can be used to
* numerically select staff names.
vars    STF,looper
encode  STF=one two three four five six seven eight
encode  STF=STF nine ten elven twelv thirt trout fiftn sixtn
*
* assign instrument numbers to staves
loop    looper = 1,16
.       staff   STF{looper,1}: looper
endloop
*
vars    a,x,y,i
vars    pch,instr,incr
*
* set all instruments to glide mode
loop    i = 1,16
.       STF{i,1}:      glide 1 tie
endloop
*
*loop    a=1.1,2.7,.01
calc    a = 1
calc    incr = 1
loop    a <= 4
.       loop    x = (1/32),.5,(1/32)
.       .       calc    y = x
.       .       iterate(y,10)
.       .       calc    pch = (y+1)^50
.       .       calc    instr = x^32
.       .       STF{instr,1}:     (pch,1)
.       endloop
*
.       calcs   a <= 1.9,incr = incr^.5,incr^2
.       calc    a = a+incr
endloop
* 
macro   setup
.       vars    third           $$ 9s place in ternary nbr
.       vars    forth           $$ 3s place
.       vars    fifth           $$ 1s place
.       vars    index           $$ index to U array of pchs
.       vars    beat2           $$ 9s place in ternary nbr
.       vars    beat3           $$ 3s place in ternary nbr
.       vars    beat4           $$ 1s place 
.       vars    beat            $$ index into EVENT array
.       vars    sqrd            $$ counts 9s place changes
.       vars    one             $$ counts 3s place changes
.       vars    zero            $$ counts 1s place changes
* Change 9s place every 9 notes
.       loop    sqrd = 1,3
.       .       randu   third,2
.       .       randu   beat2,2
.       .       calc    third = (third-1)^2
.       .       calc    beat2 = (beat2-1)^2
* Change 3s place every 3 notes
.       .       loop    one = 1,3
.       .       .       randu   forth,2
.       .       .       randu   beat3,2
.       .       .       calc    forth = (forth-1)^2
.       .       .       calc    beat3 = (beat3-1)^2
* Change 1s place every note
.       .       .       loop    zero = 1,3
.       .       .       .   randu   fifth,2
.       .       .       .   randu   beat4,2
.       .       .       .   calc    fifth = (fifth-1)^2
.       .       .       .   calc    beat4 = (beat4-1)^2
.       .       .       .   calc    index = 9^third+3^forth+fifth+1
.       .       .       .   calc    beat = 9^beat2+3^beat3+beat4+1
.       .       .       .   encode  EVENT(beat)=EVENT(beat) U{index,1}
.       .       .       endloop
.       .       endloop
.       endloop
endmacro
*
instr   imsnset,default
staff   1:1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
*
vars    U,i,j
vars    EVENT(27)
*
* Fill set, U, with pitches one half step apart
*
encode  U=4cn 4c+ 4dn 4en 4fn 4f+ 4gn 4g+ 4an 4a+n 4bn 5cn 5c+ 5dn
encode  U=U 5en 5fn 5f+ 5gn 5g+ 5an 5a+ 5bn 5cn 5c+ 6dn 6d+ 6en
*
* Each time -setup- is called, another 27 notes from the
* cantor set is randomly selected and placed in an
* event list according to a start time from a cantor set
*
loop    j = 1,4
.       loop    i = 1,2
.       .       setup
.       endloop
*
* Play through the events in chronological order
.       loop    i = 1,27
.       .       1:      [r16 EVENT(i)]  $$ play event
.       .       encode  EVENT(i)=       $$ clear location
.       endloop
endloop
* 
vars    octave, noten, nname
vars    offset, newn, sharp, flat, natur, type
*
process trsp,A
*
encode  A=A; explicit
decode  A; notenumber, noten; type, type
*
if      type == 0
.       calc    octave = int(noten/12)
.       calc    nname  = 12 * frac(noten/12)
* Compute the octave offset, new note name, number of sharps
* and number of flats.
.       calcs   nname, newn   = ,4,4,5,5,6,0,0,1,1,2,3,3
.       calcs   nname, sharp  = ,0,1,0,1,0,0,1,0,1,0,0,1
* Encode the new note.
.       hrn2:
.       encode  A=A; octave, octave-(nname>4); notename, newn
.       encode  A=A; sharp,sharp; flat,0; natural,0
else
.       hrn2:
endif
*
* Output the note.
A
horn:
*
endprocess
*
instr   imsnset,default
staff   1:1
*
macro   play(PCH)
* This takes a notenumber, PCH, and outputs the its notename
.       vars    NAME            $$ name corresponding to PCH
.       vars    OCT             $$ octave as a character
.       vars    pc              $$ pitch class
.       vars    oct             $$ octave
* A notenumber of 0 is interpreted as a rest.
.       if      PCH==0
.       .       encode  NAME=r
* The remainder after dividing PCH by 12 is the pitch class.
* The octave is the integer part of PCH/12.
.       else
.       .       calc    pc = mod(PCH,12)
.       .       calc    oct = int(PCH/12)
* For octaves 3 and lower, select a bass cleff; for octaves
* 6 and higher, subtract 1 from the octave and print an 8va.
* For octaves 4-5, select a treble cleff.
.       .       if      oct <= 3
.       .       .       encode  CLEFF=bass
.       .       elseif  oct >= 6
.       .       .       encode  CLEFF=treble 
.       .       .       1:      "8va"
.       .       .       calc    oct=oct-1
.       .       else    
.       .       .       encode  CLEFF=treble
.       .       endif
*
* First, convert the number, oct, to a character, OCT.
* Then put OCT into NAME and follow it by the letter 
* corresponding to the pitch class and the sharp or natural
* corresponding to the pitch class.  LETTER and SHARPS are
* indexed with (pc+1) since pc ranges from 0 to 11, and the
* position in a character variable runs from 1 to 12.
.       .       encode  OCT=;number,oct
.       .       encode  NAME=OCTLETTER{(pc+1),1}SHARPS{(pc+1),1}
*
* If there is a cleff CHANGE, print the new cleff
.       .       if      'CLEFF' != 'PREV'
.       .       .             CLEFF
.       .       endif
.       endif
* Output the pitch as an eighth note and save the cleff.
.             NAME8
.       encode  PREV=CLEFF
endmacro
*
vars    SHARPS,LETTER,PREV,CLEFF
vars    i
*
1:
*
* Set SHARPS and LETTERS once at the beginning of the piece.
*
encode  LETTER=c c d d e f f g g a a b
encode  SHARPS=n + n + n n + n + n + n
*
* Initialize CLEFF and PREV
encode  CLEFF=treble
encode  PREV=treble
*
* Convert notenumbers 48 to 60
*
loop    i=48,60
.       play(i)
endloop
