******************************************************************************
To do:
* a) determine measure placements.
* b) Hint file for voices of the same instrument ... to be combined for chords.
*    See file named HINTS for example format for file.
  c) notes_fitted_into_measures()
    1) use meter_click and meter arrays.
    2) Use SLOT_CLICKS checks for start of note/end of note.
       How much 'off' is okay?
    3) Adding any rests before notes.
    4) Break notes that go over measures into short note with suffix tie.
    5) If not exact, does a triplet work (length for next 3 notes?)
    6) End of song at running_time -- with rests up to there for all voices.
    7) legato notes ?
  d) printable_measures()
    5) key changes in measures. ties/continuation notes across key changes not allowed.
    6) Change note time into text: get_time_for_note(XXX) -
    8) Figure out how to do triplets/sequence.
    9) key of note -> note to have in gcs.
       Always do +/-/n if not in Key for voice.
    10) volume of note:
	A) cc 11 + cc 7 + velocity = volume of note. (rearrange numbers)
		default 11, 7, velocity.  vol()=7 (default_volume) intensity()=11 (default_intensity). 
		intensity command.
		volume/volumes command.
	B) is cc 10 (pan) changed?
		(default_pan)  pan()
		pan command 
	C) is cc 64 (damper/sustain) on/off?	NOTDONEYET message.
		(default off)
	D) is cc 68 (legato) on/off?
		(default off)
	E) is cc 91 (reverb) changed?
		(default 0 - None)

  e) print out gcs source.
*   'pitch', where is middlec?
*   1) titles before measure 1.
*   2) meter within measures.
*   3) key before measure 1.
    4) instruments  number -> string.
******************************************************************************
Ideas:
    1) fs format -> --vertical, or --staves format.
       Really want an intermediate format that has voices separated by times.
       Then see if can create --vertical format.
       Situations:
       a) legato       - test, find out what is used, etc.?
       b) note lengths - create a list of note lengths (1,2,4,8,16,32,64,128).
                     And then single dotted. And then Double dotted.
                     Create list of triplets for each of the lists. (ordered)
                     Perhaps notelengthcheck[][values]. tripletcheck[][values]
                     Perhaps use prime factorization of the clicks in 0,0,Header,1?
                def print_header():
                global MIDICLICKSPERQUARTER
                print_output("0, 0, Header, 1, {}, {}".format(
                    len(volume)+1, round(MIDICLICKSPERQUARTER)))
       c) Use TimeSignature to determine Meter, and number of notes in measure.
                def print_out_midi1csv_ts():
                print_output("{}, {}, Time_signature, {}, {}, 48, 8".format(
                    voiceon+1, round(lthworkingmeasure), numerator, denominator))
       d) If chords playing, and note short (legato?), then pretend that they are
          on a 'new' voice?  Know current limit from Header/MIDICLICKSPERQUARTER.
       e) KeySignature conversion.
******************************************************************************
# Need to have velocity as volume in bufs_volume array.
	bufs_volume = velocity + CC 7 + CC 10.			Fixed on output.
	Note: changing cc 7 -> intensity(xx) >/< 
	Note: changing cc 10 -> vol(xx) >/< 
	This causes velocity to be:
		createglobalvar('default_velocity', 120, 0, 0, True)    # Note attack.
		calc default_velocity=#  ??
******************************************************************************
