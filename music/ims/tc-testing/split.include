*

* Outputs specified staves of a piece.

*

* Set array variables in "staffon" to -1 or 0 depending on

* whether the corresponding staff should be output.

*

* Set array variables in "ninstr" to the number of

* instruments needed for each staff.

*

* Encode variable "STFS" to all staff names separated by

* spaces; e.g. "encode  STFS ^=one two three ... sixteen"

*

* Set variable "numstaves" to the total number of staves.

*

* Make a call to macro "splits" in the first measure of the

* piece.  This generates -staff- commands which give all

* the instrument numbers to the current staves.  Notes will

* be ignored on all other staves; you have to press NEXT

* after pass 2 of the compiler.         (YUCK!!!)

*

* This also begins the process on each staff.

*

process split,A

*

* Find name of current staff.  Output object if we're

* on the current staff and it is enabled, else ignore it.

*

.       encode  STF ^=;staffname

*

* Search active staff list for current staff

*

.       loop    i ^= 1, nactive

..      if      [staffon(active(i))] $and$ ['STF' = 'STFS{active(i),1}']

...     A

..      endif

.       endloop

*

endprocess

*

* This macro outputs -staff- commands and begins process

* "split" for each staff.  Instrument numbers are

* allocated according to "ninstr".

*

macro   splits

*

* Make -staff- commands for all staves, and save the numbers

* of the active staves.

*

.       calc    nactive ^= 0

.       loop    i ^= 1, numstaves

..      encode  STAFFC(i) ^=staff   STFS{i,1}

*

..      if      staffon(i)

...     calc    nactive ^= nactive + 1

...     calc    active(nactive) ^= i

...     encode  STAFFC(i) ^=STAFFC(i): 

..      endif

.       endloop

*

* Allocate all instrument numbers to enabled staves.

*

.       calc    k ^= 0           $$ instrument number

.       loop    i ^= 1, nactive

..      loop    j ^= 1, ninstr(active(i))

...     calc    k ^= k + 1

...     encode  STAFFC(active(i))^=STAFFC(active(i));number,k

*

* Don't have comma at end of -staff- command

*

...     if      j < ninstr(active(i))

....    encode  STAFFC(active(i)) ^=STAFFC(active(i)),

...     endif

..      endloop

.       endloop

*

* Output the -staff- commands

*

.       loop    i ^= 1, numstaves

..      STAFFC(i)

*

* Begin process "split" on each staff

*

..      STFS{i,1}:      begin split

.       endloop

*

endmacro

*

* Access staff number "i" by STFS{i,1}

*

vars    STFS                    $$ all staves for piece

vars    STF                     $$ current staff

vars    STAFFC(16)              $$ -staff- commands

vars    numstaves               $$ total number of staves

vars    active(16)              $$ active staff numbers

vars    nactive                 $$ number of active staves

vars    staffon(16)             $$ array of enabled staves

vars    ninstr(16)              $$ number of instr per staff

vars    i,j,k                   $$ looping variables

*

* Here is a simple example:

*

*measure 1

*encode  STFS ^=one two three     $$ names of each staff

*calc    numstaves ^= 3           $$ total of 3 staves

*calc    staffon(1) ^= 0          $$ desired output staves

*calc    staffon(2) ^= -1

*calc    staffon(3) ^= -1

*calc    ninstr(1) ^= 0

*calc    ninstr(2) ^= 1

*calc    ninstr(3) ^= 1

*splits                          $$ output -staff- commands

**                               $$ AND begins "split"

*one:    c c c c

*two:    d d d d

*three:  e e e e



















































