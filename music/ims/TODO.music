==============================================================================
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
==============================================================================
Calling routines from: char_var_subst_whole_string(strg, not_this_one, only_this_one, none_means_none, original_line):
    strg = replace_char_var(strg, linestarts, lineends, not_this_one, only_this_one, none_means_none, original_line)
==============================================================================
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
==============================================================================
def char_var_subst_whole_string(strg, not_this_one, only_this_one, none_means_none, original_line):
    def substitute_non_macro_local(t_args, original_line):
*           nline = char_var_subst_whole_string(variable, not_this_one, False, False, original_line).strip()
*           nline = char_var_subst_whole_string(strng, not_this_one, False, True, original_line).strip()
    def do_calc(t_args, original_line):
*           nstrng = char_var_subst_whole_string(strng, -1, False, False, original_line) # Arguments for whole line.
    def do_decode(t_args, original_line):
*       t_args = char_var_subst_whole_string(t_args, -1, lmp_executing_which[l], False, original_line) # Arguments for whole line.
    def do_encode(t_args, original_line):
???         nstrng = char_var_subst_whole_string(strng, -1, False, False, original_line) # Arguments for whole line.
    def process_line(line):
*           nline = char_var_subst_whole_string(qline, -1, False, False, line).strip()
xxx def readthefile():
--------Whole line substitution.  character substitutions only - for macro definition.
xxx                 nline = char_var_subst_whole_string(line, -1, False, False, line).rstrip()
==============================================================================
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
==============================================================================
Routines that call: replace_char_var
==============================================================================
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
==============================================================================
def char_var_subst_whole_string(strg, not_this_one, only_this_one, none_means_none, original_line):
#++        strg = replace_char_var(strg, linestarts, lineends, not_this_one, only_this_one, none_means_none, original_line)
        strg = replace_char_var(strg, linestarts, lineends, not_this_one, only_this_one, none_means_none, original_line)
xxx def char_var_subst_first_token(original_line):
xxx   Want CHAR VARIABLES ONLY in first token only... But not predefined variables. -- Not "measure".
xxx     replacedline = replace_char_var(original_line, 0, lineends, -1, False, False, original_line)
==============================================================================
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
==============================================================================
..............................................................................
Does not replace macro arguments.
def char_var_subst_first_token(original_line):
    replacedline = replace_char_var(original_line, 0, lineends, -1, False, False, original_line)
..............................................................................
def replace_char_var(strng, linestarts, lineends, not_this_one, only_this_one, none_means_none, original_line):
..............................................................................

==============================================================================

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
# ----------------------------------------------------------------------------
# These are only for real voices.
#     running_vl          volume level changing through measure. OUCH - cresc in put_on_bufs.
#     vl                  volume level of [v][m] (start of measure)
#     tlth                total length (tlth[v]) of notes for voice.
# 
# ------------------------------------------------------------------------------
# Staff and real voices? Figure it out.
#     oct
#     time
# ------------------------------------------------------------------------------
# Measure length -- real voices?
#     mlth
# ------------------------------------------------------------------------------
# bufs
# 
# bufs_intensity          -- real voice number.
# bufs_legato_next
# bufs_length
# bufs_suffixes
# bufs_tie_next
# bufs_velocity
# bufs_vol
# 
# inst
# intensity
# key_voice
# pan
# reverb
# vinstrument
# 
# def set_staff_arr_measure(voiceon, m, value, arr, original_line):
# ----------------------------------------------------------------------------
# Staves:
#   Allow multiple ones to do all notes -- and process started for staff/staves
# Process notes for staff/staves verses old way.
#   Separate into decode note and time, and putting notes into voices/staff/staves?
#   a) ABC/midi/v/h/fs
#   b) nested?
#   c) sequence,trill,rest,stand-alone, () for note number, ()() for notenumber&time, (x,y) for notenumber&time.
#   d) Does decode(versions) use these routines?
#   e) Does encode(versions) use these routines?
#   f) Anywhere else?
#       time verses note ... .
#       
# ----------------------------------------------------------------------------
?   "time" variable - multiple staves, which one?
# ----------------------------------------------------------------------------
Thinking of things to do:
    a) Allow multiple staves for "horn, bassoon:" switch.
    b) notes uses staffs instead of voice.
    c) When putting notes into staff voices -- put notes [chords] onto shortest
       ones ... and if any extra voices, pad those with rests to the shortest
       note in the chord.
    d) Commands like pan/volume/instrument that use voices must determine voice/staff.
        If staff/staves, set all voices.
    e) If there are multiple staves present, decoding puts notes/chords to all staves.
    f) staffname, staffname[1,...] :
# ----------------------------------------------------------------------------
staff   name
    Missing colon and numbers = do not play the staff.
    Staff defaults to treble clef.
    Clef's change anywhere, anytime, middle of measure, etc.
    fermata extends notelength by amount in variable fermata.
    arp means chord is staggered in starting.
    legato is default.
    ties/slurs t/z.
    tie 4c4 c8 c16 cs c32 c32       # Tie all but staccato 'cs' (4c16s). Returns to tie?
    Chords on staff - must have enough voices to support it.
    Can change staff and use different instruments (voices).
    "name" can be a number.
    oboe, bassoon:   key a minor        More than one staff line allowed, apply to all staves.
------------------------------------------------------------------------------
DONOTDO - glide?
horn: glide 16 3c4 3d4
    The "glide" format has the same effect of synthesizer "portamento". Instead of
    jumping to a new pitch, it will glissando to each new pitch. After the staff
    name and colon, write the word "glide", followed by the length of the glide.
    In the above example, all pitches on staff "horn" will glissando for a sixteenth
    note before arriving at the next pitch. With the above, 16th note "glide" in
    effect, the above notes are played as:
        3c4 3c@D3d16t 3d8d
    horn: glide 0
    Gliding on a staff is stopped by setting the glide to zero.
# ----------------------------------------------------------------------------
Add in commands:
    staff
    process / endprocess
        begin       <- one instance for each staff (or voice).
        quit
    keywords within staff/voice lines.
==============================================================================
Add more "ims" features. Can they be added simply?
    1) last_command for continuation lines -- staff# -- after staff added.

?   b) [...] for chords?
?   c) v(x) (etc. for volume) i.e. v50 ... optional parens.
?      p(x) (etc. for pan)    i.e. p50 ... optional parens.
?   d) treble, bass, ...        commands
?   e) fermata                  How to print in abc notation -- store with note, extend time played?
?   f) vf vp vpp vff - how implemented?    Does my putd's making them vol() satisfy?
?       vpp< 4c4 c gg a g2 vfff e d a   (< is crescendo from pp to vfff).
?       Perhaps string variable that does "vol(pp)"? Problem, cannot assign it to change values.
?   g) Does "if" work with variables and quotes?
?   IGNORE:
?   a) "hide rests" ... "show rests"   Ouch -- for abc notation that is not going to happen - maybe.
    b) transpose +24.   Change for playing, not printing. transpose 0 = off. transpose -5.
    c)  tuba:   transcribe up 1 octave                  # This is for printing, not playing.
        picc:   transcribe down 2 octaves
        horn:   key c major   transcribe up to d major
        horn:   key c major   transcribe down to d major
        Undo via: "transcribe up 0 octaves"
    d) beaming - ignore, has token following (possible COMMAs).
    e) lh / rh                  no tokens after
    f) hide / show              one token after
    g) perc / nohead / normal   printed with percussion - no tokens
    h) midi(xxx,xxx)            one complicated token after (possible COMMAs).
    i) patch(xxx,xxx)           one complicated token after (possible COMMAs).
    j) double quotes = lyrics.
    k) single quotes = pass to LIME (?)
    l) print / format           ignore command / line.

    2) Lilypond used instead for printing music?
===============================================================================
Commands in IMS:        command(1) =  ...

Differences?
*   tempo           -- NOTDONEYET for accel and rit processing.
?   instrument      -- How to change for staves?
    instr           -- probably don't do, very plato specific.
    tuning          -- MIDI - what does this really mean? Is it used?
    print           -- (vln1,vln2),vln3     parenthesis means same staff. (interesting)
                        semicolon between groups. (like [] in %%staves)
    format
?   time    cut / common    - At beginning of measure.  ??
===============================================================================
? key words used on staff line: (staff defines a name like "lefthand:")
    clef, xpose/transpose, beaming, hide, show, midi, lyrics, key, arp, trem0,
    trem1, trem2, trem3, fermata, lh, rh, legato, staccato, marcato, tie, slur,
    volumenumb, volumename, crescendo, position, pan, type, treble, bass,
    soprano, alto, tenor, normal, perc, nohead, oloz, floz, oharm, fharm,
    stemsoff, stemson

    format: pause, density, display, key, combine, lyrics, staff, systems,
            page

lh is left hand (lower) of grand clef, rh is upper. Grand clef is two together.
===============================================================================
?   vx:     tie 4c4,c8,c16,cs
?   a       = accent
?   aa      = heavier accent.
?   <       = cresendo start
?   >       = diminio start
?   g       = grace
?   vpp < c d e vff         How lippold did cresendos.
?   transcribe  up 1 octave
?               key c major   transcribe up to d major
?   v(%)    0 to 100.
?   p(0)    = pan   percentage (0=left, 100=right)
?   p(50) < p(100)  for moving pan.
?   Parenthesis are optional.
?   "do" 3c4 "ri" d "mi" e      lyrics printed under notes.
?   oboe, bassoon:   key a minor
------------------------------------------------------------------------------
    To set the factor by which fermata increases a note value, "calc"
    commands are again used.  For example, "calc    fermata^=3" will cause
    all following fermatas to triple note lengths.

    The variable "arp"  specifies what fraction of a whole note that the
    notes in a chord are staggered by.  The default value is 1/32, which
    means notes in an arpeggiated chord are played one thirty-second of a
    whole note apart.  "calc    arp^=1/24" would change the interval
    between chord notes to 1/24 a whole note.

    The variables "marc" and "stac" both specify what portion of a note
    will be played, and what portion will be converted to a rest.  For
    instance, if you set the value of "marc" to .75, the note will be
    played for three-quarters of its original length, with the remainder
    of the length spent as a rest.  The default value of "marc" is .5,
    while "stac" is normally .25 .

    The variables "accent" and "aaccent" specify the amount of volume
    increase caused by the light and heavy accents ("a" and "aa").
        calc    accent^=8
        calc    aaccent^=15
    In the first example, the value of "accent" is set to "8", thus any
    OPAL note ending with "a" (light accent) will be played 8 volume
    levels louder than normal.  The second "calc" command causes all notes
    with a heavy accent ("aa") to be played 15 volume levels louder.  The
    default values of accent and aaccent are 10 and 20, respectively.
