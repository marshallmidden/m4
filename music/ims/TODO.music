# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
# ----------------------------------------------------------------------------
# 1) last_command for continuation lines -- staff# -- after staff added.
# ----------------------------------------------------------------------------
Add in commands:
    staff
    loop
    outloop
    endloop
    process
    endprocess
        begin
        quit
==============================================================================
Add more "ims" features. Can they be added simply?
    a) "staff"                  command
    b) [...] for chords?
    c) v(x) (etc. for volume) i.e. v50
       p(x) (etc. for pan) i.e. p50
    d) treble, bass, ...        commands
    e) fermata                  How to print in abc notation -- store with note, extend time played?
    f) vf vp vpp vff - how implemented?    Does my putd's making them vol() satisfy?
    g) "hide rests" ... "show rests"   Ouch -- for abc notation that is not going to happen - maybe.
    h) Lilypond used instead for printing music?
===============================================================================
Commands in IMS:        command(1) =  ...

Differences?
*   tempo           -- NOTDONEYET for accel and rit processing.
?   instrument      -- How to change for staves?
    instr           -- probably don't do, very plato specific.
    tuning          -- MIDI - what does this really mean? Is it used?
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    print
    format
    decode          <- very complicated changes and format of it. BELOW
===============================================================================
* Generate -decode- keyword table.
    after, upto, explicit, number, staffname, octave, notename, notenumber,
    sharp, flat, natural, tuplet, notelength, dot, duration, glissando, t, m,
    s, z, l, a, aa, g, gg
------------------------------------------------------------------------------
* key words used on staff line: (staff defines a name like "lefthand:")
    clef, xpose/transpose, beaming, hide, show, midi, lyrics, key, arp, trem0,
    trem1, trem2, trem3, fermata, lh, rh, legato, staccato, marcato, tie, slur,
    volumenumb, volumename, crescendo, position, pan, type, treble, bass,
    soprano, alto, tenor, normal, perc, nohead, oloz, floz, oharm, fharm,
    stemsoff, stemson

    pause
    density
    display
    combine
    systems
    page
===============================================================================
    vx:     tie 4c4,c8,c16,cs
    a       = accent
    aa      = heavier accent.
    <       = cresendo start
    >       = diminio start
    g       = grace
    vpp < c d e vff         How lippold did cresendos.
    transcribe  up 1 octave
                key c major   transcribe up to d major
    v(%)    0 to 100.
    p(0)    = pan   percentage (0=left, 100=right)
    p(50) < p(100)  for moving pan.
    Parenthesis are optional.
    "do" 3c4 "ri" d "mi" e      lyrics printed under notes.
    oboe, bassoon:   key a minor
------------------------------------------------------------------------------
    To set the factor by which fermata increases a note value, "calc"
    commands are again used.  For example, "calc    fermata^=3" will cause
    all following fermatas to triple note lengths.

    The variable "arp"  specifies what fraction of a whole note that the
    notes in a chord are staggered by.  The default value is 1/32, which
    means notes in an arpeggiated chord are played one thirty-second of a
    whole note apart.  "calc    arp^=1/24" would change the interval
    between chord notes to 1/24 a whole note.

    The variables "marc" and "stac" both specify what portion of a note
    will be played, and what portion will be converted to a rest.  For
    instance, if you set the value of "marc" to .75, the note will be
    played for three-quarters of its original length, with the remainder
    of the length spent as a rest.  The default value of "marc" is .5,
    while "stac" is normally .25 .

    The variables "accent" and "aaccent" specify the amount of volume
    increase caused by the light and heavy accents ("a" and "aa").
        calc    accent^=8
        calc    aaccent^=15
    In the first example, the value of "accent" is set to "8", thus any
    OPAL note ending with "a" (light accent) will be played 8 volume
    levels louder than normal.  The second "calc" command causes all notes
    with a heavy accent ("aa") to be played 15 volume levels louder.  The
    default values of accent and aaccent are 10 and 20, respectively.

*   time # whole notes since beginning of measure

    Indexed Character String Variables
        encode     AA^=3e+4 4c8 [3d4 e f]
+       pogo:      AA{2,1}
    If you put indices on a character string variable, then only part of
    the character string will be substituted.  The first index specifies the
    starting object in the character string variable, and the second index
    specifies the number of objects.  In the example above, "4c8" will be
    substituted on staff "pogo", since "4c8" is the second object in the
    character string variable AA.
+       encode     BB^=3e+4 4c8 [4d2 5a] 3c4 5a2
+       pogo:      BB{2,5}
+   In the above example, staff "pogo" will be:
+       pogo:   4c8 [4d2 5a]
    Notice______ that each chord bracket counts as a separate object.
        pogo:   CC^=3e+4 4c8 [3d4 e f]
        pogo:   CC{2}
    If there is only one index on a character string variable, then all of
    the character variable starting at the specified object is
    substituted.  In the above example, staff "pogo" will be:
        pogo:   4c8 [3d4 e f]
    Braces (micro-shift-2 and micro-shift-3) must be used around character
    string variable indices.
------------------------------------------------------------------------------
    The operation first in line after the controlling variable is served if the
    controller has a negative value, the second operation is performed if the
    controller has a value of "0", the third is completed if the controller is
    equal to 1, and so on.
+       calcc      part=3,val^=10,val^=4
+       calcs   inaa,radio^=1,6,25,8,react,isotp^/8,,14
                          neg 0 1  2   3      4    5 6
    The "calcs" command is similar to the "calcc", except that it makes one of
    several assignments to a SINGLE variable, while the "calcc" handles many
    different variables.  The first variable listed is the controlling variable,
    and the second one listed is the variable that is going to be assigned a
    value.  As with "calcc", variables may be assigned a number, or another
    variable's value, or even the value of expressions that will be evaluated
    when the assignment is made.
------------------------------------------------------------------------------
EXAMPLES:
------------------------------------------------------------------------------
+   loop    index<7
    ...
+   endloop
or
+   loop
    ...
+   endloop index<7
or
+   loop    index<7
    ...
+   endloop anything>25
------------------------------------------------------------------------------
+   loop    vol^=60,100,10      (increment assumed 1)
            vln:    v(vol) 4c4
+   endloop
------------------------------------------------------------------------------
    A sample macro call would be:
        free  (2a,3e,4c)
    macro   free (X,Y,Z)
            flute:  X8 X16 X
            piano:  [Y8 Z] [Y16 Z] [X Y]
    endmacro

    macro   frog.NOTES.
            NOTES{1,1} NOTES{3,1} NOTES{2}
    endmacro

    macro   hz(FREQ,LTH)
            vars    notenum
            calc    notenum ^= 12*([log(FREQ/13.75)]/[log(2)])-3
            calc    notenum ^= min(notenum,110)
            calc    notenum ^= max(notenum,1)
                    (notenum,LTH)
    endmacro
    *
    staff   s1:1
    s1:     hz(440,.25)
------------------------------------------------------------------------------
