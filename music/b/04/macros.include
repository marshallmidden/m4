* ----------------------------------------------------------------------------
* vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
* ----------------------------------------------------------------------------
* vlm = Volume (like sf or sfp)
* note
* lth = length of note (sequence).
* num = number in sequence (split [length] this many times)
* suffix = trailing suffix, if any. (Like t or l or whatever.)
* 
* Example: svlm(sf,3c,t,3)2d
*          vol(sf)s3(3ct,3ct,3cl)2d
*
macro svlm_n(vlm,note,suffix,num)lth
  var Sp, Sm, Se, i
  encode Sp=vol(;number,vlm;string,)s;number,num
  encode Sm=
  for i=1,num
    encode Se=;number,Sm
    if i < num
      encode Sm=;number,Se;number,note;string,t,
    else
      encode Sm=;number,Se;number,note;number,suffix
    endif
  done
  encode Se=;number,lth
  Sp(Sm)Se
endmacro
* ----------------------------------------------------------------------------
* Example: svlm_cres(sf,8,4a,2d,l,vol>)
*          vol(sf) 4a8t, vol>4a(1/2+1/4-1/8)l
macro svlm_cres(vlm,long,note,lth,suffix,vdc)
  var newl, thnt, newf, fsnt
  encode fsnt=;number,note;number,long
  decode fsnt;duration,newf
  encode thnt=;number,note;number,lth
  decode thnt;duration,newl
  calc newl = newl - newf
  vol(vlm)note(newf)t, vdc, note(newl)suffix
endmacro
* ----------------------------------------------------------------------------
* Example: svlm_chord2(fp,8,4a,4b,2d,l,vol>)
*          vol(sf) [4a8t,4b8t] vol>4a(1/2+1/4-1/8)l
macro svlm_chord2(vlm,long,note1,note2,lth,suffix,vdc)
  var newl, thnt, newf, fsnt
  encode fsnt=;number,note1;number,long
  decode fsnt;duration,newf
  encode thnt=;number,note1;number,lth
  decode thnt;duration,newl
  calc newl = newl - newf
  vol(vlm)[note1(newf)t, note2(newf)t] vdc, [note1(newl)suffix, note2(newl)suffix]
endmacro
* ----------------------------------------------------------------------------
* End of file macros.include
