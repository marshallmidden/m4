#!/usr/bin/perl -w
use strict;
use warnings;
#-----------------------------------------------------------------------------
# my $ADD = 1;
# my $ADD = -70;
# my $ADD = -23;
my $ADD = -88;
#-----------------------------------------------------------------------------
while (<>)
{
    my $line = $_;
    chomp($line);
    if (substr($line,0,8) eq 'measure ')
    {
	my $m = substr($line,0,8);
	my $v = substr($line,8);
	$v =~ s/^\s+//;				# Eliminate leading spaces in argument.
	$v =~ s/\s+$//;				# Eliminate trailing spaces in argument.
	my ($a,$b) = ($v,'');
	($a,$b) = ($v =~ /^(\d+|)(.*)$/);		# Get digits at first, and rest of string.
	if (!defined($a)) { $a = '' };
	if (!defined($b)) { $b = '' };
	if ($a =~ /^\d+$/)
	{
	    $a = $a + $ADD;
	}
	else
	{
	    $a = "$a+$ADD";
	}
# th 	my ($c,$d,$e) = ($b =~ /^(.*)(1st|2nd|3rd|[4-9]th|[1-9][0-9]+th)(.*)$/);
# th 	if (!defined($c)) { $c = '' };
# th 	if (!defined($d)) { $d = '' };
# th 	if (!defined($e)) { $e = '' };
# th 	if ($d eq '1st')
# th 	{
# th 	    $d = '2nd';
# th 	}
# th 	elsif ($d eq '2nd')
# th 	{
# th 	    $d = '3rd';
# th 	}
# th 	elsif ($d eq '3rd')
# th 	{
# th 	    $d = '4th';
# th 	}
# th 	elsif ($d =~ /^[0-9]+th$/)
# th 	{
# th 	    my ($g,$h) = ($d =~ /^([0-9]+)th/);
# th 	    if (!defined($g)) { $g = '' };
# th 	    if (!defined($h)) { $h = '' };
# th 	    $g = $g + 1;
# th 	    $d = "$g" . "th$h";
# th 	}
# th 	else
# th 	{
# th 	    print STDERR "unexpected d='$d' line=${line}\n";
# th 	}
# th 	$b = "$c$d$e";
	print STDOUT "$m$a$b\n";
    }
    else
    {
	printf STDOUT "%s\n",$line;
    }
}   # End of while
#-----------------------------------------------------------------------------
exit 0;
