#-----------------------------------------------------------------------------
Legend for column 1:
 P = printout requested
 * = looked at.
 x = cut & paste.
#-----------------------------------------------------------------------------
x   symphony       music source			copy&paste 2021-06-24_15-43-40
*   mcmp           2nd half of new split music compiler
?   gcssong        More of the same		does not exist
x   gswtunes       More of the same
*   gswtemp        Source for musicomp tests
x   largo           Penthouse Music Compositions II	2021-06-24_18-17-27
*   pieces          Penthouse Musicomp Music Source
*   songs           Some more Music Source
x   tunes           More source for songs		2021-06-24_16-30-54
#-----------------------------------------------------------------------------
Inventory in gswaids:
*   gswaids         The heart of the GSW system
*   gswhelp         Documentation for the GSW system		document format, usage, etc. of songs.
*   gswrose         Audio Roses (unfinished)
*   musicomp        Compiler for Penthouse Binaries
*   presto          Executor for Penthouse Binaries
*   gswsongs        Watch music appear on the screen
*  * musicdemo       Publishable demo lesson
*   gswmaint        Engineering test and demo lesson
*   gswengr         Checkout & Interactive Repair lesson
#-----------------------------------------------------------------------------
Invisible Lessons:
*   gswdata        Stored presto format binaries
*   goochie        Old copy of gswdata
*   gswdemodat     Stored presto format binaries
*   p1             Student Editor for Musicomp source
*   p2             Utility routines for p1
*   p3             Editor for utility files for the new waveform-synthesizer
*   gswuse         -use-able routines for others
*   gswtunes       More of the same
*   allegro        Temporary router lesson
*   gswfcn         old audio roses being fixed to use
*   symphony       music source
*   wirelist       list of wiring connections
*   mcmp           2nd half of new split music compiler
#-----------------------------------------------------------------------------
Lessons used in developing the GCS music box
*    gcsvar0        Lippold Haken's lessons to convert
*    gcsvar1        his source code into printable music
*    gcsvar2        for music scores on the varian
*    gcsvar3        printer.  (A huge job!)
*    gcsaids        gcs aids lesson
*    gcshelp        gcs aids lesson
*    gcsfds         ppt floppy disk system driver
#-----------------------------------------------------------------------------
*   3.  compose
*   8.  dedit
+*  37.  gswcode
*   71.  newdset
*   90.  gcseprom
*   94.  jswork
*   96.  z80aids
*   98.  zilog
#-----------------------------------------------------------------------------
The 12 notes are:
    0, 1,2, 3,4,5, 6,7, 8,9,10,11
    c,c+,d,d+,e,f,f+,g,g+,a,a+,b
    c,d-,d,e-,e,f,g-,g,a-,a,b-,b
#-----------------------------------------------------------------------------
The commands from gswhelp, "Learn about using the Music Compiler", option 2.

    Here are examples of all commands:
      measure 1                   cstop*
      tempo   120,4               cstop
      volume  6,6,7,7             cstart
      voice   4                   if      m1$or$(m2>10)
      cis     3                   else
      key     b-                  endif
      temper  c                   putd    /Z/3c4,4c4/
      sharp   a,b,d               macro   atheme,x,y,z
      flat    d,e,f               endm
      natural a,g,c               title   Music Command List
      pitch   +6                  decode  m1,3c+
      slide   3c,4c,8             * put your name in a comment
      delay   4                   3c1 $  another comment
      percus  10                  r8d
      goto    1,2,2,3             4c+8
      calc    m1 <- -1            3c4,3g4,3a-4,4c4
      setperm 5                   marker
      randp   m5                  debug
      randu   m4,12
      copy    measure to unit
      change  command temper to just
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
measure
    The -measure- command marks the beginning of a new
    measure. It has one argument, the measure number.
    Example:
          measure 5               $$ begins new measure 5
          measure 6.5             $$ need not be integers
    Measure numbers must be given in ascending order.
    You may leave some measure numbers unused if you like.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
volume
    The -volume- command sets the volume for each of
    the voices. It has as many arguments as there are
    voices at the moment it is given. The volume set
    does not take effect until the next -voice- or -cis-
    command. The volume is a number between 0 and 7;
    7 is loudest. Example:
          volume  4,7     $$ for 2 voices; mf and fff
    Caution: you should use only volumes 5 through 7 unless
    you really know what you are doing. It is easy to write
    music that cannot be heard over the noise of the terminal.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
tempo
    The -tempo- command indicates how fast the piece is
    played. It can have one or two arguments:
          tempo   150,4
    This form indicates how many notes of the given
    length (here quarter notes) will be played in a minute.
    This form of the -tempo- command saves the second
    argument as the shortest allowed note for the piece.
    Thus the second argument should be the shortest note
    found in the piece, or shorter. This form also computes
    the nearest proper tempo, and displays a warning if
    that is more that 1% different from the given value.
          tempo   30
    This form specifies how long a whole note takes in
    units of Plato output frames (1/57.14th second).
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
cstop*
    This command marks the end of the score. It may be
    omitted. It can be used to stop compiling a song in
    the middle.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
flat, sharp, natural
    The -flat- and -sharp- commands are used if some
    accidental occurs a lot in a passage. To set the
    key of a piece, use the -key- command. Example:
          flat    b,e
          sharp   f       $$ for g minor key, for example
    The -sharp- and -flat- commands are cumulative, that
    is, a second -flat- command on a note will make that
    note get a double flat. The -flat- and -sharp- commands
    affect only notes that are written without accidentals;
    they do not affect notes marked as "natural" with "n".
    For example:
          flat    c
          4c4             $$ this becomes a "c flat"
          4cn4            $$ this stays a "c natural"
          flat    c       $$ this is cumulative
          4c4             $$ so this will be a "c double flat"
    The -natural- command undoes the effect of a -flat-
    or -sharp- command. Example:
          natural c       $$ all following c's will be natural
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
voice
    The -voice- command sets the number of voices to
    be compiled. After a -voice n- command, there can be
    at most n notes per line, n arguments in a -volume-,
    etc. It is possible to write fewer notes per line than
    the number of voices.
    The -voice- command also outputs the volume last set in
    a volume command to the music box.
    Example:
          voice   4       $$ four voices from now on
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
cis
    The -cis- command is similar to the -voice- command.
    However, after a -cis n- command, only one of the  n
    voices will receive new output, the others continue
    playing the note they were playing before the -cis-
    command.
    Like -voice-, -cis- outputs the volume last set with
    a -volume- command. Example:
          cis     3       $$ 3 voices, but only 1 gets output
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
goto
     The -goto- command is used to repeat and/or skip
     pieces of the song. It can have up to 8 arguments.
     Each argument is either a measure number or "x".
     The first time a -goto- is encountered, you go to
     the measure listed as the first argument; the second
     time to the measure given as second argument, and so
     on. If an argument is "x", execution proceeds to the
     next line. Example:
           goto    10,x
     The first time this will go to measure 10, the second
     time it will continue with the next line.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
title
     The -title- command gives a title to the song, which
     is displayed when the song is played. There can be
     more than one -title- command; each -title- command
     adds one line to the title. Example:
           title   Promenade from "Pictures at an exhibition"
           title   By M. Moussorgski
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
key
    The -key- commands sets the key of the piece.
    For example:
          key     a       $$ key of a major
    After a -key- command, all notes that are not accidentals
    and not marked as natural (as in "4an2") will be played
    with an appropriate flat or sharp.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
temper
    This command sets just intonation in the key that
    is given as an argument. Example:
          temper  a
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
pitch
    This command raises or lowers the note pitch by the
    specified number of semitones. Example:
          pitch   -2      $$ 2 semitones lower
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
slide
     The -slide- command plays a glissando. It can
     only be used after a -voice 1- or -cis- command.
     It has the following form:
           slide   4a,5a,2
     The first argument is the starting note, the second
     is the ending note, and the third is the overall
     length. The example plays a glissando from a4 to a5,
     lasting as long as a half note.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
delay
    The delay command causes a delay in playing. The
    length of the delay is given as the arguement, in
    units of 1/60th of a second. This command is useful,
    for example, for playing a fermate. Example:
          4c2
          delay   15      $$ delay 1/4th second, fermate
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
cstop
    After a -cstop- command, the music compiler skips
    all lines up to the next matching -cstart- command.
    This can be used to suppress compilation of part of
    a song.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
cstart
    The -cstart- command undoes the effect of the most
    recent -cstop- command. When all -cstop- commands have
    been undone, compilation resumes with the next line.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
percus
    The -percus- command sets the terminal's slide
    selector to the slide whose number is given as the
    argument. This can be used to generate a percussion-
    like effect. On terminals without slide selector
    this command does nothing. Example:
          percus  1
          percus  5
          percus  1       $$ rattle the slide selector
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
change
    The -change- command allows you to change the name
    of a command. Use this with restraint because it may
    make the song hard to read. This command is quite use-
    ful in the following case:
          change  measure to unit   $$ alternatively:
          change  command measure to unit
    This allows one to use the U search option in the Tutor
    and dedit editors. Note that after a -change- command,
    the original command name is no longer available.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
copy
    The -copy- command is very similar to the -change-
    command, but it makes the second command a synonym of
    the first, rather than renaming a command. For example:
          copy    measure to unit   $$ or:
          copy    command measure to unit
    After this command, both -measure- and -unit- commands
    are available, and they do the same thing.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
calc
    The -calc- command is used to set variables that
    can then be used later in the song, and to set certain
    parameters used in the music compiler. You should be
    careful with the latter because it may mess up your
    song if you're careless; the music compiler has __
    build-in protection against your mistakes.

    You have available during compilation of the song
    9 variables, called m1 through m9. You can also access
    them as m(?) where ? is some expressions whose value
    is between 1 and 9. These variables are never changed
    by the compiler; you can use them in any way you like.
    However, they are used during compilation only; you
    use them to vary what happens when the song is played.

    These variables can be used to turn pieces of the
    song on or off (see the -if- command), for use as
    note numbers or frequency values (see the part on
    notation for notes) and various other things.
       Examples:
          calc    m1 <- 10           $$ set first variable
          calc    m(m1-2) <- m2/5    $$ may use expressions

     The following parameters may be set with the -calc-
     command:
           pause:  the pause inserted between two identical
                   notes or between broken notes.
           stac:   the length of a staccato note.
           grace:  the length of a grace note.
           frames: the length (in frames) of a whole note.
                   do not assign to this (use the -tempo-
                   command for that).

     Both of these are specified in units of output frames
     (1/60 of a second). In order to make sure that the
     timing works out, these parameters should never be set
     to values smaller than the current number of voices.

     In addition, there are the following functions:
           freq(x):    the frequency associated with a GSW
                       operand of value x.
           nearest(x): the note number for the note nearest
                       in frequency to x.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
decode
     The -decode- command assigns the note number of
     the note which is given as the second argument to
     the variable which is the first argument. Example:
           decode  m1,3c+  $$ note number for 3c+ into m1
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
randu
     The -randu- command generates a random number and
     assigns it to the variable given as the first argument.
     The random number is an integer between 1 and the value
     given as second argument. Useful for random music.
           randu   m1,10           $$ random number 1 <= m1 <= 10
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
randp
     -randp- is like -randu-, but takes only one argument
     (a variable name) and returns successive random numbers
     without replacement. Goes with -setperm-.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
setperm
     -setperm x- sets -randp- up with a list of x numbers
     between 1 and x to draw from.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Music source format
    Music sources for the GSW music compiler are basically
    text files containing three types of lines: note lines,
    command lines, and comment lines.

    Command lines contain a single command such as -tempo-
    or -volume-. They consist of a command field, which
    occupies the first 8 characters of the line, and an
    argument or tag field, which occupies the rest. Not
    all commands need arguments, and the number of arguments
    required depends on the command. Refer to the individual
    command writeups for details.

    Comment lines begin with a "*". They are ignored by the
    compiler and serve only to enlighten the human reader of
    the music. You may use comments to clarify intricate
    code, to store your name with the source, or whatever
    else you like.

    You can also comment other lines by using the $$ feature.
    The music compiler ignores everything following the $$
    on a line. This way, you can add short comments to a
    piece without using extra lines for separate comments.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Example of commands and comments
    title   demonstration of the gsw source format
    * this is a comment; the above is a command line
    tempo   200,4           $$ comment on the same line
    *
    * you can also use "*" for separators
    *
    volume  4,4,5,3

   The third form of source line is the note line. The
   note lines contain the actual music to be played; the
   command lines merely change its form. Note lines
   consist simply of the notes for the voices to be played,
   separated by commas. For example:
       3a4,4c4,r2              $$ three voices
   The number of notes written on a note line should agree
   with the number of voices at that moment. Each note
   line contains those notes which start on one particular
   point in time. If, at some point, a new note starts in
   2 voices but in the third a note is still playing, the
   corresponding entry is left open on the line. Example:
       3a8,,4c8                $$ voice 2 is still playing
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
(from "Pictures at an Exhibition", by Modest Moussorgski)
    In this piece of music, consider the section set off
    by vertical lines.
    At point 1, all 4 voices start playing at the same time.
    At point 2, only the first voice has a new note; the
    others are still only halfway done with their quarter
    notes. At points 3 and 4, the second voice is silent,
    and the other 3 start a new note. At point 5, again
    only voice 1 has a new note. Therefore, the source for
    this part would look as follows (don't worry about the
    details of the notation, that comes up in a moment):

    4c8,3a4,3c4,1f4         $$ point 1, 4 new notes
    4f8,,,                  $$ voices 2-4 are still playing
    4d8,r2,3f4,1e4          $$ silence voice 2, start others
    4c8,,3c4,1f4            $$ voice 2 still silent
    4f8,,,                  $$ again, 2-4 are still busy
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Note format
  The notation for normal notes can be summarized by:
          onalm
  Each letter stands for a part of the notation. Some
  parts are optional.

      O is the octave, a number between 1 and 8. Middle C is
      in octave 3. See the GSW staff for details.

      N is the note itself, a letter between a and g. This
      is the only required part of a note specification. Rests
      are written as "r", without an octave number.

      A is an accidental. To indicate accidentals, write + for
      sharp or - for flat; ++ for double sharp and -- for
      double flat. Note that these accidentals do not carry
      over from one note to the next (in violation of all rules).
      To indicate a natural (i.e. cancel temporarily the effect
      of a -key- command) use "n"

  Examples of these things:
          b               $$ just a note
          5f+             $$ octave number and accidental
          an              $$ "A" natural

    L is the length of the note. Normally this is a number,
    for example 16 to indicate a 16th note. You may write
    "16th" if you like that better. There are also the
    abbreviations w, h, q for whole, half and quarter note.

    Some special forms for L are:
      3(4) indicates 3 notes in the time of a quarter note.
	   This notation is used for triplets etc.
      (.25) Same as 4: a quarter note. Values in parentheses
	   are interpreted as fractions of a whole note.
      [12] indicates length of the note in "output frames",
	   which are the smallest timing units on the system.
	   There are 57.1429 frames per second.

  More examples:
          a4              $$ quarter note
          rq              $$ quarter rest
          4b-3(4)         $$ beginning of a triplet

    M is a modifier, which specifies how the note is to
    be played. There may be more than one modifier; they
    may be combined in any possible way, although not all
    forms make sense.
      d  Dotted note. Multiplies the length of the note by 11.
         Notes may be dotted more than once.
    
      s  Staccato. The note is played as a short note, and an
         appropriate rest is inserted after it to fill up the
         rest of the note's length.
    
      b  Broken note (marcato). Normally, the GSW slurs all
         notes (except two identical notes in a row). To prevent
         this, modify a note by "b", which breaks it loose from
         the following note.
    
      t  Tie. Not to be confused with slur. A tied note is
         played by adding its length to that of the preceding
         note. The rest of the note specification is ignored.
    Example:
            3a2             $$ half note, normal
            3a16t           $$ lengthens previous by 1/16th

   In this note format, the only required part is "n", the
   note itself. The other parts may be omitted in certain
   cases, with the following results:
     O  Defaults to most recently used octave number for this
        voice. Therefore, you need not repeat the octave number
        unless you are switching octaves.
     A  Default to a normal note. If there was a -key- command
        that would put a sharp or flat on this note, or a
        -sharp- or -flat- command is in effect, the note gets
        that sharp or flat (use "n" to avoid this).
     L  Defaults to the most recent length for this voice,
        in the same way as O does for octave number. Therefore
        you need not repeat the length in runs of identical-
        length notes.
     M  Default is a normal note, which is slurred to the next
        note, and not dotted.

  Some special forms:
  1) There are a few other ways to specify the note pitch.
     These special forms take the place of "on".

     (13) A value in parentheses indicates a note number.
          This form is useful with the -decode- command.
     [440] A value in brackets indicates a frequency in Hz.
     {317} A number in { } is a "GSW operand", which is
          an output word that will be sent directly (without
          change) to the GSW.

  2) t(3a,3g,7)4          $$ form is t(ona,ona,#)lm
     This is a trill from 3a to 3g, playing a total of 7
     notes, with an overall length of a quarter note.
     Getting trills to sound good requires some experimenting
     with the total number of notes, which should be such
     that the length of the notes that make up the trill
     is an integral multiple of the length of an output
     frame.
  More special forms:
     s4(4a,b,a,g)            $$ form is slm(ona,ona,...)

     This is a "sequence" consisting of the notes listed in
     parentheses. The total length of the sequence is specified
     by the length which directly follows the "s". All notes
     except the last one in the list are played as short
     grace notes (with the same length as a staccato note).
     The last note has a length that makes the total length
     come out to the specified value.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Example of music source format:
    tempo   110,4
    copy    measure to unit
    voice   2
    title   Inventio 15    by Bach
    title   for plato by Marshall Midden
    *
    key     d
    *
    unit    1
    1b8,r8
    r8,3b16
    ,3a+16
    2d8,3b8
    r8,3f8
    2e8,t(3a,3g,3)8
    r8,3f8
    2d8,3b8
    r8,3f8
    unit    2
    2c8,t(3g,3f,3)8
    r8,3e8
    1a+8,4c8
    *...etc...
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
macro
	   macro   macname,arg1,arg2,...,argn
endm
		 macro name     arguments
    The -macro- command allows you to easily duplicate
    similar pieces of music code with less work.  You can
    think of it as a form letter with several blanks to
    be filled in.  Since you may define more than one
    macro in a song, you must be able to tell them apart;
    this is done by giving the macro a name.  A macro
    can be used with several "blank spaces" (a la form
    letters which use your name, address, and city to
    impress you); in order to tell the music compiler
    how many different things must be filled in, the
    -macro- command also has arguments.
	macro   form,name,address,town		     This line starts the definition.
	dear mr./ms. name,
	enter our sweepstakes. just think, the       This defines
	people at address might be the first         the macro
	winners in town in this contest. in          called "form".
	previous contests, there were 5 winners
	from town.
	endm					     This line ends the definition

    Suppose we now write the line
	form    jones,165 erl,urbana

    The compiler would find the macro named "form", and
    The result would look like this:
	dear mr./ms. jones,
	enter our sweepstakes. just think, the
	people at 165 erl might be the first
	winners in urbana in this contest. in
	previous contests, there were 5 winners
	from urbana.

    Note that every place in the macro that "name" appeared,
    the word "jones" has replaced it; for "address", "165 erl"
    has replaced it, and for "town", "urbana" was substituted.

    Note that there is a distinction between DEFINING a macro
    and INVOKING it.  A macro is defined by the -macro-
    command, the lines inside the macro, and then an -endm-
    command.  This should go up at the top of your song.  A
    macro is invoked by using the macro name later on in the
    song, as if it were a command.  Note that the macro name
    goes into the command field, and the arguments go into
    the tag field of the source line.

    If you are really tricky, you can use a macro inside of
    itself. This, however, is not advised unless you REALLY
    know what you are doing, as otherwise you can easily
    mess up what you're trying to do.  Not quite as tricky,
    but also very useful, is the technique of using a macro
    inside the definition of another macro.

    There are some limitations when dealing with macros:
	Letters per argument in the -macro- statement     10
	Length of the name of the Macro (# letters)       10
	Number of arguments in a Macro                    16
	Number of Macros you can define in one song       75
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
     putd         putd    /string1/string2/
                              delimiter

     The -putd- command performs a function similar to
     the -macro- command: it lets you type less to generate
     music source code.  While the -macro- command is
     used to generate code in a fill-in-the-blanks form,
     the -putd- command is used more as an abbreviation.

     All -putd- commands should go at the top of your song.
     Then, whenever the music compiler finds a line that
     starts with "=", it will do as many substitutions
     as possible on that line: when the compiler finds
     "string1", it will replace it with "string2".

     For example:
	 putd    /cmajor/c,e,g/ }This defines the substitution
	 =cmajor,b              }This invokes the substitution
	 c,e,g,b          This is the result after substitution!

     The delimiter character for -putd- can be almost
     any character; specifically, it may be any character
     which takes one or two character codes.  As a
     general rule, safe delimiter characters are:
        * normal lower case characters
        * upper case characters
        * lower case "access" characters

     Note that several -putd-s may take effect in one line:
	 putd    /xx/4d2/
	 putd    /yy/2c8/
	 =1g4,yy,2e,xx
     Results in:
         1g4,2c8,2e,4d2

 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
     if
    else       Conditional Compilation Commands
   endif

    The -if-, -else-, and -endif- commands can be used
    to include pieces of music source code (or to
    exclude them) depending on certain conditions. The
    -if- command must appear first. The tag portion of
    the -if- is an arithmetic or logical expression.
    If the expression evaluates to TRUE (less than 0),
    then the code following the -if- command will be
    included.  If the expression evaluates to FALSE
    (greater than or equal to 0), then one of two things
    will happen:  if there is an -else- command present,
    then the code after the -else- command will be in-
    cluded; if there is NO -else- command, then nothing
    will be included from that -if-.  Note that an
    -endif- command terminates the extent which an -if-
    command dominates.  If you use an -if-, you MUST
    include a corresponding -endif-!

     As an example, look at the following:
	 if      m1>3         This is the condition to be checked.
	 2c,3a,4e             If it turns out that m1 __ greater than 3,
	 3c,e,3g              this code will be included.
	 else             This separates the TRUE part from the FALSE part.
	 2g,2b,3d             If it turns out that m1 is less than or equal
	 a,3c+,e              to 3, this code will be included.
	 endif            This terminates the range of the -if-.

    You can have -if- statements inside of other
    -if- statements, but for each -if-, there must
    be one -endif-!  This is very important.

    The -if- statement can also be very useful in
    defining macros to test for certain conditions.

    If you use the conditional compilation commands, your
    music code will look better if you indent the stuff
    inside the range of the -if-.  To indent, put a dot
    and seven spaces (".       ") in front of your line.

    As an example, look at the following:
	if      m1>3            This makes it very easy to see
	.       2c,3a,4e        which part will be included if
	.       3c,e,3g         the condition is true, and which
	else                    will be included if the condition
	.       2g,2b,3d        is false.
	.       a,3c+,e
	endif                   NOTE: Indentation can be used
			        anywhere, not just with -if-
			        -else-, and -endif-!
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
marker
        The -marker- command is mainly intended as a
     debugging tool. It has one optional argument, which
     is the marker number. When a -marker- is encountered
     when the song is played, presto pauses, displays
     "marker" and the marker number, and waits for a
     keypress. A -marker- command without argument is
     equivalent to -marker 0-.

     Caution: This command "fills out" all voices, just
     like -goto- or -measure-.
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
debug
        This command is used for debugging the music
     compiler. It does not produce any output when the
     song is played. When encountered during compilation,
     the compiler displays:
           Debug mode ?
     You can use the arrow to see or inspect variables in
     the student define set (see the -calc- command) or
     enter "debug" to set the debug flag (which does what-
     ever it happens to be programmed to do).
#=============================================================================
#=============================================================================
         Summary of the proposed new source format

  There are two kind of lines in a music source: text lines
  (which contain notes) and command lines (which contain
  commands that modify the output from the compiler but
  do not generate any notes themselves).

  Command lines have the same form as Tutor source lines.
  That is, there is a command field (which contains the
  command, up to 7 characters) in the first 8 columns, and
  the tag or argument field, which occupies the remainder
  of the line. Some commands may not require an argument.
  Question: should the command field perhaps be 10 chars
  long? That would make compilation somewhat easier...

  The text lines begin with "v?:" where ? is a voice number.
  This indicates that that line contains notes for the
  given voice. Following the voice number are any number
  of notes and volume entries. A note entry gives a
  single note, or a special form such as a trill, slide
  or grace note sequence. A volume entry specifies the
  volume for the notes that follow, or dv/dt (i.e. the
  speed of the crescendo/decrescendo), or the change of
  volume between two points in the piece.

                 Examples of all commands

   tempo   150,4,all               cstop*
   calc    stac <- 100             cstop
   xpose   -2,3                    cstart
   randu   m1,11                   if      1=1
   goto    11,x                    else
   voice   11                      endif
   change  command calc to crunch  decode  m1,4c++
   copy    measure to unit         title   Random music
   measure 131                     debug
   randp   m5                      * comment
   setperm 12                      $  comment also
   key     b-,all                  instr   flute,1,2,3
   sharp   g,3
   dsharp  d,2
   flat    f,all
   dflat   b,2
   natural a,f,e,11
   marker  21
   macro   tune,A,B
   endm
   putd    /beep/4c4,c+,cn/

 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Some comments about commands
    Most commands are the same as in the old music compiler.
    Some existed but have changed meaning. Some are new.
    Many commands that used to apply to all voices now
    apply only to the specified voices. One can specify
    "all" to make the command apply to all voices, or give
    a list of voice numbers separated by commas.

    -xpose- is similar to the old -pitch-. It transposes the
    specified voice up or down by the given number of semitones.
    -key- and -natural- now have a voice number argument.
    -sharp-,-flat- are non-cumulative. They apply only to
    one voice.
    -dsharp-,-dflat- are used where one would have used two
    -sharp- or -flat- commands in a row in the old compiler.
    They also take a voice number argument.

    -instr- is a new command. It is used to specify waveform
    and envelope characteristics for a voice. The first argument
    is the name under which the waveform and envelope are
    stored in the library (usually the name of an appropriate
    instrument). The second argument are the voice numbers
    for which the characteristics are to be set ("all"
    to set all voices).
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Format of text lines
    Text lines consist of two types of items: volume and
    note items. Example:
            v8:4c4,d,e,c+,3c2,v(mf),4cn4

    The "v8:" at the start of the line indicates that it is
    for voice 8. Note that the most recent -voice- command
    must have called for at least that many voices.
    The next few items are notes, separated by commas. Each
    notes is written in essentially the old format. Differences
    include the fact that accidentals are kept until the
    next measure. They apply to a given note regardless of
    the octave. Thus, the 3c in the example is really a c+.
    Volume entries come in 3 flavors. The first one, illustrated
    in the example, sets the volume to some given value. There
    are 256 different volumes (0-255). The volume can also be
    set with any of the conventional abbreviations (like mf=
    mezzoforte). The second form specifies a crescendo or
    decrescendo, giving the rate per length of the note last
    used in a -tempo- command. The third form is used to
    enclose a sequence of notes and specify that between the
    start and end of the sequence, the volume is to change
    smoothly from the starting to the ending volume. This is
    essentially the same as the second form but saves you
    the trouble of counting the notes yourself.
#-----------------------------------------------------------------------------
title promenade
tempo   257,8
copy    measure to unit
unit    1
voice   1
3g 4
3f 4
3b-4
4c 8
4f 8
4d 4
unit    2
4c 8
4f 8
4d 4
3b-4
4c 4
3g 4
3f 4
unit    3
voice   4
1g 4 ,2b-4 ,3d 4 ,3g 4
1a 4 ,2a 4 ,3c 4 ,3f 4
1g 4 ,2b-4 ,3d 4 ,3b-4
1f 4 ,3c 4 ,3a 4 ,4c 8
 , , ,4f 8
1d 4 ,3f 4 ,3a 4t,4d 4
unit    4
1f 4 ,3c 4 ,3a 4t,4c 8
 , , ,4f 8
1b-4 ,3f 4 ,3b-4 ,4d 4
1g 4 ,3d 4 ,3g 2 ,3b-4
1c 4 ,3e 4 , ,4c 4
1e 4 ,2g 4 ,3c 2 ,3g 4
1f 4 ,2a 4 , ,3f 4
unit    5
r [1],r[1],r[1],r[1]
voice   1
3f 4
3g 4
3d 4
3f 8
3g 8
3c 4
unit    6
3g 8
3a 8
3f 4
voice   4
1f 4 ,2f 4 ,3f2d ,4f 4
1b-4 ,2b-4 , ,4d 4
1g 4 ,2g 4 , ,4c 8
 , , ,3b-8
1f 4 ,2f 4 ,r 4 ,3f 4
unit    7
r [1],r[1],r[1],r[1]
voice   1
3f 4
3g 4
3d 4
3f 8
3g 8
3e-4
unit    8
3b-8
4c 8
3a-4
voice   4
1a-4 ,2a-4 ,3a-2d,4a-4
2d-4 ,3d-4 , ,4f 4
1b-4 ,2b-4 , ,4e-8
 , , ,4d-8
1a-4 ,2a-4 ,r 4 ,3a-4
r [1],r[1],r[1],r[1]
unit    9
1g-2 ,2a-4 ,3e-2d,3a-4
     ,2b-4 ,     ,3b-4
1f 4 ,2a-4 , ,3a-4
1f+4 ,2b-8 ,r 4 ,3b-8  $$ change 3e-2d to rest
     ,3c 8 ,     ,4c 8
1f+4 ,r 4  ,3e-8 ,4e-8
     ,     ,2b-8 ,3b-8
1f+4 ,2f+4 ,2a-4 ,3a-4
unit    10
1f 8 ,3d-8 ,3a-8 ,4d-8
1e-8 ,3a-4 ,4c 8 ,4e-8
1d-4 ,     ,4d-8 ,4f 8
     ,r 8 ,3a-8 ,4a-8
1e-8 ,3b-8 ,4e-8 ,4f+8
1f 8 ,3a-4 ,4d-8 ,4f 8
1a-4 ,     ,4c 8 ,4e-8
     ,r 8 ,3f+8 ,4f+8
1b-4 ,3b-8 ,4d-8 ,4f 8
     ,r 8 ,3d-8 ,4d-8
1a-4 ,3a-4 ,4c 4 ,4e-4
unit    11
1f+2 ,2a-4 ,3e-(1+.25) ,3a-4
     ,2b-4 , ,3b-4
1f 4 ,2a-4 , ,3a-4
1f+4d,2b-8 , ,3b-8
  ,3c 8 , ,4c 8
 ,2f+8 , ,4e-8
r 8 ,2b-8 , ,3b-8
unit    12
0b-2 ,3c 4 ,3g1d ,4c 4
     ,3d 4 , ,4d 4
0a 4 ,3c 4 , ,4c 4
0b-4 ,3d 8 , ,4d 8
     ,3f 8 , ,4f 8
0b-4 ,r 8 , ,4g 8
     ,3d 8 , ,4d 8
1b-4 ,3c 4 , ,4c 4
unit    13
1a 8 ,3a 8 ,4c 8 ,4f 8
1g 8 ,4c 4 ,4e 8 ,4g 8
1f 4 ,     ,4f 8 ,4a 8
     ,r 8 ,4c 8 ,5c 8
1g 8 ,4d 8 ,4g 8 ,4b-8
1a 8 ,4c 4 ,4f 8 ,4a 8
2c 4 ,     ,4e 8 ,4g 8
     ,r 8 ,3b-8 ,4b-8
2d 4 ,4d 8 ,4f 8 ,4a 8
     ,r 8 ,3f 8 ,4f 8
2c 4 ,4c 4 ,4e 4 ,4g 4
unit    14
1a 4 ,3a 4 ,4c 4 ,4a 8
     ,     ,     ,4e 8
1b-4 ,3f 4 ,4d 4 ,4f 4
2f 4 ,3a 4 ,4c 4 ,4a 4
2g 4 ,3e 4 ,3b-4 ,4d 4
2f 4 ,3a 4 ,4c 4 ,4a 4
2g 4 ,3e 4 ,3b-4 ,4d 4
unit    15
2d 4 ,3f 4 ,3a 4 ,4f 8
     ,     ,     ,4c 8
2g 4 ,3f 4 ,3b-4 ,4d 4
2d 4 ,3f 4 ,3a 4 ,4f 4
2g 4 ,3f 4 ,3b-4 ,4d 4
2d 4 ,3f 4 ,3a 4 ,4f 8
     ,     ,     ,4c 8
2g 4 ,3f 4 ,3b-4 ,4d 4
unit    16
2c 4 ,3e-8 ,3g 4 ,4c 4
     ,3e 8 ,     ,
2f 4 ,3c 4 ,3f 4 ,3a 4
2g 4 ,3d 4 ,3f 4 ,3b-4
2c 4 ,3e-8 ,3g 4 ,4c 4
     ,3e 8 ,     ,
2f 4 ,3c 4 ,3f 4 ,3a 4
2g 4 ,3d 4 ,3f 4 ,3b-8
     ,     ,     ,4d 8
unit    17
2c 4 ,3e 4 ,3g 4 ,4c 4
1f 4 ,3c 4 ,3d 4 ,3a 4
1c 4 ,3e 4 ,3g 4 ,4c 4
r [pause],r[pause],r[pause],r[pause]
1f 4 ,3f 4 ,3a 4 ,4f 4
1g 4 ,3e-8 ,3b-8 ,3e-8
     ,r 8 ,3d 8 ,4d 8
1a 8 ,3f 8 ,3a 8 ,4c 8
1b-8 ,3d 8 ,3f 8 ,3b-8
unit    18
1a 4 ,3c 4 ,3f 2t,4c 4
1b-4 ,3d 4 ,     ,4d 4
1a 4 ,3f 4 ,4c 4 ,4f 4
1g 4 ,3b-8 ,4e-8 ,4g 8
     ,r 8 ,3b-8 ,4b-8
1f 4 ,r 4 ,3f 4 ,4f 4
1g 4 ,r 4 ,3g 4 ,4g 4
unit    19
1f 4 ,r 4 ,3f 4 ,4f 4
1g 4 ,3e-8 ,3b-8 ,4e-8
     ,r 8 ,3d 8 ,4d 8
1a 8 ,3a 8 ,3f2d ,4c 8
1b-8 ,3d 8 ,     ,3b-8
1a 4 ,3c 4 ,     ,4c 4
1b-4 ,3d 4 ,     ,4d 4
1a 4 ,3f 4 ,4c 4 ,4f 4
unit    20
1g 4 ,3b-8 ,4e-8 ,4g 8
     ,r 8 ,3b-8 ,4b-8
1f 4 ,r 4 ,3f 4 ,4f 4
1g 4 ,r 4 ,3g 4 ,4g 4
1f 4 ,r 4 ,3f 4 ,4f 4
r [pause],r[pause],r[pause],r[pause]
r 4 ,r 4 ,2g 4 ,3g 4
r 4 ,r 4 ,2f 4 ,3f 4
unit    21
2c 4 ,3b-8 ,4e 8 ,4g 8
     ,r 8 ,3b-8 ,4b-8
1f 4 ,r 4 ,3f 4 ,4f 4
1g 4 ,r 4 ,3g 4 ,4g 4
1f 4 ,r 4 ,3f 4 ,4f 4
r [pause],r[pause],r[pause],r[pause]
2e-4 ,2b-4 ,3e-4 ,3g 4
2f 4 ,2a 4 ,3c 4 ,3f 4
unit    22
2d 4 ,2b-4 ,3f 4 ,3b-4
2c 4 ,3f 8 ,3a 8 ,4c 8
     ,r 8 ,3f 8 ,4f 8
1b-4 ,3f4d ,3b-4 ,4d 4
1a 4 ,     ,3a 8 ,4c 8
     ,r 8 ,3f 8 ,4f 8
1g 4 ,3f 4 ,3b-4 ,4d 4
2g 4 ,3d 4 ,3f 4 ,3b-4
unit    23
2c 4 ,3e-4 ,3g 4 ,4c 4
2e 4 ,3c 4 ,3e 4 ,3g 4
2f 4 ,2a 4 ,3c 4 ,3f 4
r [pause],r[pause],r[pause],r[pause]
1b-4 ,2g 4 ,3d 4 ,3g 4
1a 4 ,2a 4 ,3c 4 ,3f 4
1g 4 ,2b-4 ,3f 4 ,3b-4
unit    24
1f 4 ,3f 2 ,3a 8 ,4c 8
     ,     ,r 8 ,4f 8
1b-4 ,     ,3b-4 ,4d 4
1g 4 ,3d 4 ,3g 4 ,3b-4
2c 4 ,3g 4 ,4c 4 ,4e-4
1f 4 ,3f 4 ,3a 4 ,4c 4
1b-1 ,3d 1 ,3f 1 ,3b-1
r 2 ,r 2 ,r 2 ,r 2
cstop*
