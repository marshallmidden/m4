!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BADCH	getopt.c	/^#define BADCH /;"	d	file:
BufferExpansion	csv.c	/^#define BufferExpansion /;"	d	file:
BufferInitial	csv.c	/^#define BufferInitial	/;"	d	file:
COMMENT_DELIMITERS	csvmidi.c	/^#define COMMENT_DELIMITERS /;"	d	file:
CSVfieldLength	csv.c	/^int CSVfieldLength = 0;     	\/* Length of CSV field scanned *\/$/;"	v
CSVscanField	csv.c	/^int CSVscanField(char **b_f, int *b_flen)$/;"	f
CSVscanInit	csv.c	/^void CSVscanInit(const char *s)$/;"	f
ChannelMode	midifile.h	/^    ChannelMode = 0xB8,$/;"	e	enum:__anon1
ChannelPrefixMetaEvent	midifile.h	/^    ChannelPrefixMetaEvent = 0x20,$/;"	e	enum:__anon2
ChannelPressure	midifile.h	/^    ChannelPressure = 0xD0,$/;"	e	enum:__anon1
Clamp	csvmidi.c	/^#define Clamp(/;"	d	file:
ClampChannel	csvmidi.c	/^#define ClampChannel	/;"	d	file:
ControlChange	midifile.h	/^    ControlChange = 0xB0,$/;"	e	enum:__anon1
CopyrightMetaEvent	midifile.h	/^    CopyrightMetaEvent = 2,$/;"	e	enum:__anon2
CuePointMetaEvent	midifile.h	/^    CuePointMetaEvent = 7,$/;"	e	enum:__anon2
ELEMENTS	csvmidi.c	/^#define ELEMENTS(/;"	d	file:
EMSG	getopt.c	/^#define EMSG /;"	d	file:
EOS	csv.c	/^#define EOS /;"	d	file:
EVENT	csvmidi.c	/^#define EVENT	/;"	d	file:
EndTrackMetaEvent	midifile.h	/^    EndTrackMetaEvent = 0x2F,$/;"	e	enum:__anon2
End_of_file	csvmidi.c	/^    End_of_file$/;"	e	enum:__anon3	file:
Event	csvmidi.c	/^#define Event(/;"	d	file:
FALSE	csv.c	/^#define FALSE	/;"	d	file:
FALSE	csvmidi.c	/^#define FALSE	/;"	d	file:
FALSE	midicsv.c	/^#define FALSE	/;"	d	file:
FileMetaEvent	midifile.h	/^    FileMetaEvent = 0xFF$/;"	e	enum:__anon1
Getopt	getopt.c	/^int Getopt(int nargc, char *nargv[], char *ostr)$/;"	f
Header	csvmidi.c	/^    Header,$/;"	e	enum:__anon3	file:
KeySignatureMetaEvent	midifile.h	/^    KeySignatureMetaEvent = 0x59,$/;"	e	enum:__anon2
LyricMetaEvent	midifile.h	/^    LyricMetaEvent = 5,$/;"	e	enum:__anon2
MARKER	csvmidi.c	/^#define MARKER	/;"	d	file:
MAX_NFIELDS	csvmidi.c	/^#define MAX_NFIELDS /;"	d	file:
META	csvmidi.c	/^#define META	/;"	d	file:
MIDI_Header_Sentinel	midifile.h	/^#define MIDI_Header_Sentinel /;"	d
MIDI_Track_Sentinel	midifile.h	/^#define MIDI_Track_Sentinel /;"	d
Marker	csvmidi.c	/^#define Marker(/;"	d	file:
MarkerMetaEvent	midifile.h	/^    MarkerMetaEvent = 6,$/;"	e	enum:__anon2
Meta	csvmidi.c	/^#define Meta(/;"	d	file:
Nfields	csvmidi.c	/^#define Nfields(/;"	d	file:
NoteOff	midifile.h	/^    NoteOff = 0x80,$/;"	e	enum:__anon1
NoteOn	midifile.h	/^    NoteOn = 0x90,$/;"	e	enum:__anon1
PROG	csvmidi.c	/^#define PROG	/;"	d	file:
PitchBend	midifile.h	/^    PitchBend = 0xE0,$/;"	e	enum:__anon1
PolyphonicKeyPressure	midifile.h	/^    PolyphonicKeyPressure = 0xA0,$/;"	e	enum:__anon1
PortMetaEvent	midifile.h	/^    PortMetaEvent = 0x21,$/;"	e	enum:__anon2
ProgramChange	midifile.h	/^    ProgramChange = 0xC0,$/;"	e	enum:__anon1
SMPTEOffsetMetaEvent	midifile.h	/^    SMPTEOffsetMetaEvent = 0x54,$/;"	e	enum:__anon2
SequenceNumberMetaEvent	midifile.h	/^    SequenceNumberMetaEvent = 0,$/;"	e	enum:__anon2
SequencerSpecificMetaEvent	midifile.h	/^    SequencerSpecificMetaEvent = 0x7F$/;"	e	enum:__anon2
SetTempoMetaEvent	midifile.h	/^    SetTempoMetaEvent = 0x51,$/;"	e	enum:__anon2
Start_track	csvmidi.c	/^    Start_track,$/;"	e	enum:__anon3	file:
SystemCommon	midifile.h	/^    SystemCommon = 0xF0,$/;"	e	enum:__anon1
SystemContinueCurrentSequence	midifile.h	/^    SystemContinueCurrentSequence = 0xFB,$/;"	e	enum:__anon1
SystemExclusive	midifile.h	/^    SystemExclusive = 0xF0,$/;"	e	enum:__anon1
SystemExclusivePacket	midifile.h	/^    SystemExclusivePacket = 0xF7,$/;"	e	enum:__anon1
SystemRealTime	midifile.h	/^    SystemRealTime = 0xF8,$/;"	e	enum:__anon1
SystemStartCurrentSequence	midifile.h	/^    SystemStartCurrentSequence = 0xFA,$/;"	e	enum:__anon1
SystemStop	midifile.h	/^    SystemStop = 0xFC,$/;"	e	enum:__anon1
TRUE	csv.c	/^#define TRUE	/;"	d	file:
TRUE	csvmidi.c	/^#define TRUE	/;"	d	file:
TRUE	midicsv.c	/^#define TRUE	/;"	d	file:
TextMetaEvent	midifile.h	/^    TextMetaEvent = 1,$/;"	e	enum:__anon2
TimeSignatureMetaEvent	midifile.h	/^    TimeSignatureMetaEvent = 0x58,$/;"	e	enum:__anon2
TrackInstrumentNameMetaEvent	midifile.h	/^    TrackInstrumentNameMetaEvent = 4,$/;"	e	enum:__anon2
TrackTitleMetaEvent	midifile.h	/^    TrackTitleMetaEvent = 3,$/;"	e	enum:__anon2
VERSION	version.h	/^#define VERSION /;"	d
Warn	csvmidi.c	/^#define Warn(/;"	d	file:
abstime	csvmidi.c	/^static long abstime, tabstime = 0;$/;"	v	file:
byte	types.h	/^typedef unsigned char byte; 	    \/* MIDI data stream byte *\/$/;"	t
checkBytes	csvmidi.c	/^static int checkBytes(const int fieldno, const int length)$/;"	f	file:
chunktype	midifile.h	/^    char chunktype[4];                \/* Chunk type: "MThd" *\/$/;"	m	struct:mhead
chunktype	midifile.h	/^    char chunktype[4];                \/* Chunk type: "MTrk" *\/$/;"	m	struct:mtrack
clamp	csvmidi.c	/^static void clamp(long *value, const long minval, const long maxval, const char *fieldname)$/;"	f	file:
controlMessages	csvmidi.c	/^} controlMessages;$/;"	t	typeref:enum:__anon3	file:
csptr	csv.c	/^static const char *csptr;   	    \/* CSV scan pointer *\/$/;"	v	file:
csvline	csvmidi.c	/^static char *csvline;$/;"	v	file:
division	midifile.h	/^    short division;                   \/* Time division *\/$/;"	m	struct:mhead
errors	csvmidi.c	/^static int errors = 0;	    	      \/* Errors and warnings detected *\/$/;"	v	file:
expand_buf	csv.c	/^static void expand_buf(char **b_f, int *b_flen)$/;"	f	file:
f	csv.c	/^#defi/;"	d	file:
f	csv.c	/^#undef /;"	d	file:
f	csvmidi.c	/^static char *f = NULL;$/;"	v	file:
flen	csv.c	/^#define flen	/;"	d	file:
flen	csv.c	/^#undef flen$/;"	d	file:
flen	csvmidi.c	/^static int flen = 0;$/;"	v	file:
format	midifile.h	/^    short format;                     \/* File format *\/$/;"	m	struct:mhead
getCSVline	csvmidi.c	/^static int getCSVline(FILE *fp)$/;"	f	file:
getopt	getopt.h	/^#define getopt(/;"	d
icode	csvmidi.c	/^    int icode;$/;"	m	struct:mitem	file:
lastStatus	csvmidi.c	/^static int optimiseStatus = TRUE, lastStatus = -1;$/;"	v	file:
length	midifile.h	/^    long length;                      \/* Length of track *\/$/;"	m	struct:mtrack
length	midifile.h	/^    long length;                      \/* Length: 6 *\/$/;"	m	struct:mhead
lineno	csvmidi.c	/^static int lineno = 0;$/;"	v	file:
main	csvmidi.c	/^int main(int argc, char *argv[])$/;"	f
main	midicsv.c	/^int main(int argc, char *argv[])$/;"	f
mhead	midifile.h	/^struct mhead {$/;"	s
midi_command	midifile.h	/^} midi_command;$/;"	t	typeref:enum:__anon1
midifile_meta_event	midifile.h	/^} midifile_meta_event;$/;"	t	typeref:enum:__anon2
mitem	csvmidi.c	/^struct mitem {$/;"	s	file:
mitems	csvmidi.c	/^static struct mitem mitems[] = {$/;"	v	typeref:struct:mitem	file:
mtrack	midifile.h	/^struct mtrack {$/;"	s
name	csvmidi.c	/^    char *name;$/;"	m	struct:mitem	file:
nfields	csvmidi.c	/^static int nfields(const int n)$/;"	f	file:
nfld	csvmidi.c	/^static long nfld[MAX_NFIELDS];$/;"	v	file:
ntrks	midifile.h	/^    short ntrks;                      \/* Number of tracks in file *\/$/;"	m	struct:mhead
of	csvmidi.c	/^static byte of[10];$/;"	v	file:
optarg	getopt.c	/^char    *optarg;                \/* argument associated with option *\/$/;"	v
optimiseStatus	csvmidi.c	/^static int optimiseStatus = TRUE, lastStatus = -1;$/;"	v	file:
optind	getopt.c	/^int     optind = 1,             \/* index into parent argv vector *\/$/;"	v
optopt	getopt.c	/^        optopt;                 \/* character checked for validity *\/$/;"	v
outVarLen	csvmidi.c	/^static void outVarLen(const vlint v)$/;"	f	file:
outbyte	csvmidi.c	/^static void outbyte(const byte c)$/;"	f	file:
outbytes	csvmidi.c	/^static void outbytes(const byte *s, const int n)$/;"	f	file:
outevent	csvmidi.c	/^static void outevent(const byte c)$/;"	f	file:
outmeta	csvmidi.c	/^static void outmeta(const byte c)$/;"	f	file:
outshort	csvmidi.c	/^static void outshort(const short v)$/;"	f	file:
progname	csvmidi.c	/^static char *progname;		      \/* Program name string *\/$/;"	v	file:
readMidiFileHeader	midio.c	/^void readMidiFileHeader(FILE *fp, struct mhead *h)$/;"	f
readMidiTrackHeader	midio.c	/^void readMidiTrackHeader(FILE *fp, struct mtrack *t)$/;"	f
readVarLen	midio.c	/^vlint readVarLen(FILE *fp)$/;"	f
readlong	midio.c	/^long readlong(FILE *fp)$/;"	f
readshort	midio.c	/^short readshort(FILE *fp)$/;"	f
s	csvmidi.c	/^static char *s = NULL;	    	      \/* Dynamically expandable CSV input buffer *\/$/;"	v	file:
store	csv.c	/^#define store(/;"	d	file:
strcasecmp	csvmidi.c	/^#define strcasecmp /;"	d	file:
tabstime	csvmidi.c	/^static long abstime, tabstime = 0;$/;"	v	file:
tell	getopt.c	/^#define tell(/;"	d	file:
textcsv	midicsv.c	/^static void textcsv(FILE *fo, const unsigned char *t, const int len)$/;"	f	file:
trackbuf	csvmidi.c	/^static byte *trackbuf = NULL, *trackbufp;$/;"	v	file:
trackbufl	csvmidi.c	/^static int trackbufl;$/;"	v	file:
trackbufp	csvmidi.c	/^static byte *trackbuf = NULL, *trackbufp;$/;"	v	file:
trackcsv	midicsv.c	/^static void trackcsv(FILE *fo, const int trackno, unsigned char *trk, long trklen, const int ppq)$/;"	f	file:
verbose	csvmidi.c	/^static int verbose = FALSE; 	      \/* Debug output *\/$/;"	v	file:
verbose	midicsv.c	/^static int      verbose = FALSE;                \/* Debug output *\/$/;"	v	file:
vlength	midicsv.c	/^static unsigned long vlength(unsigned char **trk, long *trklen)$/;"	f	file:
vlint	types.h	/^typedef unsigned long vlint;	    \/* Variable length integer: this must$/;"	t
writeMidiFileHeader	midio.c	/^void writeMidiFileHeader(FILE *fp, struct mhead *h)$/;"	f
writeMidiTrackHeader	midio.c	/^void writeMidiTrackHeader(FILE *fp, struct mtrack *t)$/;"	f
writeVarLen	midio.c	/^void writeVarLen(FILE *fp, const vlint v)$/;"	f
writelong	midio.c	/^void writelong(FILE *fp, const long l)$/;"	f
writeshort	midio.c	/^void writeshort(FILE *fp, const short s)$/;"	f
xfields	csvmidi.c	/^static int xfields(const int n, const int fbias)$/;"	f	file:
zerotol	csvmidi.c	/^static int zerotol = FALSE;    	      \/* Any warning terminates processing *\/$/;"	v	file:
