ISOdecode	drawtune.c	/^static void ISOdecode(char s[], char out[])$/
ISOencoding	drawtune.c	/^static int ISOencoding(char ch1, char ch2)$/
ISOfprintf	drawtune.c	/^static void ISOfprintf(char s[])$/
MAX	abcmatch.c	/^#define MAX(A, B) ((A) > (B) ? (A) : (B))$/
MIN	abcmatch.c	/^#define MIN(A, B) ((A) < (B) ? (A) : (B))$/
MIN3	abcmatch.c	/^#define MIN3(a, b, c) ((a) < (b) ? ((a) < (c) ? (a/
Mabcmatch	abcmatch.c	/^main (argc, argv)$/
Mmftext	mftext.c	/^int main(argc,argv)$/
Mmidi2abc	midi2abc.c	/^int main(argc,argv)$/
Mmidicopy	midicopy.c	/^main (int argc, char *argv[])$/
Mstore	store.c	/^int main(argc,argv)$/
Mtoabc	toabc.c	/^int main(argc,argv)$/
Myapstree	yapstree.c	/^int main(argc,argv)$/
Qcheck	queues.c	/^void Qcheck()$/
Qinit	queues.c	/^void Qinit()$/
Qitem	queues.c	/^struct Qitem {$/
WriteVarLen	midicopy.c	/^WriteVarLen (value)$/
abctex	toabc.c	/^struct abctext{ \/* linked list used to store outp/
abctype	toabc.c	/^enum abctype {field, bar, barline};$/
acc_downsize	drawtune.c	/^static int acc_downsize(char ch)$/
acc_upsize	drawtune.c	/^static int acc_upsize(char ch)$/
accidental_to_code	toabc.c	/^int accidental_to_code (char xaccidental)$/
add_missing_repeats	store.c	/^void add_missing_repeats () {$/
addch	parseabc.c	/^addch (ch, s)$/
addchordname	store.c	/^static void addchordname(s, len, notes)$/
addfeature	matchsup.c	/^static void addfeature(f, p, n, d)$/
addfract	matchsup.c	/^static void addfract(xnum, xdenom, a, b)$/
addfractions	yapstree.c	/^static void addfractions(f,n,m)$/
addnote	midi2abc.c	/^void addnote(p, ch, v)$/
addnote_type0	midi2abc.c	/^void addnote_type0(p, ch, v)$/
addnumberfeature	yapstree.c	/^static struct feature *addnumberfeature (featurety/
addstring	midi2abc.c	/^char* addstring(s)$/
addtext	midi2abc.c	/^void addtext(s, type)$/
addtext_type0	midi2abc.c	/^void addtext_type0(s, type,chn)$/
addtoQ	queues.c	/^void addtoQ(num, denom, pitch, chan, effect, d)$/
addtochord	midi2abc.c	/^void addtochord(p)$/
addtolist	yapstree.c	/^void addtolist(struct llist* p, void* item)$/
addunits	genmidi.c	/^void addunits(a, b)$/
advance	position.c	/^static void advance(struct voice* v, int phase, in/
advanceQ	queues.c	/^void advanceQ(t)$/
advance_ties	yapstree.c	/^static void advance_ties()$/
advancechord	midi2abc.c	/^void advancechord(len)$/
alloc_trackdata	midicopy.c	/^alloc_trackdata ()$/
altermap	matchsup.c	/^static void altermap(v, modmap, modmul)$/
analyze_abc_file	abcmatch.c	/^analyze_abc_file (char *filename)$/
anote	midi2abc.c	/^struct anote {$/
append_fieldcmd	parseabc.c	/^void append_fieldcmd (key, s)  \/* [SS] 2014-08-15/
append_lyrics	toabc.c	/^void append_lyrics(place, newwords)$/
append_octave_offset	music_utils.c	/^static void append_octave_offset(char * name, int /
append_rest_of_track	midicopy.c	/^append_rest_of_track ()$/
append_to_string	midicopy.c	/^append_to_string (int c)$/
append_words	store.c	/^void append_words (morewords)$/
appendfield	matchsup.c	/^void appendfield (morewords)$/
apply_bar	toabc.c	/^struct abctext* apply_bar(syll, place, notesleft, /
apply_bf_stress_factors	store.c	/^static void apply_bf_stress_factors () {$/
apply_syll	yapstree.c	/^struct feature* apply_syll(char* s, struct feature/
apply_syllable	toabc.c	/^struct abctext* apply_syllable(syll, place, notesl/
apply_velocity_increment_for_one_note	genmidi.c	/^int apply_velocity_increment_for_one_note (velocit/
applygrace	store.c	/^static void applygrace(place)$/
applygrace_new	store.c	/^static void applygrace_new(place)$/
applygrace_orig	store.c	/^static void applygrace_orig(place)$/
articulated_stress_factors	genmidi.c	/^void articulated_stress_factors (int n,  int *vel)/
atrack	midi2abc.c	/^struct atrack {$/
autoextend	matchsup.c	/^static int autoextend(maxnotes)$/
badbyte	midicopy.c	/^badbyte (c)$/
barepitch	store.c	/^static int barepitch(note, accidental, mult, octav/
beamitem	yapstree.c	/^static void beamitem(featuretype mytype, void* new/
beamline	drawtune.c	/^static void beamline(struct feature* ft)$/
beat_modifier	store.c	/^void beat_modifier (int i)$/
biggermsg	midicopy.c	/^biggermsg ()$/
blockline	drawtune.c	/^static void blockline(struct voice* v, struct vert/
brokenadjust	matchsup.c	/^static void brokenadjust()$/
build_new_midi_file	midicopy.c	/^build_new_midi_file (format, ntracks, division, fp/
calculate_stress_parameters	genmidi.c	/^void calculate_stress_parameters () {$/
centretext	drawtune.c	/^void centretext(s)$/
chanmessage	midicopy.c	/^chanmessage (int status, int c1, int c2)$/
char_out	store.c	/^static void char_out(part, ch)$/
check_and_call_bar	parseabc.c	/^static void check_and_call_bar(int bar_type, char /
check_bar_repeats	parseabc.c	/^static void check_bar_repeats (int bar_type, char /
check_for_timesig_preceding_bar_line	store.c	/^void check_for_timesig_preceding_bar_line () {$/
check_power_of_two	parseabc.c	/^int check_power_of_two(int denom)$/
check_tune_end	yapstree.c	/^static void check_tune_end(struct tune* t)$/
check_voice_end	yapstree.c	/^static void check_voice_end(struct voice* v)$/
checkbar	genmidi.c	/^static void checkbar(pass)$/
checkbreak	matchsup.c	/^static void checkbreak()$/
checkchordlist	midi2abc.c	/^void checkchordlist()$/
checkend	parseabc.c	/^checkend (s)$/
checkmalloc	midi2abc.c	/^int* checkmalloc(bytes)$/
checkmatch	yapstree.c	/^static int checkmatch(int refno)$/
checksyllables	genmidi.c	/^static void checksyllables()$/
clearQ	queues.c	/^void clearQ()$/
clear_voice_repeat_arrays	store.c	/^void clear_voice_repeat_arrays () {$/
cleargracenotes	store.c	/^static void cleargracenotes(int start,int end) {$/
clearvoicecontexts	matchsup.c	/^static void clearvoicecontexts()$/
clearvstring	parseabc.c	/^clearvstring (s)$/
clef_item_t	music_utils.c	/^} clef_item_t;$/
close_newabc	toabc.c	/^static void close_newabc()$/
close_note	midi2abc.c	/^int close_note(int chan, int pitch, int *initvol)$/
close_output_file	drawtune.c	/^void close_output_file()$/
close_slurtie	drawtune.c	/^static void close_slurtie(struct slurtie* s)$/
closebeam	yapstree.c	/^static void closebeam(struct voice* v)$/
closegracebeam	yapstree.c	/^static void closegracebeam(struct voice* v)$/
closepage	drawtune.c	/^static void closepage()$/
complete_all	toabc.c	/^void complete_all(v, termination)$/
complete_all_split_voices	store.c	/^complete_all_split_voices ()$/
complete_bars	toabc.c	/^void complete_bars(v)$/
complex_barpoint_t	toabc.c	/^} complex_barpoint_t;$/
compute_fifth_size	store.c	/^float compute_fifth_size (octave_size, ndiv)$/
compute_keysignature	toabc.c	/^void compute_keysignature (int sf,int modeindex, c/
compute_note_histograms	abcmatch.c	/^compute_note_histograms ()$/
concatenatestring	parseabc.c	/^char * concatenatestring(s1,s2)$/
configure_gchord	genmidi.c	/^void configure_gchord()$/
consider_break_after_note	toabc.c	/^static void consider_break_after_note(int previous/
convert_tnote_to_note	store.c	/^void convert_tnote_to_note (int loc) {$/
convert_to_comma53	store.c	/^void convert_to_comma53 (char acc, int *midipitch,/
copy_chanpressure	midicopy.c	/^copy_chanpressure (int chan, int c1)$/
copy_clef	music_utils.c	/^void copy_clef (cleftype_t * target_clef, cleftype/
copy_keysig	midicopy.c	/^copy_keysig (c1, c2)$/
copy_metaeot	midicopy.c	/^copy_metaeot ()$/
copy_metamisc	midicopy.c	/^copy_metamisc (int type, int length, char *m)$/
copy_metaseqnum	midicopy.c	/^copy_metaseqnum (c1,  c2)$/
copy_metaspecial	midicopy.c	/^copy_metaspecial (int length, char *m)$/
copy_metatext	midicopy.c	/^copy_metatext (int type, int length, char *m)$/
copy_noteoff	midicopy.c	/^copy_noteoff (int chan, int c1, int c2)$/
copy_noteon	midicopy.c	/^copy_noteon (int chan, int c1, int c2)$/
copy_parameter	midicopy.c	/^copy_parameter (int chan, int c1, int c2)$/
copy_pitchbend	midicopy.c	/^copy_pitchbend (int chan, int c1, int c2)$/
copy_pressure	midicopy.c	/^copy_pressure (int chan, int c1, int c2)$/
copy_program	midicopy.c	/^copy_program (int chan, int c1)$/
copy_sysex	midicopy.c	/^copy_sysex (int length, char *s)$/
copy_timesig	parseabc.c	/^void copy_timesig(timesig_details_t *destination, /
copymap	matchsup.c	/^static void copymap(v)$/
copytrack_verbatim	midicopy.c	/^copytrack_verbatim ()$/
count_dots	yapstree.c	/^int count_dots(int *base, int *base_exp, int n, in/
count_matched_template_bars	abcmatch.c	/^count_matched_template_bars (int tpbars, int inbar/
count_matched_tune_bars	abcmatch.c	/^count_matched_tune_bars (int tpbars, int inbars, i/
count_matching_template_bars	abcmatch.c	/^int count_matching_template_bars ()$/
count_splits	midi2abc.c	/^int count_splits()$/
crack	crack.c	/^char* crack(argc, argv, flags, ign)$/
cut_beginning	midicopy.c	/^cut_beginning ()$/
cut_ending	midicopy.c	/^cut_ending ()$/
decstring	yapstree.c	/^static char* decstring(int decorators[])$/
define_font	drawtune.c	/^static void define_font(struct font* thefont, char/
delay	genmidi.c	/^static void delay(a, b, c)$/
determine_progcolor	midi2abc.c	/^void determine_progcolor ()$/
difference_midipitch	abcmatch.c	/^difference_midipitch (int *pitch_samples, int nsam/
divide_ties	yapstree.c	/^static void divide_ties()$/
dlistx	midi2abc.c	/^struct dlistx {$/
dodeferred	genmidi.c	/^static void dodeferred(s,noteson)$/
dodrums	genmidi.c	/^void dodrums(i)$/
dogchords	genmidi.c	/^void dogchords(i)$/
dograce	store.c	/^static void dograce()$/
doornament	store.c	/^static void doornament(note, octave, n, m, pitch)$/
doroll	store.c	/^static void doroll(note, octave, n, m, pitch)$/
doroll_output	store.c	/^static void doroll_output(i)$/
doroll_setup	store.c	/^static void doroll_setup(note,octave,n,m,pitch)$/
dospecial	midi2abc.c	/^char dospecial(i, barnotes, featurecount,allow_bro/
dotie	matchsup.c	/^static void dotie(j, xinchord,voiceno)$/
dotrill	store.c	/^static void dotrill(note, octave, n, m, pitch)$/
dotrill_output	store.c	/^static void dotrill_output(i)$/
dotrill_setup	store.c	/^static void dotrill_setup(note, octave, n, m, pitc/
draw_csig	drawtune.c	/^void draw_csig (double x)$/
draw_ctsig	drawtune.c	/^void draw_ctsig (double x)$/
draw_keysig	drawtune.c	/^static void draw_keysig(char oldmap[], char newmap/
draw_meter	drawtune.c	/^static void draw_meter (timesig_details_t *meter, /
draw_tempo	drawtune.c	/^static void draw_tempo(double x_init, double y_ini/
draw_tsig	drawtune.c	/^void draw_tsig (double x, char *top, char *bot)$/
drawbeam	drawtune.c	/^static void drawbeam(struct feature* beamset[], in/
drawchordtail	drawtune.c	/^static void drawchordtail(struct chord* ch, double/
drawgracehead	drawtune.c	/^static void drawgracehead(struct note* n, double x/
drawgracenote	drawtune.c	/^static void drawgracenote(struct note* n, double x/
drawhead	drawtune.c	/^static void drawhead(struct note* n, double x, str/
drawhtuple	drawtune.c	/^static void drawhtuple(double xstart, double xend,/
drawnote	drawtune.c	/^static void drawnote(struct note* n, double x, str/
drawrest	drawtune.c	/^static void drawrest(struct rest* r, double x, str/
drawslurtie	drawtune.c	/^static void drawslurtie(struct slurtie* s)$/
drawtuple	drawtune.c	/^static void drawtuple(struct feature* beamset[], i/
dronestruct	genmidi.c	/^struct dronestruct {$/
dump_barloc	genmidi.c	/^void dump_barloc (FILE *diaghandle, int trkno)$/
dump_notestruct	store.c	/^void dump_notestruct () {$/
dump_trackdescriptor	store.c	/^void dump_trackdescriptor() {$/
dump_voicecontexts	store.c	/^void dump_voicecontexts() {$/
dumpfeat	genmidi.c	/^void dumpfeat (int from, int to)$/
easyabc_interface	genmidi.c	/^void easyabc_interface (int j) {$/
efopen	mftext.c	/^efopen(name,mode)$/
egetc	midicopy.c	/^egetc ()$/
emit_char	toabc.c	/^void emit_char(ch)$/
emit_int	toabc.c	/^void emit_int(n)$/
emit_int_sprintf	toabc.c	/^void emit_int_sprintf(s, n)$/
emit_string	toabc.c	/^void emit_string(s)$/
emit_string_sprintf	toabc.c	/^void emit_string_sprintf(s1, s2)$/
endrep	drawtune.c	/^static int endrep(inend, end_string, x1, x2, yend)/
eputc	midicopy.c	/^eputc (char c)$/
error	mftext.c	/^void error(s)$/
event_abbreviation	matchsup.c	/^void event_abbreviation(symbol, string, container)/
event_acciaccatura	matchsup.c	/^void event_acciaccatura()$/
event_bar	matchsup.c	/^void event_bar(type, replist)$/
event_blankline	matchsup.c	/^void event_blankline()$/
event_broken	matchsup.c	/^void event_broken(type, mult)$/
event_chord	matchsup.c	/^void event_chord()$/
event_chordoff	matchsup.c	/^void event_chordoff(int chord_n, int chord_m)$/
event_chordon	matchsup.c	/^void event_chordon(int chorddecorators[])$/
event_clef	yapstree.c	/^void event_clef(char* clefstr, cleftype_t * new_cl/
event_closeinline	matchsup.c	/^void event_closeinline()$/
event_comment	matchsup.c	/^void event_comment(s)$/
event_default_length	matchsup.c	/^void event_default_length (n)$/
event_endmusicline	matchsup.c	/^void event_endmusicline(endchar)$/
event_eof	matchsup.c	/^void event_eof()$/
event_error	matchsup.c	/^void event_error(s)$/
event_fatal_error	matchsup.c	/^void event_fatal_error(s)$/
event_field	matchsup.c	/^void event_field(k, f)$/
event_finger	matchsup.c	/^void event_finger(p)$/
event_gchord	matchsup.c	/^void event_gchord (chord)$/
event_graceoff	matchsup.c	/^void event_graceoff()$/
event_graceon	matchsup.c	/^void event_graceon()$/
event_handle_gchord	matchsup.c	/^void event_handle_gchord(s)$/
event_handle_instruction	matchsup.c	/^void event_handle_instruction(s)$/
event_ignore	matchsup.c	/^void event_ignore () { };  \/* [SS] 2018-12-21 *\//
event_info	matchsup.c	/^void event_info (place)$/
event_info_key	matchsup.c	/^void event_info_key(key, value)$/
event_init	abcmatch.c	/^event_init (argc, argv, filename)$/
event_instruction	matchsup.c	/^void event_instruction (s)$/
event_key	matchsup.c	/^void event_key(sharps, s, modeindex, modmap, modmu/
event_length	matchsup.c	/^void event_length(n)$/
event_linebreak	matchsup.c	/^void event_linebreak()$/
event_lineend	matchsup.c	/^void event_lineend(ch, n)$/
event_microtone	matchsup.c	/^void event_microtone(int dir, int a, int b)$/
event_midi	store.c	/^void event_midi(s)$/
event_mrest	matchsup.c	/^void event_mrest(n,m,c)$/
event_normal_tone	matchsup.c	/^void event_normal_tone()$/
event_note	matchsup.c	/^void event_note(decorators, clef, accidental, mult/
event_note1	toabc.c	/^void event_note1(decorators, clef, xaccidental, xm/
event_note2	toabc.c	/^void event_note2(decorators, clef, xaccidental, xm/
event_octave	matchsup.c	/^void event_octave(num, local)$/
event_part	matchsup.c	/^void event_part(s)$/
event_playonrep	matchsup.c	/^void event_playonrep(s)$/
event_refno	matchsup.c	/^void event_refno(n)$/
event_rep1	matchsup.c	/^void event_rep1()$/
event_rep2	matchsup.c	/^void event_rep2()$/
event_reserved	matchsup.c	/^void event_reserved (p)$/
event_rest	matchsup.c	/^void event_rest(decorators,n,m,type)$/
event_score_linebreak	matchsup.c	/^void event_score_linebreak(char ch)$/
event_slur	matchsup.c	/^void event_slur (t)$/
event_sluroff	matchsup.c	/^void event_sluroff(t)$/
event_sluron	matchsup.c	/^void event_sluron(t)$/
event_space	matchsup.c	/^void event_space()$/
event_spacing	matchsup.c	/^void event_spacing(n, m)$/
event_specific	matchsup.c	/^void event_specific (package, s)$/
event_specific_in_header	store.c	/^void event_specific_in_header(package, s)$/
event_split_voice	matchsup.c	/^void event_split_voice()$/
event_start_extended_overlay	matchsup.c	/^void event_start_extended_overlay()$/
event_startinline	matchsup.c	/^void event_startinline()$/
event_startmusicline	matchsup.c	/^void event_startmusicline()$/
event_stop_extended_overlay	matchsup.c	/^void event_stop_extended_overlay()$/
event_temperament	matchsup.c	/^void event_temperament(char *line) {$/
event_tempo	matchsup.c	/^void event_tempo(n, a, b, rel, pre, post)$/
event_tex	matchsup.c	/^void event_tex(s)$/
event_text	matchsup.c	/^void event_text(s)$/
event_tie	matchsup.c	/^void event_tie()$/
event_timesig	matchsup.c	/^void event_timesig (timesig)$/
event_true_key	yapstree.c	/^void event_true_key(sharps, s, modeindex, modmap, /
event_tuple	matchsup.c	/^void event_tuple(n, q, r)$/
event_voice	matchsup.c	/^void event_voice(n, s, vp)$/
event_warning	matchsup.c	/^void event_warning(s)$/
event_words	matchsup.c	/^void event_words(p, continuation)$/
event_x_reserved	matchsup.c	/^void event_x_reserved(p)$/
eventstruc	queues.c	/^struct eventstruc {int time;$/
expand_array	genmidi.c	/^static void expand_array (shortarray, size, longar/
expand_ornaments	store.c	/^void expand_ornaments () {$/
extendvstring	parseabc.c	/^extendvstring (s)$/
extract_filename	store.c	/^void extract_filename(char *f)$/
fatal_error	midi2abc.c	/^void fatal_error(s)$/
fdursum_at_segment	genmidi.c	/^void fdursum_at_segment(int segposnum, int segposd/
filegetc	mftext.c	/^int filegetc()$/
fillvoice	genmidi.c	/^static void fillvoice(partno, xtrack, voice)$/
finalsizeline	drawtune.c	/^static int finalsizeline(struct voice* v)$/
finalsizetune	drawtune.c	/^static void finalsizetune(t)$/
find_first_matching_template_bar	abcmatch.c	/^find_first_matching_template_bar (int barnumber, i/
find_first_matching_tune_bar	abcmatch.c	/^find_first_matching_tune_bar (int mbarnumber, int /
findana	midi2abc.c	/^int findana(maintrack, barsize)$/
findbar	yapstree.c	/^struct feature* findbar(struct feature* wordplace,/
findchannel	genmidi.c	/^static int findchannel()$/
findkey	midi2abc.c	/^int findkey(maintrack)$/
findpart	genmidi.c	/^static int findpart(j)$/
findshortest	midi2abc.c	/^int findshortest(gap)$/
findvoice	genmidi.c	/^static int findvoice(initplace, voice, xtrack)$/
findwline	genmidi.c	/^static int findwline(startline)$/
finishfile	matchsup.c	/^static void finishfile()$/
firstitem	yapstree.c	/^void* firstitem(struct llist* p)$/
fix_enclosed_note_lengths	store.c	/^static void fix_enclosed_note_lengths(int from, in/
fix_part_start	store.c	/^void fix_part_start () $/
fixed_match_notes	abcmatch.c	/^fixed_match_notes (int fnotes, int mbar_number, in/
fixreps	store.c	/^static void fixreps()$/
flush_abctext	toabc.c	/^static int flush_abctext(bars, termination)$/
font_command	drawtune.c	/^void font_command(p, s)$/
fract	toabc.c	/^struct fract {$/
free_abbreviations	parseabc.c	/^free_abbreviations ()$/
free_feature_representation	matchsup.c	/^void free_feature_representation ()$/
free_notestructs	store.c	/^void free_notestructs () {$/
freefeature	yapstree.c	/^static void freefeature(void* item, featuretype ty/
freekey	yapstree.c	/^static void freekey(struct key* k)$/
freellist	yapstree.c	/^void freellist(struct llist* l)$/
freetempo	yapstree.c	/^static void freetempo(struct atempo *t)$/
freetune	yapstree.c	/^static void freetune(struct tune* t)$/
freevoice	yapstree.c	/^static void freevoice(struct voice* v)$/
freevstring	parseabc.c	/^freevstring (s)$/
freshline	midi2abc.c	/^void freshline()$/
gefract	position.c	/^static int gefract(struct fract* a, struct fract* /
getISO	drawtune.c	/^static int getISO(char s[], int j, int* code)$/
get_accidental	matchsup.c	/^char *get_accidental(place, accidental)$/
get_clef_name	music_utils.c	/^int get_clef_name (cleftype_t * new_clef, char *na/
get_clef_octave_offset	music_utils.c	/^static int get_clef_octave_offset (char *clef_endi/
get_complex_numerator	drawtune.c	/^static void get_complex_numerator(char buffer[], t/
get_extended_clef_details	music_utils.c	/^\/\/int get_extended_clef_details (char *name, bas/
get_standard_clef	music_utils.c	/^\/\/int get_standard_clef (char *name, basic_cleft/
get_tempo_from_name	store.c	/^int get_tempo_from_name (s) \/* [SS] 2010-12-07 */
get_tempo_info_from_track_1	midicopy.c	/^get_tempo_info_from_track_1 ()$/
getarg	midi2abc.c	/^int getarg(option, argc, argv)$/
getbar	toabc.c	/^struct abctext* getbar(place)$/
getchordnumber	store.c	/^static int getchordnumber(s)$/
getlenfract	yapstree.c	/^struct fract* getlenfract(struct feature *f)$/
getlineheight	drawtune.c	/^static int getlineheight(struct voice* v, double* /
getnextbar	toabc.c	/^struct abctext* getnextbar(place)$/
getrep	parseabc.c	/^getrep (p, out)$/
getvoicecontext	matchsup.c	/^static struct voicecontext* getvoicecontext(n)$/
getword	genmidi.c	/^static int getword(place, w)$/
gtfract	genmidi.c	/^int gtfract(anum,adenom, bnum,bdenom)$/
guessana	midi2abc.c	/^int guessana(barbeats)$/
guesslengths	midi2abc.c	/^void guesslengths(trackno)$/
handle_abc2midi_parser	parseabc.c	/^void handle_abc2midi_parser (line) $/
handlebeam	drawtune.c	/^static void handlebeam(struct note* n, struct feat/
handlegracebeam	drawtune.c	/^static void handlegracebeam(struct note *n, struct/
handletext	midi2abc.c	/^void handletext(t, textplace, trackno)$/
headerprocess	matchsup.c	/^static void headerprocess()$/
histogram_entropy	midi2abc.c	/^float histogram_entropy (int *histogram, int size)/
hornp	matchsup.c	/^static void hornp(num, denom)$/
huntfilename	midi2abc.c	/^int huntfilename(argc, argv)$/
ignore_rest_of_track	midicopy.c	/^ignore_rest_of_track ()$/
init_abbreviations	parseabc.c	/^init_abbreviations ()$/
init_drum_map	genmidi.c	/^void init_drum_map()$/
init_feature	yapstree.c	/^static void init_feature (struct feature *x, featu/
init_font	drawtune.c	/^static void init_font(afont, ptsize, spce, defnum,/
init_histograms	abcmatch.c	/^init_histograms ()$/
init_llist	yapstree.c	/^void init_llist(struct llist* l)$/
init_new_clef	music_utils.c	/^void init_new_clef (cleftype_t * new_clef)$/
init_notechan	midi2abc.c	/^void init_notechan()$/
init_p48toc53	store.c	/^void init_p48toc53 () {$/
init_stresspat	stresspat.c	/^init_stresspat ()$/
init_timesig	parseabc.c	/^void init_timesig(timesig_details_t *timesig)$/
init_tune	yapstree.c	/^static void init_tune(struct tune* t, int x) $/
init_voice	toabc.c	/^static void init_voice(int voice_index, int num)$/
init_voice_contexts	parseabc.c	/^void init_voice_contexts (void)$/
initfunc_for_mftext	midi2abc.c	/^void initfunc_for_mftext()$/
initfunc_for_midinotes	midi2abc.c	/^void initfunc_for_midinotes()$/
initfunc_for_stats	midi2abc.c	/^void initfunc_for_stats()$/
initfuncs	mftext.c	/^void initfuncs()$/
initvstring	parseabc.c	/^initvstring (s)$/
inlist	genmidi.c	/^static int inlist(place, passno)$/
insertfeature	store.c	/^void insertfeature(f, p, n, d, loc)$/
insertnote	yapstree.c	/^static void insertnote(struct feature* chordplace,/
int_compare_events	queues.c	/^int int_compare_events(const void *a, const void */
interchange_features	store.c	/^static void interchange_features(loc1,loc2)$/
interpret_voice_label	parseabc.c	/^int interpret_voice_label (char *s, int num, int */
is_abcm2ps_option	store.c	/^int is_abcm2ps_option (s) \/* [SS] 2018-12-17 *\/$/
is_power_of_two	midi2abc.c	/^int is_power_of_two(int numb)$/
isclef	parseabc.c	/^int isclef (char *s, cleftype_t * new_clef,$/
ismicrotone	parseabc.c	/^ismicrotone (p, dir)$/
karaokestarttrack	genmidi.c	/^static void karaokestarttrack (track)$/
label_split	midi2abc.c	/^void label_split(struct anote *note, int activespl/
label_split_voices	midi2abc.c	/^int label_split_voices (int trackno)$/
lcase	parseabc.c	/^lcase (s)$/
lefttext	drawtune.c	/^void lefttext(s)$/
lenmul	matchsup.c	/^static void lenmul(n, a, b)$/
levenshtein	abcmatch.c	/^int levenshtein(int *s1, int *s2, int s1len, int s/
linestattype	toabc.c	/^enum linestattype {fresh, midmusic, endmusicline, /
list_channels_in_use	midicopy.c	/^void list_channels_in_use (int n) {$/
listnotes	midi2abc.c	/^void listnotes(int trackno, int start, int end)$/
listtrack_sizes	midi2abc.c	/^void listtrack_sizes () $/
listx	midi2abc.c	/^struct listx {$/
load_stress_parameters	stresspat.c	/^load_stress_parameters (char *rhythmdesignator)$/
locate_voice	store.c	/^static int locate_voice(int start, int indexno)$/
lookup_abbreviation	parseabc.c	/^lookup_abbreviation (char symbol)$/
lyricword	toabc.c	/^struct lyricwords{$/
make_and_print_interval_pdf	abcmatch.c	/^make_and_print_interval_pdf ()$/
make_and_print_pitch_pdf	abcmatch.c	/^make_and_print_pitch_pdf ()$/
make_bar_image	abcmatch.c	/^make_bar_image (int bar_number, int resolution,$/
make_note_representation	abcmatch.c	/^make_note_representation (int *nnotes, int *nbars,/
make_open	yapstree.c	/^int make_open()$/
makechordchannels	genmidi.c	/^static int makechordchannels (n)$/
makecut	store.c	/^void makecut (mainpitch, shortpitch,mainbend,short/
makeharproll	store.c	/^void makeharproll (pitch, bend,n,m)   \/* [JS] 201/
makeharproll3	store.c	/^void makeharproll3 (pitch, bend,n,m) \/* [JS] 2011/
markchord	yapstree.c	/^static void markchord(struct feature* chordplace)$/
marknote	matchsup.c	/^static void marknote()$/
marknoteend	matchsup.c	/^static void marknoteend()$/
marknotestart	matchsup.c	/^static void marknotestart()$/
match_all_bars	abcmatch.c	/^match_all_bars (int tpbars, int barnum, int delta_/
match_any_bars	abcmatch.c	/^match_any_bars (int tpbars, int barnum, int delta_/
match_notes	abcmatch.c	/^match_notes (int mbar_number, int ibar_number, int/
match_samples	abcmatch.c	/^match_samples (int mmsamples, int *mmpitch_samples/
maxstrwidth	drawtune.c	/^static double maxstrwidth(struct llist* strings, d/
measureline	drawtune.c	/^static void measureline(struct feature* ft, double/
metaevent	midicopy.c	/^metaevent (int type)$/
meter_voice_update	store.c	/^void meter_voice_update (int n,int m)$/
mf_get_tempo_event	midicopy.c	/^mf_get_tempo_event (tempo)$/
mf_sec2ticks	midifile.c	/^mf_sec2ticks(secs,division,tempo)$/
mf_ticks2sec	midifile.c	/^mf_ticks2sec(ticks,division,tempo)$/
mf_write_header_chunk	midicopy.c	/^mf_write_header_chunk (format, ntracks, division)$/
mf_write_meta_event	midicopy.c	/^mf_write_meta_event (int type, char *data, int siz/
mf_write_midi_event	midicopy.c	/^mf_write_midi_event (int type, int chan, char *dat/
mf_write_tempo	midicopy.c	/^mf_write_tempo (tempo)$/
mf_write_track_chunk	midicopy.c	/^mf_write_track_chunk (which_track, fp)$/
mferror	midicopy.c	/^mferror (char *s)$/
mfread	midifile.c	/^void mfread()     \/* The only non-static function/
mfreadtrk	midifile.c	/^void mfreadtrk(itrack)     \/* The only non-static/
mftext	midi2abc.c	/^void mftext(argc,argv)$/
mftxt_header	midi2abc.c	/^void mftxt_header (int format, int ntrks, int ldiv/
mftxt_keysig	midi2abc.c	/^void mftxt_keysig(sf,mi)$/
mftxt_metaeot	midi2abc.c	/^void mftxt_metaeot()$/
mftxt_metatext	midi2abc.c	/^void mftxt_metatext(type,leng,mess)$/
mftxt_noteoff	midi2abc.c	/^void mftxt_noteoff(chan,pitch,vol)$/
mftxt_noteon	midi2abc.c	/^void mftxt_noteon(chan,pitch,vol)$/
mftxt_parameter	midi2abc.c	/^void mftxt_parameter(chan,control,value)$/
mftxt_pitchbend	midi2abc.c	/^void mftxt_pitchbend(chan,lsb,msb)$/
mftxt_pressure	midi2abc.c	/^void mftxt_pressure(chan,pitch,press)$/
mftxt_program	midi2abc.c	/^void mftxt_program(chan,program)$/
mftxt_smpte	midi2abc.c	/^void mftxt_smpte(hr,mn,se,fr,ff)$/
mftxt_tempo	midi2abc.c	/^void mftxt_tempo(ltempo)$/
mftxt_timesig	midi2abc.c	/^void mftxt_timesig(nn,dd,cc,bb)$/
mftxt_trackstart	midi2abc.c	/^void mftxt_trackstart()$/
mfwrite	midifile.c	/^mfwrite(format,ntracks,division,fp) $/
midi2abc	midi2abc.c	/^void midi2abc (arg, argv)$/
midi_noteoff	genmidi.c	/^void midi_noteoff(delta_time, pitch, chan)$/
midi_noteon	genmidi.c	/^static void midi_noteon(delta_time, pitch, pitchbe/
midi_re_tune	genmidi.c	/^static void midi_re_tune (int channel) {$/
midicopy_timesig	midicopy.c	/^midicopy_timesig (c1, c2, c3, c4)$/
midifile	midifile.c	/^void midifile()$/
midigram	midi2abc.c	/^void midigram(argc,argv)$/
midistats	midi2abc.c	/^void midistats(argc,argv)$/
modmap_not_empty	toabc.c	/^int modmap_not_empty (char* modmap) {$/
monospace	position.c	/^void monospace(struct tune* t)$/
msg	midicopy.c	/^msg ()$/
msgadd	midicopy.c	/^msgadd (int c)$/
msginit	midicopy.c	/^msginit ()$/
msgleng	midicopy.c	/^msgleng ()$/
mulfract	position.c	/^static void mulfract(f, n, m)$/
must_emit_voice	toabc.c	/^int must_emit_voice(n) \/* [PHDM] 2013-03-08 *\/$/
myputc	matchsup.c	/^int myputc(c)$/
new_barcount	toabc.c	/^int new_barcount(type, foundbar, oldcount)$/
newabctext	toabc.c	/^static struct abctext* newabctext(t)$/
newblock	drawtune.c	/^static void newblock(double height, double descend/
newchord	yapstree.c	/^static struct chord* newchord()$/
newclef	yapstree.c	/^cleftype_t *newclef (cleftype_t * source_clef)$/
newfract	yapstree.c	/^static struct fract* newfract(int a, int b)$/
newkey	yapstree.c	/^struct key* newkey(char* name, int sharps, char ac/
newlist	yapstree.c	/^struct llist* newlist()$/
newnote	yapstree.c	/^static struct note* newnote(decorators, clef, xacc/
newpage	drawtune.c	/^void newpage()$/
newrest	yapstree.c	/^static struct rest* newrest(int a, int b, int mult/
newslurtie	yapstree.c	/^static struct slurtie* newslurtie()$/
newtempo	yapstree.c	/^static struct atempo* newtempo(int count, int n, i/
newtimesig	yapstree.c	/^static timesig_details_t *newtimesig(void)$/
newtuple	yapstree.c	/^static struct tuple* newtuple(int n, int q, int r,/
newvertspacing	yapstree.c	/^static struct vertspacing* newvertspacing()$/
newvoice	matchsup.c	/^static struct voicecontext* newvoice(n)$/
nextitem	yapstree.c	/^void* nextitem(struct llist* p)$/
nextnotes	toabc.c	/^static int nextnotes()$/
nextsplitnum	midi2abc.c	/^int nextsplitnum(int splitnum)$/
no_op0	midi2abc.c	/^ void no_op0() {}$/
no_op1	midi2abc.c	/^ void no_op1(int dummy1) {}$/
no_op2	midi2abc.c	/^ void no_op2(int dummy1, int dummy2) {}$/
no_op3	midi2abc.c	/^ void no_op3(int dummy1, int dummy2, int dummy3) {/
no_op4	midi2abc.c	/^ void no_op4(int dummy1, int dummy2, int dummy3, i/
no_op5	midi2abc.c	/^ void no_op5(int dummy1, int dummy2, int dummy3, i/
nondestructive_readstr	store.c	/^void nondestructive_readstr(out, in, limit)$/
note_beat	genmidi.c	/^static void note_beat(int n, int *vel) {$/
note_effect	queues.c	/^void note_effect() {$/
note_effect2	queues.c	/^void note_effect2() {$/
note_effect3	queues.c	/^void note_effect3() {$/
note_effect4	queues.c	/^void note_effect4(chan)$/
note_effect5	queues.c	/^void note_effect5(chan)$/
note_for_semitone	music_utils.c	/^void note_for_semitone (int semitones, noteletter_/
note_index	music_utils.c	/^noteletter_t note_index (char note_ch)$/
notenum	yapstree.c	/^static int notenum(int octave, char ch, cleftype_t/
noteon	genmidi.c	/^static void noteon(n)$/
noteon_data	genmidi.c	/^static void noteon_data(pitch, pitchbend, channel,/
noteplaying	midi2abc.c	/^void noteplaying(p)$/
notestop	midi2abc.c	/^void notestop(p, ch)$/
notestruct	store.c	/^struct notestruct {$/
notetext	drawtune.c	/^static void notetext(struct note* n, int* tupleno,/
notetype	genmidi.c	/^struct notetype {$/
nullputc	midifile.c	/^int nullputc(c)$/
open_note	midi2abc.c	/^int open_note(int chan, int pitch, int vol)$/
open_output_file	drawtune.c	/^void open_output_file(filename, boundingbox)$/
output_count_trkdata	midi2abc.c	/^void output_count_trkdata(data_array,name)$/
output_eventlist	queues.c	/^void output_eventlist (struct eventstruc *list, in/
output_progs_data	midi2abc.c	/^void output_progs_data () {$/
output_track_summary	midi2abc.c	/^void output_track_summary () {$/
pagebottom	drawtune.c	/^static void pagebottom()$/
parse_abc_include	parseabc.c	/^FILE * parse_abc_include (s)$/
parse_drummap	genmidi.c	/^void parse_drummap(char **s)$/
parse_mididef	store.c	/^void parse_mididef(s)$/
parse_precomment	parseabc.c	/^parse_precomment (s)$/
parse_stress_params	genmidi.c	/^int parse_stress_params (char *input) {$/
parse_tempo	parseabc.c	/^parse_tempo (place)$/
parse_voices_selection	toabc.c	/^void parse_voices_selection(voices_string) \/* [PH/
parse_words	toabc.c	/^void parse_words(p)$/
parseclef	parseabc.c	/^parseclef (s, word, gotclef, clefstr, newclef, got/
parsefield	parseabc.c	/^parsefield (key, field)$/
parsefile	parseabc.c	/^parsefile (name)$/
parseinlinefield	parseabc.c	/^parseinlinefield (p)$/
parsekey	parseabc.c	/^parsekey (str)$/
parseline	parseabc.c	/^parseline (line)$/
parsemiddle	parseabc.c	/^parsemiddle (s, word, gotmiddle, middlestring, max/
parsemusic	parseabc.c	/^parsemusic (field)$/
parsename	parseabc.c	/^parsename (s, word, gotname, namestring, maxsize)$/
parsenote	parseabc.c	/^parsenote (s)$/
parseoctave	parseabc.c	/^parseoctave (s, word, gotoctave, octave)$/
parseother	parseabc.c	/^parseother (s, word, gotother, other, maxsize)	\/*/
parseroff	parseabc.c	/^parseroff ()$/
parseron	parseabc.c	/^parseron ()$/
parsesname	parseabc.c	/^parsesname (s, word, gotname, namestring, maxsize)/
parsetranspose	parseabc.c	/^parsetranspose (s, word, gottranspose, transpose)$/
parsetune	parseabc.c	/^parsetune (FILE * fp)$/
parsevoice	parseabc.c	/^parsevoice (s)$/
partbreak	genmidi.c	/^static int partbreak(xtrack, voice, place)$/
patchup_chordtie	store.c	/^static int patchup_chordtie(int chordstart,int cho/
pedal_off	genmidi.c	/^void pedal_off() {$/
pedal_on	genmidi.c	/^void pedal_on() {$/
perfect_match	abcmatch.c	/^int perfect_match (int *s1, int *s2, int s1len) {$/
pitch2drum	midi2abc.c	/^void pitch2drum(midipitch)$/
pitch2key	midi2abc.c	/^char * pitch2key(int note)$/
pitch_percentiles	midi2abc.c	/^void pitch_percentiles (int trackno, int * ten, in/
pitchof	matchsup.c	/^static int pitchof(note, accidental, mult, octave,/
pitchof_b	store.c	/^static int pitchof_b(note, accidental, mult, octav/
placeendrep	store.c	/^static void placeendrep(j)$/
placestartrep	store.c	/^static void placestartrep(j)$/
placetype	drawtune.c	/^enum placetype {left, right, centre};$/
postprocess	midi2abc.c	/^void postprocess(trackno)$/
preparse_words	parseabc.c	/^preparse_words (s)$/
printQ	midi2abc.c	/^void printQ()$/
print_bar_samples	abcmatch.c	/^print_bar_samples (int mmsamples, int *mmpitch_sam/
print_bars	abcmatch.c	/^print_bars (int mbar_number, int ibar_number)$/
print_eventlist	queues.c	/^void print_eventlist(struct eventstruc *list, int /
print_feature_list	matchsup.c	/^void print_feature_list ()$/
print_inputline	parseabc.c	/^print_inputline ()$/
print_inputline_nolinefeed	parseabc.c	/^print_inputline_nolinefeed ()$/
print_interval_pdf	abcmatch.c	/^print_interval_pdf()$/
print_length_histogram	abcmatch.c	/^print_length_histogram ()$/
print_pitch_histogram	abcmatch.c	/^print_pitch_histogram ()$/
print_txt_header	midi2abc.c	/^void print_txt_header(xformat,ntrks,ldivision)$/
print_txt_noteoff	midi2abc.c	/^void print_txt_noteoff(chan, pitch, vol)$/
print_txt_noteon	midi2abc.c	/^void print_txt_noteon(chan, pitch, vol)$/
print_txt_program	midi2abc.c	/^void print_txt_program(int chan,int program) {$/
print_voicecodes	parseabc.c	/^print_voicecodes ()$/
print_weighted_pitch_histogram	abcmatch.c	/^print_weighted_pitch_histogram ()$/
printbarnumber	drawtune.c	/^static void printbarnumber(double x, int n)$/
printchord	midi2abc.c	/^void printchord(len)$/
printchordlist	midi2abc.c	/^void printchordlist()$/
printclef	drawtune.c	/^static void printclef (cleftype_t * t, double x, d/
printfract	midi2abc.c	/^void printfract(a, b)$/
printlen	toabc.c	/^static void printlen(a, b)$/
printlib	pslib.c	/^void printlib(f, filename, boundingbox)$/
printnote	midi2abc.c	/^void printnote (struct listx *i)$/
printpitch	midi2abc.c	/^void printpitch(j)$/
printtext	drawtune.c	/^static void printtext(place, s, afont)$/
printtrack	midi2abc.c	/^void printtrack(trackno, anacrusis)$/
printtrack_split	midi2abc.c	/^void printtrack_split (int trackno, int splitnum, /
printtrack_split_voice	midi2abc.c	/^void printtrack_split_voice(trackno, anacrusis)$/
printtune	drawtune.c	/^void printtune(struct tune* t)$/
printvoiceline	drawtune.c	/^static int printvoiceline(struct voice* v)$/
process_command_line_arguments	midi2abc.c	/^int process_command_line_arguments(argc,argv)$/
process_microtones	parseabc.c	/^static void process_microtones (int *parsed,  char/
process_midix	store.c	/^void process_midix(s)$/
progress_sequence	genmidi.c	/^void progress_sequence(i)$/
prtime	mftext.c	/^void prtime()$/
ps_header	pslib.c	/^static void ps_header(f, filename, boundingbox)$/
purgespace	toabc.c	/^static int purgespace(p)$/
quantize	midi2abc.c	/^int quantize(trackno, xunit)$/
quantize5	abcmatch.c	/^quantize5 (int pitch)$/
quantize7	abcmatch.c	/^int quantize7(int pitch)$/
ranfrac	genmidi.c	/^float ranfrac ()$/
read16bit	midicopy.c	/^read16bit ()$/
read32bit	midicopy.c	/^read32bit ()$/
read_L_unitlen	parseabc.c	/^static void read_L_unitlen(int *num, int *denom, c/
read_boolean	drawtune.c	/^int read_boolean(s)$/
read_complex_has_timesig	parseabc.c	/^static int read_complex_has_timesig(char **place, /
read_custom_stress_file	stresspat.c	/^read_custom_stress_file (char *filename)$/
read_microtone_value	parseabc.c	/^read_microtone_value (a, b, p)$/
read_spec	matchsup.c	/^static void read_spec(spec, part)$/
readaln	parseabc.c	/^int readaln (out, in, limit)$/
readheader	midicopy.c	/^readheader ()$/
readlen	parseabc.c	/^readlen (a, b, p)$/
readmt	midicopy.c	/^readmt (s)			\/* read through the "MThd" or "MTrk"/
readnum	midi2abc.c	/^int readnum(num) $/
readnumf	parseabc.c	/^readnumf (num)$/
readnump	midi2abc.c	/^int readnump(p) $/
readsig	midi2abc.c	/^void readsig(a, b, sig)$/
readsnumf	parseabc.c	/^readsnumf (s)$/
readsnump	parseabc.c	/^readsnump (p)$/
readstr	parseabc.c	/^readstr (out, in, limit)$/
readstressfile	genmidi.c	/^void readstressfile (char * filename)$/
readtrack	midicopy.c	/^readtrack ()$/
readvarinum	midicopy.c	/^readvarinum ()$/
readword	parseabc.c	/^readword (word, s)$/
record_abbreviation	parseabc.c	/^record_abbreviation (char symbol, char *string)$/
recurse_back_and_change_bar	store.c	/^void recurse_back_and_change_bar (int type)$/
recurse_back_to_original_voice	store.c	/^void recurse_back_to_original_voice ()$/
reduce	genmidi.c	/^void reduce(a, b)$/
reducef	yapstree.c	/^void reducef(f)$/
remove_carriage_returns	midi2abc.c	/^void remove_carriage_returns(char *str)$/
removefeature	store.c	/^static void removefeature(loc)$/
removefeatures	store.c	/^static void removefeatures(locfrom,locto)$/
removefromQ	queues.c	/^void removefromQ(i)$/
removefromchord	midi2abc.c	/^struct dlistx* removefromchord(i)$/
replace_byte_in_file	midicopy.c	/^replace_byte_in_file (int trknum, int loc, char va/
replace_byte_in_trackdata	midicopy.c	/^replace_byte_in_trackdata (int loc, char val)$/
replacefeature	store.c	/^static void replacefeature(f, p, n, d, loc)$/
reset_back_array	midi2abc.c	/^void reset_back_array () $/
reset_parser_status	parseabc.c	/^static void reset_parser_status (void)$/
resettune	drawtune.c	/^static void resettune(struct tune* t)$/
resetvoice	drawtune.c	/^static void resetvoice(struct tune* t, struct voic/
resolve_slur	yapstree.c	/^struct slurtie* resolve_slur(struct feature* lastn/
resolve_tempo	yapstree.c	/^void resolve_tempo(struct atempo* t, struct fract*/
resolve_ties	yapstree.c	/^static void resolve_ties(struct feature* f)$/
resolve_unitlen	parseabc.c	/^static void resolve_unitlen()$/
restore_broken	matchsup.c	/^static void restore_broken(v)$/
restore_state	genmidi.c	/^static void restore_state(vec, a, b, c, d, e, f)$/
save_note	genmidi.c	/^static void save_note(num, denom, pitch, pitchbend/
save_state	genmidi.c	/^static void save_state(vec, a, b, c, d, e, f)$/
scan_for_missing_repeats	store.c	/^void scan_for_missing_repeats ()$/
scannotes	midi2abc.c	/^void scannotes(trackno)$/
search_backwards_for_last_bar_line	store.c	/^int search_backwards_for_last_bar_line (int from)$/
seconds_to_tick	midicopy.c	/^seconds_to_tick (float seconds)$/
section1	pslib.c	/^static void section1(f)$/
section10	pslib.c	/^static void section10(f)$/
section11	pslib.c	/^static void section11(f)$/
section12	pslib.c	/^static void section12(f)$/
section13	pslib.c	/^static void section13(f)$/
section2	pslib.c	/^static void section2(f)$/
section3	pslib.c	/^static void section3(f)$/
section4	pslib.c	/^static void section4(f)$/
section5	pslib.c	/^static void section5(f)$/
section6	pslib.c	/^static void section6(f)$/
section7	pslib.c	/^static void section7(f)$/
section8	pslib.c	/^static void section8(f)$/
section9	pslib.c	/^static void section9(f)$/
select_channel	genmidi.c	/^static char *select_channel(chan, s)$/
semitone_shift_for_acc	music_utils.c	/^int semitone_shift_for_acc (char acc)$/
semitone_value_for_note	music_utils.c	/^int semitone_value_for_note (noteletter_t note)$/
set_complex_barpoint	toabc.c	/^static void set_complex_barpoint(timesig_details_t/
set_control_defaults	queues.c	/^void set_control_defaults() {$/
set_drums	genmidi.c	/^void set_drums(s)$/
set_first_gaps	midi2abc.c	/^void set_first_gaps (int trackno) {$/
set_gchords	genmidi.c	/^void set_gchords(s)$/
set_keysig	drawtune.c	/^void set_keysig(struct key* k, struct key* newval)/
set_meter	genmidi.c	/^void set_meter(n, m)$/
set_space	drawtune.c	/^static void set_space(afont, s)$/
set_velocity_for_one_note	genmidi.c	/^int set_velocity_for_one_note ()$/
set_voice_from_master	parseabc.c	/^static void set_voice_from_master(int voice_num)$/
setbeams	drawtune.c	/^static void setbeams(struct feature* note[], struc/
setbeat	store.c	/^void setbeat()$/
setfont	drawtune.c	/^static void setfont(int size, int num)$/
setfontstruct	drawtune.c	/^static void setfontstruct(struct font* thefont)$/
setfract	yapstree.c	/^void setfract(f, a, b)$/
setline	toabc.c	/^static void setline(t)$/
setmap	matchsup.c	/^static void setmap(sf, map, mult)$/
setmargins	drawtune.c	/^void setmargins(s)$/
setpagesize	drawtune.c	/^void setpagesize(s)$/
setscaling	drawtune.c	/^void setscaling(char* s)$/
setstemlen	drawtune.c	/^static void setstemlen(struct note* n, int ingrace/
setup_chordnames	store.c	/^static void setup_chordnames()$/
setup_fonts	drawtune.c	/^void setup_fonts()$/
setup_sharps_flats	toabc.c	/^void setup_sharps_flats (int sf)$/
setup_timesig	midi2abc.c	/^void setup_timesig(nn,  denom,  bb)$/
setup_trackstructure	store.c	/^void setup_trackstructure () {$/
setupkey	midi2abc.c	/^void setupkey(sharps)$/
setvoice	toabc.c	/^int setvoice(num)$/
setxy	drawtune.c	/^static void setxy(double* x, double* y, struct not/
showfeature	debug.c	/^void showfeature(struct feature *ft)$/
showline	debug.c	/^static int showline(v)$/
showtext	drawtune.c	/^static void showtext(struct llist* textitems, doub/
showtune	debug.c	/^void showtune(struct tune* t)$/
single_note_tuning_change	midifile.c	/^void single_note_tuning_change(int key, float midi/
singlehead	drawtune.c	/^static void singlehead(double x, double y, int bas/
singletail	drawtune.c	/^static void singletail(int base, int base_exp, int/
size_keysig	drawtune.c	/^static double size_keysig(char oldmap[], char newm/
size_timesig	drawtune.c	/^static double size_timesig (timesig_details_t *tim/
sizechord	drawtune.c	/^static void sizechord(struct chord* ch, int ingrac/
sizeclef	drawtune.c	/^static void sizeclef(cleftype_t *theclef, struct f/
sizenote	drawtune.c	/^static void sizenote(struct note* n, struct featur/
sizerest	drawtune.c	/^static void sizerest(struct rest* r, struct featur/
sizetune	drawtune.c	/^static void sizetune(struct tune* t)$/
sizevoice	drawtune.c	/^static void sizevoice(struct voice* v, struct tune/
skipspace	parseabc.c	/^skipspace (p)$/
skiptospace	parseabc.c	/^skiptospace (p)$/
skiptrack	midifile.c	/^int skiptrack ()$/
slurtotie	matchsup.c	/^static void slurtotie()$/
softcheckbar	genmidi.c	/^static void softcheckbar(pass)$/
spacechord	drawtune.c	/^static void spacechord(struct feature* chordplace)/
spaceline	position.c	/^static int spaceline(struct voice* v)$/
spacemultiline	position.c	/^static int spacemultiline(struct fract* mastertime/
spacevoices	position.c	/^void spacevoices(struct tune* t)$/
splitstring	parser2.c	/^static void splitstring(s, sep, handler)$/
stack_broken	matchsup.c	/^static void stack_broken(v)$/
start_body	yapstree.c	/^static void start_body()$/
start_drone	genmidi.c	/^void start_drone()$/
start_tune	toabc.c	/^static void start_tune()$/
startfile	matchsup.c	/^void startfile()$/
startpage	drawtune.c	/^static void startpage()$/
startslurs	yapstree.c	/^static void startslurs(struct feature* firstnote)$/
starttrack	genmidi.c	/^static void starttrack(int tracknum)$/
stats_error	midi2abc.c	/^void stats_error(s)$/
stats_finish	midi2abc.c	/^void stats_finish()$/
stats_header	midi2abc.c	/^void stats_header (int format, int ntrks, int ldiv/
stats_keysig	midi2abc.c	/^void stats_keysig(sf,mi)$/
stats_metatext	midi2abc.c	/^void stats_metatext(type,leng,mess)$/
stats_noteoff	midi2abc.c	/^void stats_noteoff(int chan,int pitch,int vol)$/
stats_noteon	midi2abc.c	/^void stats_noteon(chan,pitch,vol)$/
stats_parameter	midi2abc.c	/^void stats_parameter(chan,control,value)$/
stats_pitchbend	midi2abc.c	/^void stats_pitchbend(chan,lsb,msb)$/
stats_pressure	midi2abc.c	/^void stats_pressure(chan,press)$/
stats_program	midi2abc.c	/^void stats_program(chan,program)$/
stats_tempo	midi2abc.c	/^void stats_tempo(ltempo)$/
stats_timesig	midi2abc.c	/^void stats_timesig(nn,dd,cc,bb)$/
stats_trackend	midi2abc.c	/^void stats_trackend()$/
stats_trackstart	midi2abc.c	/^void stats_trackstart()$/
staveline	drawtune.c	/^static void staveline()$/
stop_drone	genmidi.c	/^void stop_drone()$/
stress_factors	genmidi.c	/^void stress_factors (int n, int *vel) {$/
stress_locator	stresspat.c	/^stress_locator (char *rhythmdesignator, char *time/
stringwidth	drawtune.c	/^static double stringwidth(char* str, double ptsize/
sync_voice	store.c	/^static void sync_voice (struct voicecontext *vv, i/
sysex	midicopy.c	/^sysex ()$/
tempounits	matchsup.c	/^static void tempounits(t_num, t_denom)$/
testtrack	midi2abc.c	/^int testtrack(trackno, barbeats, anacrusis)$/
text_data	genmidi.c	/^static void text_data(s)$/
textextend	store.c	/^static int textextend(maxstrings, stringarray)$/
textfeature	matchsup.c	/^static void textfeature(type, s)$/
tick_to_seconds	midicopy.c	/^tick_to_seconds (int tick)$/
tidy_ties	yapstree.c	/^static void tidy_ties()$/
tiefix	matchsup.c	/^static void tiefix()$/
timestep	queues.c	/^void timestep(t, atend)$/
tlistx	midi2abc.c	/^struct tlistx {$/
to16bit	midicopy.c	/^to16bit (c1, c2)$/
to32bit	midicopy.c	/^to32bit (c1, c2, c3, c4)$/
transpose_note	toabc.c	/^void transpose_note(xaccidental,xmult, xnote, xoct/
trkstat	midi2abc.c	/^struct trkstat {$/
tuneheight	drawtune.c	/^static double tuneheight(t)$/
turn_off_all_playing_notes	midicopy.c	/^turn_off_all_playing_notes ()$/
txt_arbitrary	mftext.c	/^void txt_arbitrary(leng,mess)$/
txt_chanpressure	mftext.c	/^void txt_chanpressure(chan,press)$/
txt_header	mftext.c	/^void txt_header(format,ntrks,ldivision)$/
txt_keysig	mftext.c	/^void txt_keysig(sf,mi)$/
txt_metaeot	mftext.c	/^void txt_metaeot()$/
txt_metamisc	mftext.c	/^void txt_metamisc(type,leng,mess)$/
txt_metaseq	mftext.c	/^void txt_metaseq(num)$/
txt_metaspecial	mftext.c	/^void txt_metaspecial(type,leng,mess)$/
txt_metatext	mftext.c	/^void txt_metatext(type,leng,mess)$/
txt_noteoff	mftext.c	/^void txt_noteoff(chan,pitch,vol)$/
txt_noteon	mftext.c	/^void txt_noteon(chan,pitch,vol)$/
txt_noteon_type0	midi2abc.c	/^void txt_noteon_type0(chan,pitch,vol)$/
txt_parameter	mftext.c	/^void txt_parameter(chan,control,value)$/
txt_pitchbend	mftext.c	/^void txt_pitchbend(chan,lsb,msb)$/
txt_pressure	mftext.c	/^void txt_pressure(chan,pitch,press)$/
txt_program	mftext.c	/^void txt_program(chan,program)$/
txt_program_type0	midi2abc.c	/^void txt_program_type0(chan,program)$/
txt_smpte	mftext.c	/^void txt_smpte(hr,mn,se,fr,ff)$/
txt_sysex	mftext.c	/^void txt_sysex(leng,mess)$/
txt_tempo	mftext.c	/^void txt_tempo(ltempo)$/
txt_timesig	mftext.c	/^void txt_timesig(nn,dd,cc,bb)$/
txt_trackend	mftext.c	/^void txt_trackend()$/
txt_trackstart	mftext.c	/^void txt_trackstart()$/
txt_trackstart_type0	midi2abc.c	/^void txt_trackstart_type0()$/
underbar	drawtune.c	/^static void underbar(struct feature* ft)$/
unemit_inline	toabc.c	/^void unemit_inline()$/
validnote	midi2abc.c	/^int validnote(n)$/
voicecontext	matchsup.c	/^struct voicecontext {$/
voicedivider	drawtune.c	/^static void voicedivider()$/
vskip	drawtune.c	/^void vskip(double gap)$/
winamp_compatibility_measure	midicopy.c	/^winamp_compatibility_measure ()$/
write16bit	midicopy.c	/^write16bit (data)$/
write32bit	midicopy.c	/^write32bit (data)$/
write_event	genmidi.c	/^void write_event(event_type, channel, data, n)$/
write_event_with_delay	genmidi.c	/^void write_event_with_delay(delta,event_type, chan/
write_keysig	genmidi.c	/^static void write_keysig(sf, mi)$/
write_meter	genmidi.c	/^static void write_meter(n, m)$/
write_program	genmidi.c	/^static void write_program(p, channel)$/
write_syllable	genmidi.c	/^static void write_syllable(place)$/
writechanmsg_at_0	midicopy.c	/^writechanmsg_at_0 ()$/
writetrack	genmidi.c	/^long writetrack(xtrack)$/
xevent_rest	yapstree.c	/^void xevent_rest(n, m, multi)$/
xnum_to_next_nonchordal_note	midi2abc.c	/^int xnum_to_next_nonchordal_note(fromitem,spare,qu/
zero_barcount	toabc.c	/^int zero_barcount(foundbar)$/
zerobar	matchsup.c	/^static void zerobar()$/
