#!/usr/bin/python3 -B
# ----------------------------------------------------------------------------
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
# ----------------------------------------------------------------------------
import os
import sys
# ----------------------------------------------------------------------------
WHOLE_NOTE = 120 * 4        # 120 = quarter note from csv "Header".
# ----------------------------------------------------------------------------
#    octave  2      3      4       5
#  c/b+     48     60     72      84
#  c+/d-    49     61     73      85
#  d        50     62     74      86
#  d+/e-    51     63     75      87
#  e/f-     52     64     76      88
#  f/e+     53     65     77      89
#  f+/g-    54     66     78      90
#  g        55     67     79      91
#  g+/a-    56     68     80      92
#  a        57     69     81      93
#  a+/b-    58     70     82      94
#  b/c-     59     71     83      95

# For octave 3c = 60.
note_in_octave_value = {
   'c': 60,
   'd-':61,
   'd': 62,
   'e-':63,
   'e': 64,
   'f': 65,
   'g-':66,
   'g': 67,
   'a-':68,
   'a': 69,
   'b-':70,
   'b': 71,
}

global note_to_midi_value
note_to_midi_value = { }
global midi_value_to_note_flat
midi_value_to_note_flat = { }
global midi_value_to_note_sharp
midi_value_to_note_sharp = { }

for o in range(0, 9):        # 0 thru 8
    for n in note_in_octave_value:
        x = str(o) + n
        v = (note_in_octave_value[n] - (60-24)) + 12*o      # 60-36=24 = '0c'
        note_to_midi_value[v] = x
    # rof
# rof

# ----------------------------------------------------------------------------
# Main program follows.
def main():
    def printnotes(l2, last_n, voices):
#-        print("entering printnotes({}, {}, {})".format(l2,last_n,voices), file=sys.stderr)
        if l2 != 0:                # New notes.
            for n in range(0,len(last_n)):
                if n < len(voices):
                    vn = voices[n]
                else:
                    vn = '=v VOICE{}:'.format(n + 1)
                # fi
                nt = last_n[n]
#-                print("{} {}{}".format(vn,nt,l2), file=sys.stderr)
                print("{} {}{}".format(vn,nt,l2), file=sys.stdout)
            # rof
        # fi
    # fed

    prev_time = 0
#-    print("prev_time={}".format(prev_time), file=sys.stderr)
    last_lth = 0
    last_n = [ 'r' ]
    voices = [ ]
    measure = 0
    print("measure {}".format(measure))
    measure_lth = 0
    for line in sys.stdin:
        line = line.rstrip()
        if line[0] and line[0] == '*':
            print(line, file=sys.stderr)
            print(line, file=sys.stdout)
            if not line[1] or line[1] != ' ':
                continue
            # fi
            if not line[2] or line[2] != 'v':
                continue
            # fi
            vn = line[2:]
            voices.append(vn)
            continue
        # fi
        # Get rid of commas, and leading/trailing spaces
        nline = line.replace(',', '').strip()
        a = nline.split()            # Get everything.
        print("------------------------------------------------------------------------------", file=sys.stderr)
        print("a={}".format(a), file=sys.stderr)
        if a[2] == 'Control_c' or a[2] == 'Pitch_bend_c' or a[2] == 'Title_t':
            continue
        # fi
        time = a[1]
        if int(time):
            t = int(time)
            print("t={}".format(t), file=sys.stderr)
            d = t - prev_time
            print("d={}".format(d), file=sys.stderr)
            if d <= 0:
                l1 = l2 = lth = 0
            else:
                while d > WHOLE_NOTE:
                    print("lth=1 d={} ".format(d), file=sys.stderr)
                    printnotes(1, last_n, voices)
                    d = d - WHOLE_NOTE
                    measure = measure + 1
                    print("measure {}".format(measure))
                    measure_lth = 0
                # elihw
                if d < 5 and d > 0:
                    print("d ({}) < 5".format(d), file=sys.stderr)
                    prev_time = t
                    continue
                # fi
                lth = (WHOLE_NOTE / d) + 0.05
                l1 = int(lth * 10)
                l2 = int(l1 / 10)
                printnotes(l2, last_n, voices)
                last_n = [ ]
                measure_lth = measure_lth + d
                if measure_lth >= WHOLE_NOTE:
                    measure = measure + 1
                    print("measure {}".format(measure))
                    measure_lth = 0
                # fi
            # fi
            print("lth={} l1={} l2={} WHOLE_NOTE={} / d={} ".format(lth,l1,l2,WHOLE_NOTE,d), file=sys.stderr)
            if a[2] == 'Note_on_c':
                n = int(a[4])
                gcs = note_to_midi_value[n]
                last_n.append(gcs)
            else:
                print("* {}".format(line), file=sys.stderr)
                print("* {}".format(line), file=sys.stdout)
            # fi
            prev_time = t
            print("prev_time={}".format(prev_time), file=sys.stderr)
        else:
            print("* {}".format(line), file=sys.stderr)
            print("* {}".format(line), file=sys.stdout)
        # fi
# v13: 0c4
# 9, 1927, Note_on_c, 15, 43, 112
    # rof
    printnotes(0, last_n, voices)
    last_n = [ ]
    return
# End of main

# ----------------------------------------------------------------------------
if __name__ == '__main__':
    main()
# fi
# ----------------------------------------------------------------------------
exit(0)
# ----------------------------------------------------------------------------
# End of file musicomp2abc
