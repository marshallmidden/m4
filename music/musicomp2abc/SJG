2023-01-31_13-06-17

From Paul Konig about Cyber1 and passwords, etc.
    Password repair can be done by submitting a request:
    	https://cyber1.org/contact.asp
    which should work, though it may take a few days.


Sherwin - Read/learned a few months back about the LIME music system, which
is upgraded from IMS (Integrated Music System ?) that Lippold created after I
left. He redid things and made things "staff" centric.

Tom Corteze, saved from NoveNet, the IMS stuff. I recently got a copy of the
imscomp0 -> 5, with imscomp1 being the mid-90's version of musicomp. There is
lots of documentation for the huge manual. Lippold's group did OCR, interactive
music note editing. They appeared to move to a LIME internal format that the
compiler generated. Then you could interactively note edit, etc., and waveform
stuff. Lots. A "whole system". Made it use the new MIDI (version 1) hardware
connection [keyboard replacement], etc.

LIME is available via web: (Read about it in big PDF.)
    http://www.cerlsoundgroup.org/cgi-bin/Lime/Windows.html
It won't work on an ARM version of Apple's Mac. It is for Windows and x86 Mac.

Answers to questions, etc interspersed below.
As you wrote a big e-mail, response will be even bigger, right? :)

-NOTDONEYET- list of things left to do, and what is "done" at end of e-mail.

>  2023-01-31_10-14-56
>
>  M4,
>  I don't know anything about cyber1. Paul Koning knows everything about cyber1.
>  Do you have his email? Do you have his pnotes address on cyber1?
>
>  I have never lost any other password in my life, but I lost my cyber1 password
>  due to a long chain of unlikely events. I have been entirely unable to get
>  anyone to blank my password, or recreate my records, or whatever. I am
>  sjgooch/musician there, if memory serves.
>
>  I think it is a great idea for you to resurrect musicomp. I think the macro
>  facilities there are highly compatible with music composition, and are something
>  which did not evolve in any of the current offerings of which I am aware.
>
>  How are things going?
>
>  I am still SJGooch@gmail if you want to move this conversation to a better UI.
>  ----------------------------------------------------------------------------
>  Sherwin Gooch 8:45 AM
>
>  M4,
>
>  Congrats on your work anniversary!
>
>  If we wanted to get your updated version of musicomp to run out here, what would
>  be the list of resources required?

Do you mostly understand if I say that I am using:
    A) a newer ARM mac with homebrew and make/gcc/python (etc.), and
    B) a playing package called fluidsynth (available on Windows/mac/linux), and
    C) GeneralUser2 SoundFont (comes with fluidsynth), and
    D) git clone
    E) bash shell alias --
    	unalias fs 2>>/dev/null >>/dev/null
	fs()
	{
	    FILE="$1"
	    BASE="`basename ${FILE} .fs`"
	    if [ "${BASE}" = "${FILE}" ]; then
		FS="${FILE}.fs"
	    else
		FS="${FILE}"
	    fi
	    if [ -f "${FS}" ]; then
		echo fluidsynth -a coreaudio -d -n -q -K 128
		cat ${FS} | fluidsynth -a coreaudio -d -n -q -K 128
	    else
		echo "Need an argument that is a 'fs' file name."
		false
	    fi
	}
    F) cd m4/music/musicomp2abc
    G) make all
    H) fs b-6.fs

--------------------------------------------------------------------------------
>  What language(s) is it written in, now? What compilers, software tools, etc.,
>  would we need just to get a version compiled to move notes in and sound out?

python scripting language. With pretty standard libraries. For "include" files,
I use the gcc preprocessor. As such, #define's and any other things are supported. :)

>  Is the current version compatible with Mac, PC, linux, or something else?

Yes.

>  What resources are required on the host platform? RAM size, mass storage size,
>  I/O: Bluetooth? MIDI? USB? Audio cards/facilities?

Python. Little of anything. "du -sk ." shows much less than two gigabytes disk space.
That has sources for all cyber1's music, Beethoven's 6th, Beethovens 1st Symphony
movements one,two,three,four(all), Beethoven's 2nd Symphony movements 1 and 2 (3
in progress/2/3/4, b-2 movements 1/2, and Tchaikovsky's 1812 overture - 63 voices.
NEED BETTER SOUND CHOICES -- I WANT A CANON!!!
And church bells like I think they should sound. And ...

>  What I am thinking is this: There is one piece of the elephant which has still
>  not been implemented that we were within months of creating at FSU when that
>  guy got (probably) murdered over funding the ETA-10 over the CRAY-1 for FSU.
>
>  I had the entire project mapped for years, and the entire "Republic VII"
>  combination intelligent PLATO 7 terminal, and music workstation within a
>  couple of months of being complete. It would have allowed us to do algorithmic
>  study and generation of samples-based instruments: Sort of like if you could
>  take something like sound-forge, use any combination of sampling, computing,
>  library quefrency functions, algorithms, recorded sounds,... whatever to
>  generate 1 note, and then automatically generate a whole matching library of
>  pitches to populate the keyboard.

Musical instruments -- think piano -- have a different string for each note. Thus
one wishes to record each string, with the different forces of string being hit.
Violin - every note it can play, recorded with different playing of the bow/plunking,
for different lengths of note being held. This has been done for a bunch of the
string instruments, supposedly creative commons licensing -- I read article, but
could not find the waveforms on-line. Being done at a U in Europe ... . Whole city
went quite as the instruments are being recorded ... something like 47 bits?

Supposedly all MIDI-2 stuff, but the file format(s) are not determined yet, only
the hardware interfaces. Wish I had contacts

>  But politics got in the way, and I had to go. I figured the project was safe,
>  because Brad Weage knew exactly what to do, and all the required hardware
>  stuff was not only done, but had been in use for significant time. We even had
>  a large (for the time) local hard-disk on the "PLATO terminal" machine. (And a
>  graphics printer capable of printing music manuscript.)
>
>  But for some reason Newcomb and those guys couldn't even continue to coast in
>  the right direction for a couple of monthis to cross the finish line. I didn't
>  understand one thing about human nature and project management at that time: If
>  you have an imbecile take over a project which is in good shape and moving in
>  the exactly the right direction, it's not just that they can screw up the
>  project by going in a different direction (which I thought we were safe from
>  happening.) It is that the new leader can be irritated by insignificant things,
>  and set priorities so that unimportant things are elevated in priority and have
>  to be worked on before the development guys get time to "coast" on doing the
>  important work. Oh, well.
>
>  I figured, the velocity of tech development being what it is/was, everything
>  would get done externally in a year or 2, anyway, even if FSU/CMR didn't do it.
>  Well: Surprise, surprise! Joke was on me. They didn't even keep the "terminal"
>  working. And it wasn't hardware that brought them down. Just priorities
>  scheduling and software.

Scheduling and software -- sorry, they still are incompatible concepts.

>  1.
>  Note Designer
>  There was a time when we were world-class experts on what a single musical
>  note could be.
>
>  So here's the MAIN thing I think is STILL missing from the industry: Call it
>  a multi-faceted instrument designer. Just like we took every possible way
>  (7 fundamentally different ways, anyway) that people could imagine or think
>  about creating (what later became known as wavetables) for the GCS, I think the
>  "still missing link" is the ability to have a bunch of simple inter-operating
>  tools that let you combine source "sounds" (algorithms, patterns, equations,
>  libraries, samples, spectral descriptions, FFTs, built-in quefrency functions,
>  ..., etc.) conveniently in any way you can think of.
>
>  That includes not only looking "top-down" from the human interface to the
>  detailed time-domain description or samples, but also "bottom-up" in the
>  direction of combining multiple "instruments" to play in unison from the same
>  "voice" of the music compiler output.
>
>  An instrument editor. An instrument editor to end all instrument editors.
>
>  Compared to the half million lines of code we wrote to do this stuff the first
>  time, with the tools available now, I don't think this is really all that much
>  work. We would just need to make a comprehensive list of "views" of the ways to
>  envision a single note (maybe about a dozen at most), unify as many of them as
>  possible through proper definition of the displays and tools, create a general
>  enough internal format that we could easily move and/or populate "parallel"
>  descriptions between one "editor view" and another, and put the hooks in for
>  links to the "music manuscripts" in the music compiler.
>
>  2.
>  Macros
>  The front-end conditional source macros built into the "first pass" of musicomp
>  correspond very well to how humans think about and group music. We would need
>  to make them compatible with (or at least look like) manuscript (music staffs)
>  somehow, but I think we can kludge this for a first time out of the gate: It's
>  so new, it doesn't have to be perfect or perfectly integrated.

The word manuscript confuses me. Lippold added a "process FIRST ARG ; ... ; endprocess"
and then "begin FIRST 3c4 d e [c e g] a b 4c quit" ... and then the process (tiny
macro) is run for each 'token' after it begins, to the quit. From the documentation,
it was for like changing the 'time' for swing/waltz/whatever via a pattern. -NOTDONEYET-

>  Think of it like this: The motifs or melody lines that describe pitch sequence
>  structures that expand into themes, and then further expand in to sections of
>  classical form all can be described as "named" macros. Perhaps simply nesting
>  the lower level descriptions of "pitch form" inside the higher descriptions of
>  ornaments, repetitive pitch motions (notes), nested inside motifs, nested inside
>  melodies is the way describe the temporal (time evolution, arc, or trajectory)
>  "left-to-right" "march" of the notes.
>
>  We would also need to provide tools to aid in adding harmony and counterpoint. E.g.:
>
>  With a parallel path for chord-structure or chord sequences, which would
>  "suggest" or limit the notes which could be added below or above a "melody".
>  ("A melody" as easily describing a bass-line as a high-pitched melody, and
>  building harmonic structure from the "bass-line" up in pitch, as from the "melody" down.)
>
>  3.
>  Probability Transition Matrix composition
>
>  This is so similar to a larger macro structure that it could easily be argued
>  that it should be subsumed into the macro facility. It is the "bigger glob" of
>  form a step up from what we normally consider macros. The granularity is that
>  of "classical form." The "A-theme," the "B-theme", the chorus, the verse, the
>  bridge, the pre-bridge, etc.

I don't understand these terms. I could learn them, but I'd forget them by tomorrow.
*grumble* I'm a programmer and this new "python" scripting language is horrible
(5 years I've been using it...).
Love/hate relationship with computers/technology/software/hardware.

>  The only thing different is that rather than there being a deterministic branch
>  controlling flow, there is a need to implement a way to handle probabilistic
>  branching of the flow which is stacking structure, and kind of leaving it in
>  a wake (like a boat) behind it.
>
>  I have in my possession a probability transition matrix which describes
>  virtually every popular song which has charted since...probably the beginning
>  of the 20th century. Certainly through all the rock 'n roll we lived through.
>  A copy was given to me by Steve Meadows. I don't know if he wrote it, or it
>  was part of a class he taught to kids every year for a few summers in Urbana.
>  "Rock camp," or something like that.
>
>  Anyway, the work is done. You can give it 2 definitions of themes, and "roll
>  dice" to select between popular chord sequences which are familiar and have
>  been used in pop songs which charted.
>
>  It could probably even create and suggest a unique bridge for the song if you
>  don't have one. Or, analogously, fill in the B-theme as some kind of variation
>  in form of the other sections.
>
>  I am thinking this is low enough on the creativity spectrum to just implement
>  it "as is." Just "click the right buton(s)," and it spits out a pop song minus
>  the lyrics.
>
>  We might want to allow it to fill in the rhythm based on the stress syllables
>  of a suggested lyric.
>
>  We could probably even get something like chatGPT to write or complete or fill
>  in the blanks for lyrics for us.
>
>  4.
>  keyboard over-loading
>
>  keyboard "looping" controls
>
>  5.
>  Conductors' Crank (tempo input option)
>
>  This stuff, in musical context, sounds kind of complicated and difficult. But
>  if you put it in the context of the kind of machinations of form ("inform",
>  "information", structure, algebra) we do everyday as programmers, this is a
>  damn simple low complexity, restricted option, toolbox. And the data sizes
>  aren't even in the same galaxy as deep-mining big data.
>
>  Conclusion
>
>  Maybe what we are talking about here is an interactive real-time composers' workstation.
>
>  What do you think?
>
>  Sherwin
>
>  P.S. Like the (few and limited) destructive motivations introduced by
> capitalism, the NSF release was made (by Don Lee) to satisfy 2 criteria:
>
>  1. Meet the requirements specified by the govt contract in as limited a way
> as possible so as to help CERL maintain control of the development;
>
>  2. Be convenient enough for Don Lee to do it without being late for beer at
>     the Wigwam.
>
>  It would have also been nice if it fit on one 1600 bpi 1/2" tape reel.
>  (Which, I think, sometimes it violated, spilling over the limit to put a
>  little on a 2nd reel.)

There are many 'lengths' of tapes. You could get one that was super thin and
triple the amount of data that would fit on it. That was the real "cheat". :)
COPY IT? *HA* You gotta get a really long tape first!

------------------------------------------------------------------------------
>  They originally didn't include any "lessonware" (TUTOR). Oops...turned out
>  the system wouldn't run without the editor, and some other "higher level"
>  (at the time) system support stuff. So I can understand why, e.g., the
>  music source wasn't included.

Datasets. After they made reading from source files illegal ... The datasets
that Paul Konig dumped are 'crap' (?) and unusable. Anything saved in source
files he had.

>  The real question is, "how do we fill in any gaps you can't do without?"
>  The only option I can think of is that there were some copies that just
>  took everything. Joe C of purdue had one. He tried to read it later, after
>  it had been in storage in non-environmentally controlled room or warehouse
>  or something, and he (at the time) felt it had "too many errors to read."

I got a copy of that too, and it lost the silver start of tape mark, and even
using complicated recovery tools, I could not read it. Still in the basement
somewhere. [The computer department would run every tape stored in the center
through a tape cleaner/conditioner twice a year. *duh* Not good for long term
storage. And with the tape 'so' long, they thought the machine had broken the
first time. :) ]

>  It may be that a terribly erroneous version is better than nothing at all.
>
>  But I'm pretty sure GPK and those other guys at Cyber1 have beat the bushes
> pretty hard to try to find stuff. So we might just be up shit's creek.
>
>  We should probably talk about this on a voice channel. I'm not really sure
>  what the problem is if you already have musicomp running in Perl or something.

The problem was that the version Paul has did not have 'chords'. And Paul had
added a new voice format to it. I got all that to work. :)

I can compile the 110 songs that Paul has on Cyber1. I added the extra voices to
promenade (which I remember doing while I was still in shampoo-banana). The
Blue Danube waltz is lost. Beethoven's 6th from back there lost. I retyped it in.
Using Paul's "v2: 3c4,d,e,f,4c" type format.
I could not remember how I did chords, just that [c e g] was the format.

Anyways, imscomp1 ... .

My youtube channel has several larger pieces in this 'intermediate' format.
    speakertest ... so many BAD speakers, headphones, etc. out there.
    promenade#1 ... (with piano from GeneralUser2.snd2 soundfont)
    A flat Prelude - Chopin -- Tom Corteze let me have 1 example piece he had
    			done in the IMS format. So, With minimal changes, I got
			it to compile in "my" modified musicomp2abc thing.
			Then he let me have the ims sources.
I fixed a bunch of bugs with xpose command. And he did the transpose incorrectly!  This is fixed.
    Beethoven's 6th.
    Beethoven's 1st, movements 1, 2, 3, and 4.
    Beethoven's 2nd, movements 1, and 2.
    1812 Overture -- my wife said it was her favorite classical music piece. 63 instruments.
I had never heard the beginning part before. At 3 minutes and 50 seconds the part
everyone knows starts. :)

YES, I need someone to choose instruments. The tiny conductor corrections. What does the
various accents really do?

OH! Why the name musicomp2abc?
--------------------------------------------------------------------------------
I started out trying to find what the current state is for text file music. There
are two formats that I was able to google. (Did not find out about LIME, nor a few
others that are available. MUSE, etc. -- all proprietary and don't really seem that
good when 'using them'.)  There was ABC notation:
    https://abcnotation.com/
and then there is lilypond:
    http://lilypond.org/
Lilypond is for music engraving. Printing pages from 'TeX' typesetting type thing.
It has a player, but not very good. Imagine a bunch of words that a sailor might
say -- but I don't know those words, or my infrequency of saying them ... yet thinking.

ABC notation seems to have a short text input format. Horrible design decisions, but
it could create postscript/pdf files for viewing on staves, and play things, sort of.
After a bit, I ran into the programs to create playing pieces having major problems.
So, I added a --midi1csv option to create .mid files directly.
After a while, I ran into MIDI is only 16 voices. And, and, and, and ... *limitations*.

With Paul Konig's different format, I added --vertical and --horizontal to output
the input file in either of those formats. --horizontal has "3c4,3e4,3g4" as a chord
for 3 voices. --vertical has 3 lines that look like "v1: 3c4", "v2: 3e4", "v3: 3g4".
And move between the two formats. Made sure that I did everything internally right.
And you could see the notes without macros, putd's, etc.

Then I added --fluidsynth (or -fs abbreviation) to create a text format that is similar
to midi binary file format, but fluidsynth will do more than 16 instruments. (Thus 128!)

There are debugging options like:
    --pages 5-10			# Only pages 5 thru and including 10.
    --measures 77,90-			# Measure 77 and then 90 to the end.

Adding other output formats is merely a matter of programming. (I love that quote!)

So, a couple months back (time flies), I got imscomp1 source, documentation, etc.
(I could e-mail the documentation... but it is in the LIME pdf, with newer stuff too.)

I (last night?) finished making character variables able to get partial tokens.
From my "to do" list:
   encode CHARSTRING=3e+4 4c8 [4d2 5a] 3c4 5a2
   CHARSTRING{2,5}      # 4c8 [4d2 5a]  : brackets count as 1. (start cardinal, lth)
			# lth missing means to end of string.
I, of course, put in:
    calc  anything='hi there' + "you old friend"
And encode does not have quotes for the string after the = sign.
The token limitation bit was a tad fun. There are four places within my 'tutor'
expression parser (calculate.py) wherein {} are handled, I did the one that appeared
to be right. Why tutor calculations?
    m4 = pi
    2m4
    (Prints out 2 pi. Implied multiplication. And priority of operations is different.)

I have a program mcomp that takes a midi playing binary and outputs a really bad
version of musicomp format. I did not finish it, because I found that almost
any midi file out there does not have all the notes correct in the music.
Thus massive hand editing is required. I tend to like Paul's --vertical format. :)
	MCOMP        = mcomp
	MCOMPINPUT   = b2m3.mid
	MCOMPOUTPUT  = b2m3.gcs-auto
	${MCOMP} ${MCOMPINPUT} vertical > ${MCOMPOUTPUT}

Next thing I'm doing is macro command parsing and usage for specific delimiters.
Then I want to see if I can calculate accelerandos/ritardando on-the-fly. I do
crescendos/diminueno already. They sound nice.

Then I wish to finish Beethoven's 2nd symphony, movement 3. (and 4 and ...)
Probably go back through b6/b1-1,2,3,4/b2-1,2/1812 to use new tempo accelerando.

------------------------------------------------------------------------------
To do list - edited down to get rid of trivial things, things done, etc.
    d) Macros -- delimiters... spaces and commas are equivalent. :)
       Do 'new' way of defining and using macros. Delimiters are important.
  1) Put page into --vertical and --horizontal, and some comments are not printed out.
     Anything else not put into vertical/horizontal? Add it.

Add more "IMS" features. Can they be added simply?
    a) Are macros allowed anywhere?  # arguments enforced? Variable number of arguments?
    b) "staff"                  command
    c) [...] for chords?
    d) v(x) (etc. for volume) i.e. v50
       p(x) (etc. for pan) i.e. p50
    e) treble, bass, ...        commands - on staffs.
    f) fermata                  How to print in abc notation -- store with note, extend time played?
    g) vf vp vpp vff - how implemented?    Does my putd's making them vol() satisfy?
    h) "hide rests" ... "show rests"   Ouch -- for abc notation that is not going to happen - maybe.
    i) Lilypond used instead for printing music?

Add commands in IMS but not in musicomp:
    Differences?
    ++  tempo           -- NOTDONEYET for accel and rit processing.
    ?   instrument	-- how to change for staves?
	instr		-- probably don't do, very plato specific.
	tuning		-- MIDI - what does this really mean? Is it used?
     . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    ++  macro           <- parse for allowing almost any delimiter between arguments.
    ++  endmaco
     . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
	staff
	print
	format
	decode		<- very complicated changes and format of it.
    +   calcc             <- add this
    +   calcs             <- add this
    +   loop              <- add this
    +++ outloop           <- add this as a new thing.
    +   endloop           <- add this
     . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    +   process           <- add this ?      It is the same code as defmacro in IMS ... ??
		Usually processes and macros do not specify a staff internally. The
		most recently selected staff is assumed for all the notes, "encode"
		commands, and "decode" commands in the process or macro.
    +   endprocess        <- add this ?      IMS: 'endproc'        <- add this ?
    +       begin         Start process
    +       quit          Stop process
    ------------------------------------------------------------------------------
    * Generate -decode- keyword table.
	after, upto, explicit, number, staffname, octave, notename, notenumber,
	sharp, flat, natural, tuplet, notelength, dot, duration, glissando, t, m,
	s, z, l, a, aa, g, gg
    ------------------------------------------------------------------------------
    * key words used on staff line: (staff defines a name like "lefthand:")
	clef, xpose/transpose, beaming, hide, show, midi, lyrics, key, arp, trem0,
	trem1, trem2, trem3, fermata, lh, rh, legato, staccato, marcato, tie, slur,
	volumenumb, volumename, crescendo, position, pan, type, treble, bass,
	soprano, alto, tenor, normal, perc, nohead, oloz, floz, oharm, fharm,
	stemsoff, stemson
    ------------------------------------------------------------------------------
    vx:     tie 4c4,c8,c16,cs
    a       = accent
    aa      = heavier accent.
    <       = cresendo start
    >       = diminio start
    g       = grace
    vpp < c d e vff         How lippold did cresendos.
    transcribe  up 1 octave
                key c major   transcribe up to d major
    v(%)    0 to 100.
    p(0)    = pan   percentage (0=left, 100=right)
    p(50) < p(100)  for moving pan.
    Parenthesis are optional.
    "do" 3c4 "ri" d "mi" e      lyrics printed under notes.
    oboe, bassoon:   key a minor		# -- multiple staves at same time
