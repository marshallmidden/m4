start: program
program: _EOL* command (" ")* (_EOL+ command (" ")*)* _EOL* //lines may end on spaces and might be separated by many newlines
command: "print " (" "| list_access | textwithoutspaces | punctuation)*  -> print
         | var " "+ "is ask " + (" " | text | punctuation)* -> ask
         | var " is " text ((", "|",") text)+  -> assign_list
         | var " is " text -> assign
         | textwithoutspaces " " text -> invalid

_EOL: "\r"?"\n"

list_access : var " at " (index | random) -> list_access
index : DIGIT+
random : "random"

punctuation : PUNCTUATION -> punctuation
PUNCTUATION: "!" | "?" | "." //uppercase places tokens in tree

text: /([^\r\n,!?.]+)/ -> text //anything can be parsed except for a newline and a comma for list separators
//plus in Level 2 we need to treat punctuation differently, since it can be used to separate arguments (variables)

textwithoutspaces: /([^\r\n,!?. *+-\/]+)/ -> text //anything can be parsed except for spaces (plus: a newline and a comma for list separators)
//plus in Level 2 we need to treat punctuation differently, since it can be used to separate arguments (variables)

var: NAME -> var


%import common.LETTER   // imports from terminal library
%import common.DIGIT   // imports from terminal library
%import common.WS_INLINE   // imports from terminal library
%import common.NEWLINE   // imports from terminal library
%import common.CNAME -> NAME


