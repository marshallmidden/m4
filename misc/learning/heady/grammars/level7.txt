start: program
program: _EOL* command+

command: ifs elses?
         | repeat
         | assign _EOL+
         | print _EOL+
         | ask _EOL+

ifs: "if " condition _EOL indent command+ dedent
elses: "else" _EOL indent command+ dedent
condition: (equality_check|in_list_check) (" and " condition)*
repeat: "repeat " (NUMBER | var) " times" _EOL indent command+ dedent
assign : var " is " expression ((", "|",") expression)*
equality_check: textwithoutspaces " is " textwithoutspaces
in_list_check: textwithoutspaces " in " var

print: "print " (quoted_text | expression) (" " (quoted_text | expression))*
ask: var " is ask " textwithspaces -> ask

var_access : var (" at " (index | random))? -> var_access
index : NUMBER
?random : "random"

indent: INDENT -> indent
dedent: DEDENT -> dedent

?expression: product
    | expression " "* "+" " "* product -> addition
    | expression " "* "-" " "* product -> substraction

?product: atom
    | product " "* "*" " "* atom -> multiplication
    | product " "* "/" " "* atom -> division

?atom: number | var_access

number: NUMBER -> number
text: (LETTER | DIGIT)+ -> text //TODO accents need to be brought back

NAME: /(?!(if|repeat|print)\b)[a-z_][a-z0-9]*/i
var: NAME -> var

// name can be anything that isn't a keyword
// TODO: at one point we need to tell kids this isn't possible :)

_EOL: /(\r?\n[\t ]*)+/

textwithoutspaces: /([^\n, *+-\/]+)/ -> text //anything can be parsed except for spaces (plus: a newline and a comma for list separators)

textwithspaces: /([^\n,]+)/ -> text //anything can be parsed except for a newline and a comma for list separators


quoted_text_no_escape: /'([^']*)'/ -> text //simply all between quotes should this be used at earlier levels?
quoted_text: /'((?:[^\\']|\\.)*)'/ -> text //text can be between single quotes, but quotes may be escaped with \


QUOTE: "'"

%import common.LETTER   // imports from terminal library
%import common.DIGIT   // imports from terminal library
%import common.WS_INLINE
%import common.SIGNED_INT -> NUMBER
//%import common.CNAME -> NAME
%import common._STRING_ESC_INNER


%declare INDENT DEDENT

