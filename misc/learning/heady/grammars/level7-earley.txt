start: program
program: command (" ")* ("\n"+ command (" ")*)* "\n"* //lines may end on spaces and might be separated by many newlines
?command: indent* print
         | repeat
         | ifelse
         | ifs
         | ask
         | assign_list
         | list_access_var
         | assign  //placing it here means print is will print 'is' and print is Felienne will print 'is Felienne'
         | invalid

print : "print " (quoted_text | list_access | var | sum) (" " (quoted_text | list_access | var | sum))*
ask : var " is ask " textwithspaces*
assign_list: var " is " textwithspaces ((", "|",") textwithspaces)+

//TODO: sum needs to be expression here too (like in 7 and up)

assign : var " is " sum
invalid: /^(?!(repeat|print|if|and )).+/ //everything that is not the start of a regular command

// new commands for level 4
ifelse : "if " equality_check " " command " else " command

list_access_var : var " is " var " at " (index | random)
equality_check: textwithoutspaces " is " textwithoutspaces (" and " equality_check)* -> equality_check

//indents for level 7
repeat: "repeat " NUMBER " times" "\n" (indent command)+
ifs: "if " equality_check "\n" (indent command)+ //'if' cannot be used in Python, hence the name of the rule is 'ifs'

//new for level 6
?sum: product
   | sum " "* "+" " "* product -> addition
   | sum " "* "-" " "* product -> substraction

?product: atom
    | product " "* " * " " "* atom -> multiplication
    | product " "* " / " " "* atom -> division

?atom: NUMBER | textwithoutspaces //TODO: means we cannot assign strings with spaces? would we want that?


var: NAME -> var
list_access : var " at " (index | random) -> list_access //todo: could be merged with list_acces_var?
index : NUMBER
random : "random"

textwithspaces: /([^\n,]+)/ -> text //anything can be parsed except for a newline and a comma for list separators
textwithoutspaces: /([^\n, *+-\/]+)/ -> text //anything can be parsed except for spaces (plus: a newline and a comma for list separators)
//plus in level 6, calculation elements


quoted_text_no_escape: /'([^']*)'/ -> text //simply all between quotes should this be used at earlier levels?
quoted_text: /'((?:[^\\']|\\.)*)'/ -> text //text can be between single quotes, but quotes may be escaped with \

indent: "    "

%import common.LETTER   // imports from terminal library
%import common.DIGIT   // imports from terminal library
%import common.WS_INLINE   // imports from terminal library
%import common.NEWLINE   // imports from terminal library
%import common.SIGNED_INT -> NUMBER
%import common.CNAME -> NAME

