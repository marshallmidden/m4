README for clfs (cross linux from scratch - www.linuxfromscratch.org).
------------------------------------------------------------------------------
Last updated: 2017-01-05
------------------------------------------------------------------------------
NOTE: the following files in this directory were created and may need fixing.
		diff.M4.flex.patch diff.M4.libee.patch diff.M4.libestr.patch
		diff.M4.procps-ng.patch diff.M4.psmisc.patch diff.M4.rsyslog.patch
		diff.M4.tcl.patch
------------------------------------------------------------------------------
1) Run ./002.check.tools to make sure the linux you are running has usable tools.
   It is important to NOT have too new tools too! Check the output.
------------------------------------------------------------------------------
2) Get the BOOK.clfs and BOOK.blfs directories with Makefile in this directory.
   Run the following scripts to create the files BOOK.blfs/blfs-book.txt and
   BOOK.clfs/clfs-x86_64-64.txt:
   a) ./003.wget.packages
   b) ./004.wget.packages
   These are text files that describe the procedures to install packages.
   The "Makefile" and various scripts do the procedures.
------------------------------------------------------------------------------
3) Configure variables in file 000.set.variables, like:
    a) Name of machine creating.
    b) Mount point for newly created disk partition.
    c) Disk on machine that is doing the cross-compile (like sdb) receiving output.
       NOT THE ONE YOU ARE CURRENTLY RUNNING ON!
    d) Disk name when new machine is be booted (like sda).
       This is merely for when the new machine boots -- think /etc/fstab.
    e) Grub 2.0 device and partition name for booting.
       When Run.This.4th is done, grub 2.0 is installed on "2c" and set up for booting "2d".
    f) Where the swap partition for the new machine will be.
    g) Timezone for new machine.
    h) Paper size.
    i) Language.
    j) Type of file system to create -- pretty tied to ext2.
    k) Machine to cross compile for (x86_64 as example).
    l) Extra flag(s) to newly created cross-compiler gcc.
    ---
    m) Directory where to temporarily create the "new_root" before putting on the disk receiving output.
    n) Directory to temporarily put the unpacked sources and compile them there.
    o) Directory to store the compressed tar files for the packages (sources) above.
    p) Directory to put the cross compiler tool chain.
    q) Etc.
------------------------------------------------------------------------------
4) Get the linux kernel configuration put into file SAVED.CONFIG.linux-4.9.1.nommu
   for "make oldconfig" in the scripts.
------------------------------------------------------------------------------
5) Get the grub 2.0 configuration changed. Currently for linux 4.9.1
------------------------------------------------------------------------------
6) You look at files 0.clfs.set.variables and 1.clfs.set.variables to see if
   anything needs changing. (Probably not.)
------------------------------------------------------------------------------
5) Use the "Makefile":
	"make help"
	"make usable"	Should boot and run. Note: /tools/lib -> ../lib and
	                /tools/etc -> ../etc to get ld.so to work,
					and /etc/inittab to find files referenced within.
	"make minimal"	This probably needs grub changed to have "init=/bin/bash" done.
------------------------------------------------------------------------------
To Do:
    a) Get expect to cross-compile.
    b) Find other packages needing to be cross-compiled and added. (../README)
       which
==============================================================================
Documentation of other things added -- not just the numbered scripts.
------------------------------------------------------------------------------
Added scripts to make bootable system better, useful, work reasonably, etc.:
	Extra.094-GRUB-install
	Extra.095.ld.so
	Extra.097.helloworld
	Extra.098.semi-grub-install
    Added scripts for other packages:
	200-inetutils
	201-dhcpcd
	202-openssl
	203-openssh
	204-wget
	205-curl
	206-etc-files
	207-net-tools
Added script to strip the debug and other symbols, manual pages, etc. from the created image:
	Extra.400.strip
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    The grub 2.0 configuration (menu) file.
	GRUB.CFG.3.14.21
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    A perl script used by package scripts to fetch tar from network (if compressed tar is not available),
    unpack it into a directory, possibly fetch a patch file, possible patch it, configure it, make it, install it.
	INSTALL.parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    The linux kernel configuration file.
	SAVED.CONFIG.linux-4.9.1.nommu
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    Patch files locally created for various packages:
		diff.M4.flex.patch
		diff.M4.libee.patch
		diff.M4.libestr.patch
		diff.M4.procps-ng.patch
		diff.M4.psmisc.patch
		diff.M4.rsyslog.patch
		diff.M4.tcl.patch
------------------------------------------------------------------------------
End of file README
