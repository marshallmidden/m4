d1
1 define typer
2 i = n150, vi = v150
3 j = n149
4 l = n148 $$ 1st wd of 3-wd -transfr- buffer
5 * segment, seger = k,6 $$ not used
6 k = n147 $$ ptr to user bank in common
7 m = n146
8 work = n145
9 x = n144
10 y = n143
11 time = v142
12 errors = n141
13 wpm = v140
14 haveer = n139
15 px = n138
16 py = n137
17 chars = n136
18 errflag = n135
19 old = v134
20 alpha = n133
21 course = n132
22 name1 = n131
23 name = n130
24 fakel = n129
25 fake = n128 $$ fake name
26 maxer = v127
27 *
28 numblks = 5 $$ number of full blocks in dataset
29 words = 54 $$ words per page
30 * words = 1
31 *

d2
1 wpr = 322 $$ words per record
2 strtx = 16
3 strty = 480 $$ or 460
4 maxx = 432
5 *
6 blkat = 0 $$ words from dataset here
7 randpat = blkat+wpr $$ random numbers here
8 showaat = randpat+wpr $$ showa display here
9 lthat = showaat+2*words $$ 1th of word
10 sndblk = lthat+1+words $$ 2nd block of storage
11 *
12 storagl = wpr+wpr+2*words+words+wpr $$ disk blk,randp,showa,lth word,2nd blk (dvorak)
13 strtcom = storagl+1
14 commonl = 8000 $$ 1th of common
15 *
16 statat = 1
17 nstat = 26
18 segment, wmf = n(statat),15 $$ 100 values (25 vars)
19 segment, erf = n(statat+nstat),15 $$ 100 values (25 vars)
20 * above 2 are student bank
21 segment, cwmf = nc(statat),15 $$ 100 values (25 vars)
22 segment, cerf = nc(statat+nstat),15 $$ 100 values (25 vars)
23 * above 2 are common
24 wmfreq(zz) = wmf(zz-9)
25 erfreq(zz) = erf(zz-9)
26 cwmfreq(zz) = cwmf(zz-9)

d3
1 cerfreq(zz) = cerf(zz-9) $$ 22 = from 10-11
2 maxwm = vc52
3 statsl = 52
4 sstats = commonl-statsl+1
5 * the above 5 are for stats:
6 * wmfreq(i)=number of times 1 words per minute were typed
7 * erfreq(i)=number of errors at 1 words per minute
8 wbase = 60 $$ 60+54=114
9 segmentv, f1 = n(wbase),1,6
10 segmentv, f2 = n(wbase),?,6
11 segmentv, f3 = n(wbase),13,6
12 segmentv, f4 = n(wbase),19,6
13 segmentv, f5 = n(wbase),25,6
14 segmentv, f6 = n(wbase),31,6
15 segmentv, f? = n(wbase),3?,6
16 segmentv, f8 = n(wbase),43,6
17 segmentv, f9 = n(wbase),49,6
18 segmentv, flfl = n(wbase),55,6
19 *

d4
1 *
2 lobit(zz)=10-int[bitcnt(zz$diff$(zz-1))/6]
3 *
4 *more defines
5 nperson = nc(strtcom)
6 t = 2
7 lc = 6
8 pf(zz) = t+0-lc+lc*zz $$ fake name
9 pf2(zz) = t+1-lc+lc*zz
10 pn(zz) = t+2-lc+lc*zz $$ name of person
11 pn1(zz) = t+3-lc+lc*zz
12 pc(zz) = t+4-lc+lc*zz $$ course
13 pa(zz) = t+5-lc+lc*zz $$ floating alpha
14 *
15 nshow = 29 $$ number of lines per screen
16 recordl = commonl-statsl-lc-l $$ possible length for records
17 maxpers = int[recordl/(lc+1)]
18 f1t(zz) = lc*maxpers+zz $$ wpm of zzth person (in floating, not alpha)
19 *****
20 *
21 *ieu
22 *
23 name name
24 group course
25 if (zlesson != 'debugs')
26 . if ( name != 'galcher' $or$ course != 's'
2? . . jumpout q
28 . endif
29 endif

d5
1 . . jumpout q
2 . endif
3 endif
4 ***
5 clean name,2
6 clean course,1
7 *common ndebugs,typer,commonl,checkpt
8 commonx (zlesson),typer,commonl,checkpt
9 comload
10 *
11 attach 'word',ro $$ words for new typing.
12 if (zreturn >= 0)
13 . erase abort
14 . color display;zc.errf
15 . at 1010
16 . write Unable to attach lesson's dataset <s,zreturn>.
17 .
18 . .		<c,zc.keys>Press any key to exit.
19 . pause keys=all
22 . jumpout q
21 endif
22 storage storagl $$ blk,randp,showa,lth words,2nd blk(dvorak)
23 stoload nc1,1,storagl
24 comload nc(strtcom),1,1
25 nc(strtcom+1),2,lc*nshow
26 calcs nperson<1,nperson=1,nperson $$ in case no one entered in common
27 *
28 calc old=0 $$ zero old score when entering lesson

d7
1 *
2 unit enter
3 backl return
4 calc wpm=1000
5 color display;zc.text
6 at 510
7 write one moment please...
8 calc k=1
9 do findplc
10 foregnd
11 at 510
12 erase 21
13 goto l,firstme,x,firstme
14 back firstme
15 transfr c,pf(k);fake;2
16 color display;zc.keys
17 at 2615
18 write Press BACK to see initial page again.
19 color display;zc.info
20 at 2?10
21 write
22 Your previous best for this lesson was (t,-vi,4.2) wpm.
23 color display;zc.titl
24 at 3001
25 write Copyright (c) June 1975 University of Illinois Board of Trustees
26 color display;zc.keys
27 at 3227
28 write Press NEXT
29 color display;zc.text

d8
1 next initial
2 *
3 unit firstme
4 back return
5 color display;zc.keys
6 at 606
7 write Enter a name by which you wish to be known by:
8 (then press NEXT)
9 color display;zc.text
10 arrow 916
11 at 1415
12 write This lesson is a sort of typing drill.
13 If you are faster than some of the other
14 people that have attempted this lesson,
15 you will be placed on the record list
16 which is shown on the next page.
17
18 Above, enter the name you wish to be displayed
19 on the record list, should you succeed!
20 at 2425
21 write Author: Marshall Midden
28 at 3101
29 write Copyright (§) June 19?5 University of Illinois Board of Trustees
30 *

d9
1 long 19
2 inhibit blanks
3 copy name,l0
4 bump
5 answer
6 judge ignore
7 storea fake,19
8 ok
9 clean fake,2
10 jump initial
11 *
12 unit initial
13 calc i=2
14 comload nc(strtcom),1,1
15 nc(strtcom+1),i,lc*nshow
16 entry initiall
17 data plotstat
18 back enter
19 next typer
20 nextl initial2
21 back1 return
22 at 105
23 write In this game just type all the words as fast as
24 possible. Your place will be marked appropriately.(c,zc.keys>
25 Press DATA for statistics, SHIFT-NEXT to page forward.
26 color display;zc.line
27 draw 331;364
28 color display;zc.info
29 at 404

d10
1 text nc(t+strtcom-1),lc*nshow
2 catchup
3 catchup
4 *
5 unit initial2
6 calcs (i+lc*nshow)>(nperson*lc),i=i,i+lc*nshow
7 comload nc(strtcom),1,l
8 nc(strtcom+1),i,lc*nshow
9 jump initiall
10 *
11 unit return
12 jumpout return
13 *

d11
1 unit plotchar
2 if zttype = 12
3 . showa key
4 else
5 . plot 128+key
6 endif
7 *
8 unit typer
9 comload nc(strtcom),1,1
10 nc(strtcom+1),2,lc*nshow
11 zero n(statat),nstat $$ get ready for statistics
12 jump words
13 *
14 unit words
15 0start
16 calc chars=words
17 at x¢strtx,y=strty
18 randu j,numblks
19 datain j;s,blkat+1
20 calc j=1
21 zero nc(randpat+1),wpr
22 1
23 randu k,wpr
24 branch nc(randpat+k),1,x
25 calc nc(randpat+k)=-1
26 k=nc(showaat-1+(j$cls$1))=n(wbase-1+j)=nc(blkat+k)
27 chars=chars+m=lobit(k)
28 branch (x=x+[nc(lthat+j)=(m+2)$cls$3])-maxx,x,1at
29 calc nc(showaat+[j$cls$1])="  "
30 0pack
31 branch (j=j+1)-words-1,1,0m4d

d12
1 lat
2 calc x=strtx
3 nc(showaat+[j$cle$1])="\n\n\r\n"
4 branch y=y-32,E=0start,x
5 branch (j=j+1)-words-1,1,x
6 0m4d
7 color display;zc.info
8 showa nc(showaat+1),20*words
9 color display;zc.text
10 *
11 pause 6,keys=stop,lab,back
12 calc time=clock
13 errors=0
14 j=1
15 errflag=1
16 at px=strtx-x=strtx,py=y=strty-16
17 write > 
18 do debugp
19 calc wpm=60*chars/((clock-time)*5)
2B tranefr c,flt(nperson);i;1 $$ get lowest person
21 goto wpm>-vi,some,x
22 goto nperson>=maxpers,noluck,some
23 *
24 unit debugp
25 branch 0loop
26 1sp
27 branch key-" ",x,2spok,x
28 2sp

d13
1 branch key-next,ler,x,ler
2 2spok
3 branch (x=x+nc(lthat+j))-maxx,ldo,x
4 calc x=strtx
5 y=y-48
6 ldo
7 at px,py
8 erase 1
9 goto (j=j+l)-words-l,x,q
10 at px=x-(8+8),py=y
11 write > 
12 calc errflag=l
13 0loop
14 pause
15 branch key-f1(j),lch,x,lch
16 do plotchar
17 pause
18 branch key-f2(j),2ch,x,2ch
19 do plotchar
20 pause
21 branch key-f3(j),3ch,x,3ch
22 do plotchar
23 pause
24 branch key-f4(j),4ch,x,4ch
25 do plotchar
26 pause
27 branch key-f5(j),5ch,x,5ch
28 do plotchar
29 pause
30 branch key-f6(j),6ch,x,6ch
31 do plotchar

d14
1 branch 0loop
2 lback
3 jump initial
4 llab
5 jump typer
6 *

d15
1 *cstop*
2 *
3 unit noluck
4 do statout
5 mode rewrite
6 color display;zc.info
7 at 2903
8 write You did (t,wpm,3,2) words per minute.\n
9 writec wpm>old;And you beat your best for today of <t,old,+0(old=wpm),2> wpm.;
10 But you did not break <t,old,3,2), your high for today.
11 write  \n
Number of errors=<s,errors>. Corrected wpm=<s,wpm-errors,3.2>.
12 write \n
<c,zc.keys>Press DATA for statistics.<c,zc.text>
13 mode write
14 next words
15 back initial
16 back1 return
17 data plotstat
18
19 unit some
20 calc k=1
21 do findplc
22 branch l,2end,x
23 lsome
24 reserve common
25 branch zreturn,1ok,x

d16
1 at 3231
2 mode rewrite
3 write waiting...
4 pause .75,keys=all
5 at 3231
6 erase 10
7 transfr c,flt(nperson);i;1 $$ get lowest person
8 branch wpm>-vi,1some,2end
9 lok
10 *transfr c,flt(nperson);i;1 $$ get lowest person
11 *branch wpm>-vi,x,1end
12 branch wpm>=1000,1end,x
13 calc m=nperson
14 branch l,1end,x,1add
15 do findplc $$ k assumed set
16 branch l,1end,x,1add
17 deletes c,flt(1);m,1,k
18             c,t;lc
19 calc nperson=nperson-1
2B m=m-1
21 ladd
22 stoload
23 comload
24 pack alpha,,<t,wpm,4,3>
25 move 0,1,alpha,9,2 $$ guareenteed 2 0's
26 calc vi=-wpm
27 *transfr vi;c,flt(m);1
28 *transfr name;c,pn(m);2
29 *transfr course;c,pc(m);1
35 *transfr fake;c,pf(m);2
31 *transfr j;c,pa(m);1

d17
1 *sort c,f1t(1);m,1,1,60
2 * c,t;lc
3 calcc m>=maxpers-l,m=m-l,,
4 finds vi,c,f1t(l);m,l,l,60,k
5 calc k=abs(k)
6 inserts vi,c,f1t(1);m,1,k
7 fake,c,t;lc
8 *
9 stoload ncl,1,storagl $$ get stoload/comload back
16 comload nc(strtcom),l,lc*nshow+l
11 branch l,1end,1end,x
12 calcs nperson>=maxpers,nperson=maxpers,nperson+1
13 lend
14 release common
15 2end
16 goto noluck $3 not finished
17 *
18 *cstop*

d18
1 *
2 unit plotstat
3 stoload
4 comload
5 comload nc1,sstats,statsl
6 branch maxwm-1,x,lok
7 press back
8 stoload
9 comload
10 stoload nc1,1,storagl
11 comload nc(strtcom),1,lc*nshow+1
12 end help
13 1ok
14 data plotstat
15 gorigin 100,300
16 axes 400,200
17 *at 306
18 *write F\nR\nE\nQ\nU\nE\nN\nC\nY
19 at 40,488
20 write N\nU\nM\nB\nE\nR\n\nP\nE\nO\nP\nL\nE

d19
at 232,268
write Words Per Minute
scalex 110,10
scaley maxwm
labelx 10
labely 10**[int(log(maxwm))+(frac(log(maxwm))<.5)]
funct  cwmfreq(wpm, wpm=10,109,1
gorigin 100,50
axes  400,200
at 1906
write  E\nR\nR\nO\nR\n\nR\nA\nT\nE

d20
at 3130
write Words Per Minute
calc maxer = 0
doto 1maxer,wpm=10,109
branch cwmfreq(wpm)-1,1maxer,x
branch maxer-cerfreq(wpm)/cwmfreq(wpm),x,1maxer
            maxer=cerfreq(wpm)/cwmfreq(wpm)
1maxer
scalex  110,10
scaley maxer
labelx 10
labely 10**[int(log(maxer))+(frac(log(maxer))<.5)]
funct  cerfreq(wpm)/cwmfreq(wpm),wpm=1-,109,1
at 902
write N\nE\nX\nT\n\nF\nO\nR\n\nM\nO\nR\nE

d21
next scatter
stoload
comload
stoload nc1,1,storagl
comload nc(strtcom,1,lc*nshow+1
*
unit scatter
stoload
comload
comload nc1,sstats,statsl
gorigin 100,100
axes 400,400
at 704
write N\nU\nM\nB\nE\nR\n\nP\nE\nO\nP\nL\nE
*at 804
*write FREQUENCY
at 2930
write E R R O R  R A T E
scaley maxwm
scalex maxer
labely 10**[int(log(maxwm))+frac(log(maxum))<.5)]
labelx 10**[int(log(maxer))+frac(log(maxer))<.5)]
doto 1scat,wpm=10,109
graph cerfreq(wpm)/cwmfreq(wpm,cwmfreq(wpm),*

d23
1scat
stoload
comload
stoload nc1,1,storagl
comload nc(strtcom),1,lc*nshow+1
end help
*
unit statend
stoload
comload
comload nc1,sstats,statsl
branch wpm<=9.5$or$wpm>=109.5,1nostat,x
calc wmfreq(wpm)=wmfreq(wpm)+1
       erfreq(wpm)=erfreq(wpm)+errors
        cwmfreq(wpm)=cwmfreq(wpm)+1
        cerfreq(wpm)=cerfreq(wpm)+errors
branch maxwm-cwmfreq(wpm),x,1nostat
calc maxwm=cwmfreq(wpm)  $$ maximum wpm frequency
1nostat  $$ sorry but you are "fluke data" hahahahaha
stoload
comload
stoload nc1,1,storagl
comload nc(strtcom),1,lc*nshow+1

d24
*
unit findplc
***
* this initially finds someone in the list
***
do loadstor   $$ put names in storage
doto 777,k=k,npersopn
do  (work+1) > x,loadstor,x
calc  work=work+1
***
* NOTE  if the defines- for I,j,l are changed, this will no longer work
***
branch nc(pn(work))-name,777,x,777
branch nc(pn1(work))-name1,777,x,777
branch nc(pc(work))-course,777,x,777
transfr c,flt(k);I;1
calc  l = (-vi > wpm)  $$ -1 = don't update, 0 = do it.
goto q
777
calc l=1   $$ his new record should go on list
*
unit loadstor
calc x = nperson-k  $$ no. of people left in list
calcs  x*lc > (storagl-1),x = int((storagl-1)/lc),,
transfr c,pf(k);s,blkat+2;lc*x
calc work = 0
*

