# do not edit this file, it will be overwritten on update

# Don't process any events if anaconda is running as anaconda brings up
# raid devices manually
ENV{ANACONDA}=="?*", GOTO="md_inc_end"
# assemble md arrays

# In Fedora we handle the raid components in 65-md-incremental.rules so that
# we can do things like honor anaconda command line options and such
GOTO="md_inc_end"

SUBSYSTEM!="block", GOTO="md_inc_end"

# skip non-initialized devices
ENV{SYSTEMD_READY}=="0", GOTO="md_inc_end"

# handle potential components of arrays (the ones supported by md)
ENV{ID_FS_TYPE}=="linux_raid_member", GOTO="md_inc"

# "noiswmd" on kernel command line stops mdadm from handling
#  "isw" (aka IMSM - Intel RAID).
# "nodmraid" on kernel command line stops mdadm from handling
#  "isw" or "ddf".
IMPORT{cmdline}="noiswmd"
IMPORT{cmdline}="nodmraid"

ENV{nodmraid}=="?*", GOTO="md_inc_end"
ENV{ID_FS_TYPE}=="ddf_raid_member", GOTO="md_inc"
ENV{noiswmd}=="?*", GOTO="md_inc_end"
ENV{ID_FS_TYPE}=="isw_raid_member", ACTION!="change", GOTO="md_inc"
GOTO="md_inc_end"

LABEL="md_inc"

# remember you can limit what gets auto/incrementally assembled by
# mdadm.conf(5)'s 'AUTO' and selectively whitelist using 'ARRAY'
#-- ACTION=="add|change", PROGRAM="/usr/bin/bash -c '/usr/bin/echo 64-md-raid-assembly.rules /usr/sbin/mdadm --incremental --export $devnode --offroot $env{DEVLINKS} > /dev/kmsg'"

ACTION=="add|change", PROGRAM="/m4debug/M4-ECHO-SECOND 64-md-raid-assembly.rules before mdadm, print out variables k='%k' n='%n' name='$name' devnode='$devnode'"
ACTION=="add|change", IMPORT{program}=="/usr/sbin/mdadm --incremental --export $devnode --offroot $env{DEVLINKS}"
ACTION=="add|change", PROGRAM="/m4debug/M4-ECHO-SECOND 64-md-raid-assembly.rules after mdadm, print out variables k='%k' n='%n' name='$name' devnode='$devnode'"

ACTION=="add|change", ENV{MD_STARTED}=="*unsafe*", ENV{MD_FOREIGN}=="no", ENV{SYSTEMD_WANTS}+="mdadm-last-resort@$env{MD_DEVICE}.timer"
ACTION=="add|change", PROGRAM="/m4debug/M4-ECHO-SECOND 64-md-raid-assembly.rules after SYSTEMD_WANTS, print out variables k='%k' n='%n' name='$name' devnode='$devnode'"

#-- ACTION=="add|change", PROGRAM="/usr/bin/bash -c '/usr/bin/echo 64-md-raid-assembly.rules before ending devnode $devnode MD_STARTED $env{MD_STARTED} SYSTEMD_WANTS $env{SYSTEMD_WANTS} MD_FOREIGN $env{MD_FOREIGN} devnode $devnode name $name ID_FS_TYPE $env{ID_FS_TYPE} > /dev/kmsg'"
#-- ACTION=="add|change", PROGRAM="/usr/bin/bash -c 'builtin typeset -p > /dev/kmsg'"
#-- ACTION=="add|change", PROGRAM="/m4debug/M4-ECHO-SECOND 64-md-raid-assembly.rules k='%k' n='%n' M='%M' m='%m' P='%P' id='%b' driver='$driver' name='$name' root='$root' sys='$sys' devnode='$devnode' p='%p' links='$links'"

ACTION=="remove", ENV{ID_PATH}=="?*", RUN+="/usr/sbin/mdadm -If $name --path $env{ID_PATH}"
ACTION=="remove", ENV{ID_PATH}!="?*", RUN+="/usr/sbin/mdadm -If $name"
ACTION=="add", PROGRAM="/usr/bin/bash -c '/usr/bin/echo add end of 64-md-raid-assembly.rules devnode $devnode name $name SYSTEMD_WANTS $env{SYSTEMD_WANTS} > /dev/kmsg'"
ACTION!="add", PROGRAM="/usr/bin/bash -c '/usr/bin/echo NOT add end of 64-md-raid-assembly.rules devnode $devnode name $name SYSTEMD_WANTS $env{SYSTEMD_WANTS} > /dev/kmsg'"

LABEL="md_inc_end"
