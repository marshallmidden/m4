# Start of Makefile
#-----------------------------------------------------------------------------
OS := ${shell uname}
#-----------------------------------------------------------------------------
#-- CC = gcc
#-----------------------------------------------------------------------------
CFLAGS   +=-g
#-- CFLAGS   +=-O0
ifneq (${OS},Darwin)
CFLAGS   +=-O4
else
CFLAGS   +=-O3
endif
# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
CFLAGS += -W
CFLAGS += -Wall
CFLAGS += -Werror
CFLAGS += -Wextra
CFLAGS += -Wno-system-headers
#++? CFLAGS += -Wpedantic
# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
#-- CFLAGS += -Wabi			# Warn about things that will change when compiling with an ABI-compliant compiler.
#-- CFLAGS += -Wabi-tag		# Warn if a subobject has an abi_tag attribute that the complete object type does not have.
CFLAGS += -Waddress		# Warn about suspicious uses of memory addresses.
# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# CFLAGS += -Wtraditional		## broken are many typical usages.
CFLAGS += -Waggregate-return

CFLAGS += -Waggressive-loop-optimizations	# Warn if a loop with constant number of iterations triggers undefined behavior.
#-- CFLAGS += -Waligned-new		# Warn about 'new' of type with extended alignment without -faligned-new. 
CFLAGS += -Walloc-zero		# Warn for calls to allocation functions that specify zero bytes.
CFLAGS += -Walloca		# Warn on any use of alloca.
CFLAGS += -Warray-bounds=1
#++  CFLAGS += -Warray-bounds=2	# 	Warn about arrays accessed through pointers
#-- CFLAGS += -Wassign-intercept	# Warn whenever an Objective-C assignment is being intercepted by the garbage collector.
CFLAGS += -Wattribute-alias	# Warn about type safety and similar errors in attribute alias and related.
CFLAGS += -Wattributes
CFLAGS += -Wbad-function-cast
CFLAGS += -Wbool-compare		# Warn about boolean expression compared with an integer value different from true/ false.
CFLAGS += -Wbool-operation	# Warn about certain operations on boolean expressions.
CFLAGS += -Wbuiltin-declaration-mismatch	# Warn when a built-in function is declared with the wrong signature.
CFLAGS += -Wbuiltin-macro-redefined	# Warn when a built-in preprocessor macro is undefined or redefined.
CFLAGS += -Wc++-compat		# Warn about C constructs that are not in the common subset of C and C++.
CFLAGS += -Wc90-c99-compat	# Warn about features not present in ISO C90, but present in ISO C99.
CFLAGS += -Wc99-c11-compat	# Warn about features not present in ISO C99, but present in ISO C11.
CFLAGS += -Wcast-align
CFLAGS += -Wcast-align=strict	# Warn about pointer casts which increase alignment.
CFLAGS += -Wcast-function-type	# Warn about casts between incompatible function types.
CFLAGS += -Wcast-qual
#-- CFLAGS += -Wcatch-value
CFLAGS += -Wchar-subscripts
CFLAGS += -Wchkp			# Warn about memory access errors found by Pointer Bounds Checker.
#-- CFLAGS += -Wclass-memaccess	# Warn for unsafe raw memory writes to objects of class types.
CFLAGS += -Wclobbered		# Warn about variables that might be changed by "longjmp" or "vfork".
CFLAGS += -Wcomment
CFLAGS += -Wcomments
#-- CFLAGS += -Wconditionally-supported	# Warn for conditionally-supported constructs.
CFLAGS += -Wconversion		# Warn for implicit type conversions that may change a value.
#-- CFLAGS += -Wconversion-null	# Warn for converting NULL from/to a non-pointer type.
CFLAGS += -Wcoverage-mismatch	# Warn in case profiles in -fprofile-use do not match.
CFLAGS += -Wcpp			# Warn when a #warning directive is encountered.
#-- CFLAGS += -Wctor-dtor-privacy	# Warn when all constructors and destructors are private.
CFLAGS += -Wdangling-else		# Warn about dangling else.
CFLAGS += -Wdate-time		# Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage.
CFLAGS += -Wdeclaration-after-statement	# Warn when a declaration is found after a statement.
#-- CFLAGS += -Wdelete-incomplete	# Warn when deleting a pointer to incomplete type.
#-- CFLAGS += -Wdelete-non-virtual-dtor	# Warn about deleting polymorphic objects with non-virtual destructors.
CFLAGS += -Wdeprecated		# Warn if a deprecated compiler feature, class, method, or field is used.
CFLAGS += -Wdeprecated-declarations
CFLAGS += -Wdesignated-init	# Warn about positional initialization of structs requiring designated initializers.
CFLAGS += -Wdisabled-optimization
CFLAGS += -Wdiscarded-array-qualifiers	# Warn if qualifiers on arrays which are pointer targets are discarded.
CFLAGS += -Wdiscarded-qualifiers	# Warn if type qualifiers on pointers are discarded.
CFLAGS += -Wdiv-by-zero		# Warn about compile-time integer division by zero.
CFLAGS += -Wdouble-promotion	# Warn about implicit conversions from "float" to "double".
CFLAGS += -Wduplicate-decl-specifier	# Warn when a declaration has duplicate const, volatile, restrict or _Atomic specifier.
CFLAGS += -Wduplicated-branches	# Warn about duplicated branches in if-else statements.
CFLAGS += -Wduplicated-cond	# Warn about duplicated conditions in an if-else-if chain.
#-- CFLAGS += -Weffc++		# Warn about violations of Effective C++ style rules.
CFLAGS += -Wempty-body		# Warn about an empty body in an if or else statement.
CFLAGS += -Wendif-labels
CFLAGS += -Wenum-compare		# Warn about comparison of different enum types.
CFLAGS += -Werror=implicit-function-declaration
CFLAGS += -Wexpansion-to-defined	# Warn if "defined" is used outside #if.
#-- CFLAGS += -Wextra-semi		# Warn about semicolon after in-class function definition.
CFLAGS += -Wfloat-conversion	# Warn for implicit type conversions that cause loss of floating point precision.
CFLAGS += -Wfloat-equal
CFLAGS += -Wformat
CFLAGS += -Wformat-contains-nul	# Warn about format strings that contain NUL bytes.
CFLAGS += -Wformat-extra-args	# Warn if passing too many arguments to a function for its format string.
CFLAGS += -Wformat-nonliteral
CFLAGS += -Wformat-overflow=1
#++  CFLAGS += -Wformat-overflow=2
CFLAGS += -Wformat-security
CFLAGS += -Wformat-signedness	# Warn about sign differences with format functions.
CFLAGS += -Wformat-truncation=1
#++ CFLAGS += -Wformat-truncation=2
CFLAGS += -Wformat-y2k		# Warn about strftime formats yielding 2-digit years.
CFLAGS += -Wformat-zero-length	# Warn about zero-length formats.
CFLAGS += -Wformat=1		# Warn about printf/scanf/strftime/strfmon format string anomalies.
#++ CFLAGS += -Wformat=2		# Warn about printf/scanf/strftime/strfmon format string anomalies.
CFLAGS += -Wframe-address		# Warn when __builtin_frame_address or __builtin_return_address is used unsafely.
CFLAGS += -Wfree-nonheap-object	# Warn when attempting to free a non-heap object.
CFLAGS += -Whsa			# Warn when a function cannot be expanded to HSAIL.
CFLAGS += -Wif-not-aligned	# Warn when the field in a struct is not aligned.
CFLAGS += -Wignored-attributes	# Warn whenever attributes are ignored.
CFLAGS += -Wignored-qualifiers	# Warn whenever type qualifiers are ignored.
CFLAGS += -Wimplicit		# Warn about implicit declarations.
CFLAGS += -Wimplicit-fallthrough=3	# 0,1,2,3,4,5
CFLAGS += -Wimplicit-function-declaration	# Warn about implicit function declarations.
CFLAGS += -Wimplicit-int
CFLAGS += -Wincompatible-pointer-types	# Warn when there is a conversion between pointers that have incompatible types.
#-- CFLAGS += -Winherited-variadic-ctor	# Warn about C++11 inheriting constructors when the base has a variadic constructor.
CFLAGS += -Winit-self		# Warn about variables which are initialized to themselves.
CFLAGS += -Winline
CFLAGS += -Wlogical-op
CFLAGS += -Wint-conversion	# Warn about incompatible integer to pointer and pointer to integer conversions.
CFLAGS += -Wint-in-bool-context	# Warn for suspicious integer expressions in boolean context.
CFLAGS += -Wint-to-pointer-cast	# Warn when there is a cast to a pointer from an integer of a different size.
CFLAGS += -Winvalid-memory-model	# Warn when an atomic memory model parameter is known to be outside the valid range.
#-- CFLAGS += -Winvalid-offsetof	# Warn about invalid uses of the "offsetof" macro.
CFLAGS += -Winvalid-pch		# Warn about PCH files that are found but not used.
CFLAGS += -Wjump-misses-init	# Warn when a jump misses a variable initialization.
#-- CFLAGS += -Wliteral-suffix	# Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore.
CFLAGS += -Wlogical-not-parentheses	# Warn when logical not is used on the left hand side operand of a comparison.
#?? CFLAGS += -Wlong-long		# Do not warn about using "long long" when -pedantic.
CFLAGS += -Wlto-type-mismatch	# During link time optimization warn about mismatched types of global declarations.
CFLAGS += -Wmain			# Warn about suspicious declarations of "main".
CFLAGS += -Wmaybe-uninitialized	# Warn about maybe uninitialized automatic variables.
CFLAGS += -Wmemset-elt-size	# Warn about suspicious calls to memset where the third argument contains the number of elements not multiplied by the element size.
CFLAGS += -Wmemset-transposed-args	# Warn about suspicious calls to memset where the third argument is constant literal zero and the second is not.
CFLAGS += -Wmisleading-indentation	# Warn when the indentation of the code does not reflect the block structure.
CFLAGS += -Wmissing-attributes	# Warn about declarations of entities that may be missing attributes that related entities have been declared with it.
CFLAGS += -Wmissing-braces
CFLAGS += -Wmissing-declarations
CFLAGS += -Wmissing-field-initializers	# Warn about missing fields in struct initializers.
CFLAGS += -Wmissing-format-attribute
CFLAGS += -Wmissing-include-dirs	# Warn about user-specified include directories that do not exist.
CFLAGS += -Wmissing-noreturn
CFLAGS += -Wmissing-parameter-type	# Warn about function parameters declared without a type specifier in K&R-style functions.
CFLAGS += -Wmissing-prototypes
CFLAGS += -Wmultichar
#-- CFLAGS += -Wmultiple-inheritance	# Warn on direct multiple inheritance.
CFLAGS += -Wmultistatement-macros	# Warn about unsafe macros expanding to multiple statements used as a body of a clause such as if, else, while, switch, or for.
#-- CFLAGS += -Wnamespaces		# Warn on namespace definition.
CFLAGS += -Wnarrowing		# Warn about narrowing conversions within { } that are ill-formed in C++11.
CFLAGS += -Wnested-externs
#-- CFLAGS += -Wnoexcept		# Warn when a noexcept expression evaluates to false even though the expression can't actually throw.
#-- CFLAGS += -Wnoexcept-type		# Warn if C++17 noexcept function type will change the mangled name of a symbol.
#-- CFLAGS += -Wnon-template-friend	# Warn when non-templatized friend functions are declared within a template.
#-- CFLAGS += -Wnon-virtual-dtor	# Warn about non-virtual destructors.
CFLAGS += -Wnonnull		# Warn about NULL being passed to argument slots marked as requiring non-NULL.
CFLAGS += -Wnonnull-compare	# Warn if comparing pointer parameter with nonnull attribute with NULL.
CFLAGS += -Wnormalized
CFLAGS += -Wnull-dereference	# Warn if dereferencing a NULL pointer may lead to erroneous or undefined behavior.
CFLAGS += -Wodr			# Warn about some C++ One Definition Rule violations during link time optimization.
#-- CFLAGS += -Wold-style-cast	# Warn if a C-style cast is used in a program.
CFLAGS += -Wold-style-declaration	# Warn for obsolescent usage in a declaration.
CFLAGS += -Wold-style-definition	# Warn if an old-style parameter definition is used.
CFLAGS += -Wopenmp-simd		# Warn if a simd directive is overridden by the vectorizer cost model.
CFLAGS += -Woverflow
CFLAGS += -Woverlength-strings	# Warn if a string is longer than the maximum portable length specified by the standard.
#-- CFLAGS += -Woverloaded-virtual	# Warn about overloaded virtual function names.
CFLAGS += -Woverride-init		# Warn about overriding initializers without side effects.
CFLAGS += -Woverride-init-side-effects	# Warn about overriding initializers with side effects.
CFLAGS += -Wpacked		# Warn when the packed attribute has no effect on struct layout.
CFLAGS += -Wpacked-bitfield-compat	# Warn about packed bit-fields whose offset changed in GCC 4.4.
CFLAGS += -Wpacked-not-aligned	# Warn when fields in a struct with the packed attribute are misaligned.
CFLAGS += -Wpadded		# Warn when padding is required to align structure members.
CFLAGS += -Wparentheses
#-- CFLAGS += -Wpmf-conversions       # Warn when converting the type of pointers to member functions.
CFLAGS += -Wpointer-arith
CFLAGS += -Wpointer-compare
CFLAGS += -Wpointer-sign
CFLAGS += -Wpointer-to-int-cast
CFLAGS += -Wpragmas		# Warn about misuses of pragmas.
#-- CFLAGS += -Wproperty-assign-default	# Warn if a property for an Objective-C object has no assign semantics specified.
#-- CFLAGS += -Wprotocol		# Warn if inherited methods are unimplemented.
CFLAGS += -Wredundant-decls
#-- CFLAGS += -Wregister		# Warn about uses of register storage specifier.
#-- CFLAGS += -Wreorder		# Warn when the compiler reorders code.
CFLAGS += -Wrestrict		# Warn when an argument passed to a restrict-qualified parameter aliases with another argument.
CFLAGS += -Wreturn-local-addr	# Warn about returning a pointer/reference to a local or temporary variable.
CFLAGS += -Wreturn-type
CFLAGS += -Wscalar-storage-order	# Warn on suspicious constructs involving reverse scalar storage order.
#-- CFLAGS += -Wselector		# Warn if a selector has multiple methods.
CFLAGS += -Wsequence-point	# Warn about possible violations of sequence point rules.
#-- CFLAGS += -Wshadow-ivar		# Warn if a local declaration hides an instance variable.
CFLAGS += -Wshadow=compatible-local
CFLAGS += -Wshadow=global		# Warn when one variable shadows another.
CFLAGS += -Wshadow=local
CFLAGS += -Wsign-compare
CFLAGS += -Wsign-conversion       # Warn for implicit type conversions between signed and unsigned integers.
#-- CFLAGS += -Wsign-promo		# Warn when overload promotes from unsigned to signed.
#-- CFLAGS += -Wsized-deallocation	# Warn about missing sized deallocation functions.
CFLAGS += -Wsizeof-array-argument	# Warn when sizeof is applied on a parameter declared as an array.
CFLAGS += -Wsizeof-pointer-div	# Warn about suspicious divisions of two sizeof expressions that don't work correctly with pointers.
CFLAGS += -Wsizeof-pointer-memaccess	# Warn about suspicious length parameters to certain string functions if the argument uses sizeof.
CFLAGS += -Wstack-protector	# Warn when not issuing stack smashing protection for some reason.
CFLAGS += -Wstrict-aliasing=3	# Warn about code which might break strict aliasing rules.
#-- CFLAGS += -Wstrict-null-sentinel	# Warn about uncasted NULL used as sentinel.
CFLAGS += -Wstrict-overflow	# Warn about optimizations that assume that signed overflow is undefined.
CFLAGS += -Wstrict-overflow=5
CFLAGS += -Wstrict-prototypes	# Warn about unprototyped function declarations.
#-- CFLAGS += -Wstrict-selector-match	# Warn if type signatures of candidate methods do not match exactly.
CFLAGS += -Wstringop-overflow=4
CFLAGS += -Wstringop-truncation	# Warn about truncation in string manipulation functions like strncat and strncpy.
#-- CFLAGS += -Wsubobject-linkage	# Warn if a class type has a base or a field whose type uses the anonymous namespace or depends on a type with no linkage.
CFLAGS += -Wsuggest-attribute=cold	# Warn about functions which might be candidates for __attribute__((cold)).
CFLAGS += -Wsuggest-attribute=const	# Warn about functions which might be candidates for __attribute__((const)).
CFLAGS += -Wsuggest-attribute=format
CFLAGS += -Wsuggest-attribute=malloc	# Warn about functions which might be candidates for __attribute__((malloc)).
CFLAGS += -Wsuggest-attribute=noreturn
CFLAGS += -Wsuggest-attribute=pure	# Warn about functions which might be candidates for __attribute__((pure)).
CFLAGS += -Wsuggest-final-methods	# Warn about C++ virtual methods where adding final keyword would improve code quality.
CFLAGS += -Wsuggest-final-types	# Warn about C++ polymorphic types where adding final keyword would improve code quality.
#-- CFLAGS += -Wsuggest-override	# Suggest that the override keyword be used when the declaration of a virtual function overrides another.
CFLAGS += -Wswitch-bool		# Warn about switches with boolean controlling expression.
CFLAGS += -Wswitch-default	# Warn about enumerated switches missing a "default:" statement.
CFLAGS += -Wswitch-enum
CFLAGS += -Wswitch-unreachable	# Warn about statements between switch's controlling expression and the first case.
CFLAGS += -Wsync-nand		# Warn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used.
CFLAGS += -Wtautological-compare	# Warn if a comparison always evaluates to true or false.
#-- CFLAGS += -Wtemplates		# Warn on primary template declaration.
#-- CFLAGS += -Wterminate		# Warn if a throw expression will always result in a call to terminate().
CFLAGS += -Wtrampolines		# Warn whenever a trampoline is generated.
CFLAGS += -Wtrigraphs
CFLAGS += -Wtype-limits		# Warn if a comparison is always true or always false due to the limited range of the data type.
#-- CFLAGS += -Wundeclared-selector	# Warn about @selector()s without previously declared methods.
CFLAGS += -Wundef
CFLAGS += -Wuninitialized
CFLAGS += -Wunknown-pragmas
CFLAGS += -Wunreachable-code
CFLAGS += -Wunsuffixed-float-constants	# Warn about unsuffixed float constants.
CFLAGS += -Wunused-but-set-parameter	# Warn when a function parameter is only set, otherwise unused.
CFLAGS += -Wunused-but-set-variable	# Warn when a variable is only set, otherwise unused.
CFLAGS += -Wunused-const-variable=1
CFLAGS += -Wunused-function
CFLAGS += -Wunused-label
CFLAGS += -Wunused-local-typedefs	# Warn when typedefs locally defined in a function are not used.
CFLAGS += -Wunused-macros		# Warn about macros defined in the main file that are not used.
CFLAGS += -Wunused-parameter
CFLAGS += -Wunused-result         # Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value.
CFLAGS += -Wunused-value
CFLAGS += -Wunused-variable
#-- CFLAGS += -Wuseless-cast		# Warn about useless casts.
CFLAGS += -Wvarargs		# Warn about questionable usage of the macros used to retrieve variable arguments.
CFLAGS += -Wvariadic-macros	# Warn about using variadic macros.
CFLAGS += -Wvector-operation-performance	# Warn when a vector operation is compiled outside the SIMD.
#-- CFLAGS += -Wvirtual-inheritance	# Warn on direct virtual inheritance.
#-- CFLAGS += -Wvirtual-move-assign	# Warn if a virtual base has a non-trivial move assignment operator.
CFLAGS += -Wvla			# Warn if a variable length array is used.
CFLAGS += -Wvolatile-register-var	# Warn when a register variable is declared volatile.
CFLAGS += -Wwrite-strings
#-- CFLAGS += -Wzero-as-null-pointer-constant	# Warn when a literal '0' is used as null pointer.

#-----------------------------------------------------------------------------
LD = ${CC}
LDLIBS += -lpthread
# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
LDFLAGS += -m64
ifneq (${OS},Darwin)
# Optimize output file
LDFLAGS += -Xlinker -O
# Strip symbols in discarded sections
LDFLAGS += -Xlinker --strip-discarded
# Do not allow unresolved references in object files
LDFLAGS += -Xlinker --no-undefined
# Warn about duplicate common symbols
LDFLAGS += -Xlinker --warn-common
# Warn if global constructors/destructors are seen
LDFLAGS += -Xlinker --warn-constructors
# Warn if the multiple GP values are used
LDFLAGS += -Xlinker --warn-multiple-gp
# Warn only once per undefined symbol
LDFLAGS += -Xlinker --warn-once
# Report unresolved symbols as errors
LDFLAGS += -Xlinker --error-unresolved-symbols
# Treat warnings as errors
LDFLAGS += -Xlinker --fatal-warnings
# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Remove unused sections (on some targets)
LDFLAGS += -Xlinker --gc-sections
LDFLAGS += -Xlinker --unresolved-symbols=report-all
# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# Check section addresses for overlaps (default)
LDFLAGS += -Xlinker --check-sections
# Discard temporary local symbols (default)
LDFLAGS += -Xlinker --discard-locals
endif
#-----------------------------------------------------------------------------
ifdef DEBUG
  CFLAGS += -g
  LDFLAGS += -g
endif
#-----------------------------------------------------------------------------
TARGETS = thrdtest heavy shutdown libpool.so libpool.a
#-----------------------------------------------------------------------------
.PHONY: help
help:
	@ echo 'Targets:'
	@ echo '  all     - compile all targets.'
	@ echo "  TARGETS: ${TARGETS}"
	@ echo '  clean   - remove executables, objects, and libraries.'
	@ echo '  tests   - run the tests.'
#-----------------------------------------------------------------------------
.PHONY: all
all: $(TARGETS)
#-----------------------------------------------------------------------------
POOL_SO = libpool.so
LDLIBS += ${POOL_SO}
#-----------------------------------------------------------------------------
%.o: %.c
	@ echo "  CC $@"
	@ ${CC} -c ${CFLAGS} $<
%: %.o
	@ echo "  LD $@"
	@ ${LD} -o $@ ${CFLAGS} ${LDFLAGS} $< ${LDLIBS}
#-----------------------------------------------------------------------------
SHARED = ${CC} -fPIC ${CFLAGS}
%.so: %.o
	@ echo "  CC SHARED $@"
	@ ${SHARED} -shared -o $@ $<
#-----------------------------------------------------------------------------
${TARGETS}: Makefile
#-----------------------------------------------------------------------------
pool.c: pool.h
#-----------------------------------------------------------------------------
shutdown:   shutdown.o pool.o libpool.so
thrdtest:   thrdtest.o pool.o libpool.so
heavy:      heavy.o pool.o libpool.so
#-----------------------------------------------------------------------------
pool.o:     pool.c pool.h
thrdtest.o: thrdtest.c pool.h
heavy.o:    heavy.c pool.h
#-----------------------------------------------------------------------------
libpool.so: pool.c pool.h
#-----------------------------------------------------------------------------
libpool.o: pool.c pool.h
	@ echo "  CC -fPIC $@"
	@ ${SHARED} -c -o $@ $<
#-----------------------------------------------------------------------------
libpool.a: libpool.o
	@ echo "  AR $@"
	@ ar rcs $@ $^
#-----------------------------------------------------------------------------
.PHONY: clean
clean:
	rm -f $(TARGETS) *~ *.o
#-----------------------------------------------------------------------------
.PHONY: tests
tests: $(TARGETS)
	./shutdown
	./thrdtest
	./heavy
#-----------------------------------------------------------------------------
# End of Makefile
