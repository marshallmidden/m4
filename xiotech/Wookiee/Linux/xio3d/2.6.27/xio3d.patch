# $Id: xio3d.patch 48035 2008-04-09 21:14:28Z mdr $

--- a/drivers/char/Kconfig	2004-08-04 10:14:42.000000000 -0500
+++ obj/drivers/char/Kconfig	2004-08-05 11:05:14.193420190 -0500
@@ -1065,6 +1065,28 @@
 	  exposed to the user.  If this applies to your hardware,
 	  say N here.
 
+config XIO3D
+	tristate "Xiotech driver support"
+	depends on X86_64 || X86
+	default n
+	select HUGETLBFS
+	help
+	  Provide driver support for the Xiotech storage application.
+
+config XIO3D_3000
+	bool "Xiotech 3D model 3000"
+	depends on XIO3D
+	default n
+	help
+	  Build support for Xiotech 3D model 3000.
+
+config XIO_7000
+	bool "Xiotech Emprise model 7000"
+	depends on XIO3D
+	default n
+	help
+	  Build support for Xiotech Emprise model 7000.
+
 config HANGCHECK_TIMER
 	tristate "Hangcheck timer"
 	depends on X86 || IA64 || PPC64 || S390
--- a/drivers/char/Makefile	2004-08-04 10:14:42.000000000 -0500
+++ obj/drivers/char/Makefile	2004-08-05 11:08:05.151981713 -0500
@@ -102,6 +102,8 @@
 obj-$(CONFIG_AGP)		+= agp/
 obj-$(CONFIG_PCMCIA)		+= pcmcia/
 obj-$(CONFIG_IPMI_HANDLER)	+= ipmi/
+obj-$(CONFIG_XIO3D) += xio3d.o
+CFLAGS_xio3d.o := -Wall -Werror
 
 obj-$(CONFIG_HANGCHECK_TIMER)	+= hangcheck-timer.o
 obj-$(CONFIG_TCG_TPM)		+= tpm/
--- a/mm/hugetlb.c
+++ b/mm/hugetlb.c
@@ -516,6 +516,18 @@ struct hstate *size_to_hstate(unsigned long size)
 	return NULL;
 }
 
+struct page *get_huge_page(void)
+{
+	struct page *page;
+
+	spin_lock(&hugetlb_lock);
+	page = dequeue_huge_page(&hstates[0]);
+	spin_unlock(&hugetlb_lock);
+	if (page)
+		set_page_refcounted(page);
+	return page;
+}
+
 static void free_huge_page(struct page *page)
 {
 	/*
--- a/include/linux/hugetlb.h
+++ b/include/linux/hugetlb.h
@@ -35,6 +35,7 @@
 int hugetlb_reserve_pages(struct inode *inode, long from, long to,
 						struct vm_area_struct *vma);
 void hugetlb_unreserve_pages(struct inode *inode, long offset, long freed);
+struct page *get_huge_page(void);
 
 extern unsigned long hugepages_treat_as_movable;
 extern const unsigned long hugetlb_zero, hugetlb_infinity;
