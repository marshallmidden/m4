This directory holds kernel driver source and a test program. Source files
here wind up being symbollically linked into a corresponding directory in
a build directory (there will be a different build directory for every
kernel version or configuration that we need to support).

This directory also holds two test programs:

test.c performs basic operations on the xio3d device, including mapping
shared memory, mapping device registers, registering for interrupts and
registering for events.

sendevt.c is used to send events to test.c.

Note that there is a subdirectory for each kernel revision to build, such
as 2.6.5-7.111.5. Each directory holds a patch script, which applies patches
to that kernel, any needed patch files, a mkdefs to provide some definitions
to the Makefile. Within these directories, the subdirectories obj and inst
are created. obj holds the patched kernel sources and the kernel objects.
inst holds the files that will makeup the tarball for that kernel, including
the kernel-related files as well as things like menu.lst.


For information on doing things with the Makefile:

% make help

make patch           - applies patches to kernel in build directory (the
                       source in /usr/src is NOT touched)
make oldconfig       - update kernel configuration file
make menuconfig      - uses curses-based program in interactively modify
                       the kernel configuration
make                 - the same as make clean; make tar

make kernel          - compiles the kernel

make kme             - runs KME (kme.sourceforge.net)
make tar             - creates kernel.tar.gz distribution file
make clean           - removes temporary files

make help            - prints this command summary

Variables specified on command line or in environment (or file KERNEL_VERSION):
    KERNVER          = Revision of kernel to build, e.g. 2.6.5-7.111
    KERNPATH         = Path to Linux kernel source directory, e.g. /usr/src

Use the "tar" target to make a distribution tar file containing the
kernel and a few other files.

The "kme" target runs a perl script to create a "kme_syms" file with
all the kernel and module symbols, and then launches "kme_cmd".  This
is a "kme" generated command file that displays private kernel data
structures helpful in debugging the module and the application.  Before
you can use it, you need to install kme.  (kme.sourceforge.net)

It is hoped the other targets are self explanatory.
