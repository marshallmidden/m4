diff -rup old/include/linux/sysctl.h new/include/linux/sysctl.h
--- old/include/linux/sysctl.h	2006-03-19 23:53:29.000000000 -0600
+++ new/include/linux/sysctl.h	2006-10-10 18:07:30.450675000 -0500
@@ -397,6 +397,7 @@ enum
 	NET_TCP_CONG_CONTROL=110,
 	NET_TCP_ABC=111,
 	NET_IPV4_IPFRAG_MAX_DIST=112,
+	NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 };
 
 enum {
diff -rup old/include/net/tcp.h new/include/net/tcp.h
--- old/include/net/tcp.h	2006-03-19 23:53:29.000000000 -0600
+++ new/include/net/tcp.h	2006-10-10 18:18:00.614366000 -0500
@@ -219,6 +219,7 @@ extern int sysctl_tcp_nometrics_save;
 extern int sysctl_tcp_moderate_rcvbuf;
 extern int sysctl_tcp_tso_win_divisor;
 extern int sysctl_tcp_abc;
+extern int sysctl_tcp_workaround_signed_windows;
 
 extern atomic_t tcp_memory_allocated;
 extern atomic_t tcp_sockets_allocated;
diff -rup old/net/ipv4/sysctl_net_ipv4.c new/net/ipv4/sysctl_net_ipv4.c
--- old/net/ipv4/sysctl_net_ipv4.c	2006-03-19 23:53:29.000000000 -0600
+++ new/net/ipv4/sysctl_net_ipv4.c	2006-10-10 18:03:25.626124000 -0500
@@ -664,7 +664,14 @@ ctl_table ipv4_table[] = {
 		.mode		= 0644,
 		.proc_handler	= &proc_dointvec,
 	},
-
+        {
+                .ctl_name       = NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS,
+                .procname       = "tcp_workaround_signed_windows",
+                .data           = &sysctl_tcp_workaround_signed_windows,
+                .maxlen         = sizeof(int),
+                .mode           = 0644,
+                .proc_handler   = &proc_dointvec
+        },
 	{ .ctl_name = 0 }
 };
 
diff -rup old/net/ipv4/tcp_output.c new/net/ipv4/tcp_output.c
--- old/net/ipv4/tcp_output.c	2006-08-08 16:36:40.000000000 -0500
+++ new/net/ipv4/tcp_output.c	2006-10-10 17:59:46.825084000 -0500
@@ -45,6 +45,11 @@
 /* People can turn this off for buggy TCP's found in printers etc. */
 int sysctl_tcp_retrans_collapse = 1;
 
+/* People can turn this on to  work with those rare, broken TCPs that
+ * interpret the window field as a signed quantity.
+ */
+int sysctl_tcp_workaround_signed_windows = 0;
+
 /* This limits the percentage of the congestion window which we
  * will allow a single TSO frame to consume.  Building TSO frames
  * which are too large can cause TCP streams to be bursty.
@@ -171,12 +176,18 @@ void tcp_select_initial_window(int __spa
 		space = (space / mss) * mss;
 
 	/* NOTE: offering an initial window larger than 32767
-	 * will break some buggy TCP stacks. We try to be nice.
-	 * If we are not window scaling, then this truncates
-	 * our initial window offering to 32k. There should also
-	 * be a sysctl option to stop being nice.
+	 * will break some buggy TCP stacks. If the admin tells us
+	 * it is likely we could be speaking with such a buggy stack
+	 * we will truncate our initial window offering to 32K-1
+	 * unless the remote has sent us a window scaling option,
+	 * which we interpret as a sign the remote TCP is not
+	 * misinterpreting the window field as a signed quantity.
 	 */
-	(*rcv_wnd) = min(space, MAX_TCP_WINDOW);
+	if (sysctl_tcp_workaround_signed_windows)
+		(*rcv_wnd) = min(space, MAX_TCP_WINDOW);
+	else
+		(*rcv_wnd) = space;
+
 	(*rcv_wscale) = 0;
 	if (wscale_ok) {
 		/* Set window scaling on max possible window
@@ -235,7 +246,7 @@ static u16 tcp_select_window(struct sock
 	/* Make sure we do not exceed the maximum possible
 	 * scaled window.
 	 */
-	if (!tp->rx_opt.rcv_wscale)
+	if (!tp->rx_opt.rcv_wscale && sysctl_tcp_workaround_signed_windows)
 		new_win = min(new_win, MAX_TCP_WINDOW);
 	else
 		new_win = min(new_win, (65535U << tp->rx_opt.rcv_wscale));
