diff -rubB obj-750/drivers/scsi/sas/sas_discover.c obj-750new/drivers/scsi/sas/sas_discover.c
--- obj-750/drivers/scsi/sas/sas_discover.c	2006-06-05 13:51:22.505808081 -0500
+++ obj-750new/drivers/scsi/sas/sas_discover.c	2006-06-02 16:36:08.000000000 -0500
@@ -1599,7 +1599,7 @@
 	disc->disc_thread = NULL;
 	spin_unlock(&disc->disc_event_lock);
 	up(&disc->disc_sema);
-
+        sas_ha->first_discovery_done =1;
 	return 0;
 }
 
diff -rubB obj-750/drivers/scsi/sas/sas_init.c obj-750new/drivers/scsi/sas/sas_init.c
--- obj-750/drivers/scsi/sas/sas_init.c	2006-06-05 13:51:16.560375867 -0500
+++ obj-750new/drivers/scsi/sas/sas_init.c	2006-06-02 16:36:08.000000000 -0500
@@ -57,7 +57,10 @@
 {
 	return sprintf(buf, "%llx\n", SAS_ADDR(sas_ha->sas_addr));
 }
-
+static ssize_t sas_ha_scan_show(struct sas_ha_struct *sas_ha, char *buf)
+{
+        return sprintf(buf,"%d\n",sas_ha->first_discovery_done);
+}
 /* ---------- SAS HA Class ---------- */
 
 #define to_sas_ha(_obj) container_of(to_kset(_obj),struct sas_ha_struct,ha_kset)
@@ -85,6 +88,7 @@
 static struct ha_attribute ha_attrs[] = {
 	__ATTR(ha_name, 0444, sas_ha_name_show, NULL),
 	__ATTR(device_name, 0444, sas_ha_addr_show, NULL),
+        __ATTR(first_scan_done, 0444, sas_ha_scan_show, NULL),
 	__ATTR_NULL,
 };
 
@@ -110,7 +114,7 @@
 		sas_ha->lldd_queue_size = 1;
 	else if (sas_ha->lldd_queue_size == -1)
 		sas_ha->lldd_queue_size = 128; /* Sanity */
-
+        sas_ha->first_discovery_done =0;
 	error = sas_register_scsi_host(sas_ha);
 	if (error) {
 		printk(KERN_NOTICE "couldn't register scsi host\n");
diff -rubB obj-750/include/scsi/sas/sas_class.h obj-750new/include/scsi/sas/sas_class.h
--- obj-750/include/scsi/sas/sas_class.h	2006-06-05 13:51:16.596372430 -0500
+++ obj-750new/include/scsi/sas/sas_class.h	2006-06-02 16:36:01.000000000 -0500
@@ -237,7 +237,7 @@
 	struct sas_event ha_events[HA_NUM_EVENTS];
 	u32              porte_mask; /* mask of phys for port events */
 	u32              phye_mask; /* mask of phys for phy events */
-
+        int              first_discovery_done;
 	struct scsi_core core;
 
 /* public: */
