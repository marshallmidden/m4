diff -u -r a/drivers/scsi/aic94xx/aic94xx_dump.c b/drivers/scsi/aic94xx/aic94xx_dump.c
--- a/drivers/scsi/aic94xx/aic94xx_dump.c	2006-10-16 11:20:17.692769611 -0500
+++ b/drivers/scsi/aic94xx/aic94xx_dump.c	2006-10-12 17:08:38.000000000 -0500
@@ -35,6 +35,7 @@
 #include "aic94xx_reg.h"
 #include "aic94xx_reg_def.h"
 #include "aic94xx_sas.h"
+#include "aic94xx_seq.h"
 
 #include "aic94xx_dump.h"
 
@@ -296,7 +297,7 @@
 	PRINT_CREG_8bit(asd_ha, ALTMODE);
 	PRINT_CREG_8bit(asd_ha, FLAG);
 	PRINT_CREG_8bit(asd_ha, ARP2INTCTL);
-	PRINT_CREG_16bit(asd_ha, STACK);
+//gw-debug	PRINT_CREG_16bit(asd_ha, STACK);
 	PRINT_CREG_16bit(asd_ha, PRGMCNT);
 	PRINT_CREG_16bit(asd_ha, ACCUM);
 	PRINT_CREG_16bit(asd_ha, SINDEX);
@@ -489,11 +490,14 @@
 	}
 }
 
-void asd_dump_lseq_state(struct asd_ha_struct *asd_ha, int lseq)
+void asd_dump_lseq_state(struct asd_ha_struct *asd_ha, int lseq, u8 pause)
 {
 	u32 moffs;
 	int mode;
 
+    if (pause)
+        asd_pause_lseq(asd_ha,(1<<lseq));
+
 	asd_printk("LSEQ %d STATE\n", lseq);
 
 	asd_printk("LSEQ%d: ARP2 REGISTERS\n", lseq);
@@ -506,7 +510,7 @@
 	PRINT_LREG_8bit(asd_ha, lseq, ALTMODE);
 	PRINT_LREG_8bit(asd_ha, lseq, FLAG);
 	PRINT_LREG_8bit(asd_ha, lseq, ARP2INTCTL);
-	PRINT_LREG_16bit(asd_ha, lseq, STACK);
+//gw-debug 	PRINT_LREG_16bit(asd_ha, lseq, STACK);
 	PRINT_LREG_16bit(asd_ha, lseq, PRGMCNT);
 	PRINT_LREG_16bit(asd_ha, lseq, ACCUM);
 	PRINT_LREG_16bit(asd_ha, lseq, SINDEX);
@@ -520,17 +524,25 @@
 	PRINT_LREG_16bit(asd_ha, lseq, NXTLADDR);
 
 	asd_printk("LSEQ%d: IOP REGISTERS\n", lseq);
-
+/* @EDC */
+#if 0
 	PRINT_LREG_32bit(asd_ha, lseq, MODECTL);
 	PRINT_LREG_32bit(asd_ha, lseq, DBGMODE);
 	PRINT_LREG_32bit(asd_ha, lseq, CONTROL);
 	PRINT_REG_32bit(asd_ha, BISTCTL0, LmBISTCTL0(lseq));
 	PRINT_REG_32bit(asd_ha, BISTCTL1, LmBISTCTL1(lseq));
-
+#endif
+/* @EDC */
 	asd_printk("LSEQ%d: CIO REGISTERS\n", lseq);
 	asd_printk("Mode common:\n");
 
+/* @EDC */
+#if 0
 	for (mode = 0; mode < 8; mode++) {
+#else
+	for (mode = 0; mode < 1; mode++) {
+#endif
+/* @EDC */
 		u32 lseq_cio_addr = LmSEQ_PHY_BASE(mode, lseq);
 		int i;
 
@@ -540,7 +552,13 @@
 	}
 
 	asd_printk("Mode unique:\n");
+/* @EDC */
+#if 0
 	for (mode = 0; mode < 8; mode++) {
+#else
+	for (mode = 0; mode < 2; mode++) {
+#endif
+/* @EDC */
 		u32 lseq_cio_addr = LmSEQ_PHY_BASE(mode, lseq);
 		int i;
 
@@ -559,7 +577,8 @@
 	PRINT_LMIP_word(asd_ha, lseq, Q_TGTXFR_TAIL);
 	PRINT_LMIP_byte(asd_ha, lseq, LINK_NUMBER);
 	PRINT_LMIP_byte(asd_ha, lseq, SCRATCH_FLAGS);
-	PRINT_LMIP_qword(asd_ha, lseq, CONNECTION_STATE);
+//gw-debug
+	PRINT_LMIP_dword(asd_ha, lseq, CONNECTION_STATE);
 	PRINT_LMIP_word(asd_ha, lseq, CONCTL);
 	PRINT_LMIP_byte(asd_ha, lseq, CONSTAT);
 	PRINT_LMIP_byte(asd_ha, lseq, CONNECTION_MODES);
@@ -739,6 +758,9 @@
 	PRINT_LMIP_dword(asd_ha, lseq, RCV_ID_TIMER_TERM_TS);
 	PRINT_LMIP_dword(asd_ha, lseq, RCV_FIS_TIMER_TERM_TS);
 	PRINT_LMIP_dword(asd_ha, lseq, DEV_PRES_TIMER_TERM_TS);
+
+    if (pause)
+        asd_unpause_lseq(asd_ha,(1<<lseq));
 }
 
 /**
@@ -891,12 +913,16 @@
 void asd_dump_seq_state(struct asd_ha_struct *asd_ha, u8 lseq_mask)
 {
 	int lseq;
+//gw-debug
+asd_pause_lseq(asd_ha,lseq_mask);
 
 	asd_dump_cseq_state(asd_ha);
 
 	if (lseq_mask != 0)
 		for_each_sequencer(lseq_mask, lseq_mask, lseq)
-			asd_dump_lseq_state(asd_ha, lseq);
+			asd_dump_lseq_state(asd_ha, lseq, 0);
+//gw-debug
+asd_unpause_lseq(asd_ha,lseq_mask);
 }
 
 void asd_dump_frame_rcvd(struct asd_phy *phy,
diff -u -r a/drivers/scsi/aic94xx/aic94xx_dump.h b/drivers/scsi/aic94xx/aic94xx_dump.h
--- a/drivers/scsi/aic94xx/aic94xx_dump.h	2006-10-16 11:20:17.603778076 -0500
+++ b/drivers/scsi/aic94xx/aic94xx_dump.h	2006-10-12 17:09:33.000000000 -0500
@@ -34,6 +34,7 @@
 void asd_dump_target_ddb(struct asd_ha_struct *asd_ha, u16 site_no);
 void asd_dump_scb_sites(struct asd_ha_struct *asd_ha);
 void asd_dump_seq_state(struct asd_ha_struct *asd_ha, u8 lseq_mask);
+void asd_dump_lseq_state(struct asd_ha_struct *asd_ha, int lseq, u8 pause);
 void asd_dump_frame_rcvd(struct asd_phy *phy,
 			 struct done_list_struct *dl);
 void asd_dump_scb_list(struct asd_ascb *ascb, int num);
@@ -46,6 +47,8 @@
 static inline void asd_dump_scb_sites(struct asd_ha_struct *asd_ha) { }
 static inline void asd_dump_seq_state(struct asd_ha_struct *asd_ha,
 				      u8 lseq_mask) { }
+static inline void asd_dump_lseq_state(struct asd_ha_struct *asd_ha,
+                      int lseq, u8 pause) { }
 static inline void asd_dump_frame_rcvd(struct asd_phy *phy,
 				       struct done_list_struct *dl) { }
 static inline void asd_dump_scb_list(struct asd_ascb *ascb, int num) { }
diff -u -r a/drivers/scsi/aic94xx/aic94xx.h b/drivers/scsi/aic94xx/aic94xx.h
--- a/drivers/scsi/aic94xx/aic94xx.h	2006-10-16 11:20:17.842755344 -0500
+++ b/drivers/scsi/aic94xx/aic94xx.h	2006-10-12 06:36:26.000000000 -0500
@@ -64,6 +64,7 @@
 
 #define AIC_LINK_MONITOR_ENABLE     1
 #define AIC_LINK_MONITOR_REC_LINK   0
+#define AIC_LINK_MONITOR_DUMP_SEQ   0
 
 #define DUMP_ON_REQ_DEV_RESET       0
 #define DUMP_LSEQ_ON_ARP2CIOPERR    0
diff -u -r a/drivers/scsi/aic94xx/aic94xx_hwi.c b/drivers/scsi/aic94xx/aic94xx_hwi.c
--- a/drivers/scsi/aic94xx/aic94xx_hwi.c	2006-10-16 11:20:17.846754963 -0500
+++ b/drivers/scsi/aic94xx/aic94xx_hwi.c	2006-10-12 17:07:45.000000000 -0500
@@ -1062,8 +1062,6 @@
 	asd_chip_reset(asd_ha);
 }
 
-extern void asd_dump_lseq_state(struct asd_ha_struct *asd_ha, int lseq);
-
 static inline void asd_arp2_err(struct asd_ha_struct *asd_ha, u32 dchstatus)
 {
 	int fault = 0;
@@ -1145,7 +1143,7 @@
 #if DUMP_LSEQ_ON_ARP2CIOPERR
                     asd_printk("%s: LSEQ%d arp2cioperr\n",
 					   pci_name(asd_ha->pcidev), lseq);
-                    asd_dump_lseq_state(asd_ha, lseq);
+                    asd_dump_lseq_state(asd_ha, lseq, 1);
                     fault = 1;
 #endif
                     ++asd_ha->phys[lseq].sas_phy.ecounts.arp2cioperr;
@@ -1156,7 +1154,7 @@
                     if ( asd_read_reg_dword(asd_ha, CARP2CTL) & PAUSED ) {
                         asd_printk("%s: LSEQ%d break3\n",
                                 pci_name(asd_ha->pcidev), lseq);
-                        asd_dump_lseq_state(asd_ha, lseq);
+                        asd_dump_lseq_state(asd_ha, lseq, 1);
                         fault = 1;
                     }
 #endif
@@ -1167,7 +1165,7 @@
                     if ( asd_read_reg_dword(asd_ha, CARP2CTL) & PAUSED ) {
                         asd_printk("%s: LSEQ%d break2\n",
                                 pci_name(asd_ha->pcidev), lseq);
-                        asd_dump_lseq_state(asd_ha, lseq);
+                        asd_dump_lseq_state(asd_ha, lseq, 1);
                         fault = 1;
                     }
 #endif
@@ -1178,7 +1176,7 @@
                     if ( asd_read_reg_dword(asd_ha, CARP2CTL) & PAUSED ) {
                         asd_printk("%s: LSEQ%d break1\n",
                                 pci_name(asd_ha->pcidev), lseq);
-                        asd_dump_lseq_state(asd_ha, lseq);
+                        asd_dump_lseq_state(asd_ha, lseq, 1);
                         fault = 1;
                     }
 #endif
@@ -1189,7 +1187,7 @@
                     if ( asd_read_reg_dword(asd_ha, CARP2CTL) & PAUSED ) {
                         asd_printk("%s: LSEQ%d break0\n",
                                 pci_name(asd_ha->pcidev), lseq);
-                        asd_dump_lseq_state(asd_ha, lseq);
+                        asd_dump_lseq_state(asd_ha, lseq, 1);
                         fault = 1;
                     }
 #endif
diff -u -r a/drivers/scsi/aic94xx/aic94xx_scb.c b/drivers/scsi/aic94xx/aic94xx_scb.c
--- a/drivers/scsi/aic94xx/aic94xx_scb.c	2006-10-16 11:20:17.863753346 -0500
+++ b/drivers/scsi/aic94xx/aic94xx_scb.c	2006-10-12 17:08:59.000000000 -0500
@@ -853,6 +853,9 @@
 #if AIC_LINK_MONITOR_ENABLE
 	if ( ascb->scb->header.opcode == CONTROL_PHY ) {
         struct control_phy *control_phy = &ascb->scb->control_phy;
+#if AIC_LINK_MONITOR_DUMP_SEQ		
+        asd_dump_lseq_state(ascb->ha, control_phy->phy_id, 1);
+#endif
 #if AIC_LINK_MONITOR_REC_LINK		
         if ( ascb->ha->hw_prof.enabled_phys & (1 << control_phy->phy_id) ) {
             ascb->ha->hw_prof.enabled_phys &= ~(1 << control_phy->phy_id);
diff -u -r a/drivers/scsi/sas/sas_discover.c b/drivers/scsi/sas/sas_discover.c
--- a/drivers/scsi/sas/sas_discover.c	2006-10-16 11:20:17.880751729 -0500
+++ b/drivers/scsi/sas/sas_discover.c	2006-10-16 08:59:09.779896375 -0500
@@ -35,6 +35,8 @@
 #include <scsi/sas/sas_task.h>
 #include <scsi/sas/sas_discover.h>
 
+static int sas_revalidate_domain(struct sas_port *port);
+
 /* ---------- Domain device attributes ---------- */
 
 ssize_t dev_show_type(struct domain_device *dev, char *page)
@@ -1612,8 +1614,20 @@
 {
 	int error = 0;
 
-	if (port->port_dev)
-		return 0;
+	if (port->port_dev){
+        switch (port->port_dev->dev_type) {
+            case EDGE_DEV:
+            case FANOUT_DEV:
+                return sas_revalidate_domain(port);
+                break;
+            case SAS_END_DEV:
+            case SATA_DEV:
+            case SATA_PM:
+            default:
+                return 0;
+                break;
+        }
+    }
 	else {
 		error = sas_get_port_device(port);
 		if (error)
@@ -2065,39 +2079,14 @@
 {
     enum scsi_device_state oldstate = scsi_dev->sdev_state;
     int res;
-    unsigned long flags;
     
     if (oldstate == state)
         return 0;
 
-    switch (state) {
-        case SDEV_BLOCK:
-                res = scsi_device_set_state(scsi_dev, state);
-                if (!res) {
-                    spin_lock_irqsave(scsi_dev->request_queue->queue_lock, flags);
-                    blk_stop_queue(scsi_dev->request_queue);
-                    spin_unlock_irqrestore(scsi_dev->request_queue->queue_lock, flags);
-                }
-            break;
-        
-        case SDEV_CANCEL:
-        case SDEV_RUNNING:
-            if (oldstate == SDEV_BLOCK) {
-                res = scsi_device_set_state(scsi_dev, state);
-                if (!res) {
-                    spin_lock_irqsave(scsi_dev->request_queue->queue_lock, flags);
-                    blk_start_queue(scsi_dev->request_queue);
-                    spin_unlock_irqrestore(scsi_dev->request_queue->queue_lock, flags);
-                }
-                break;
-            }
-            else if (oldstate == SDEV_CANCEL)
-                return 1;
-            /* fall through */
-        default:
-            res = scsi_device_set_state(scsi_dev, state);
-            break;
-    }
+    if (oldstate == SDEV_CANCEL)
+        res = 1;
+    else
+        res = scsi_device_set_state(scsi_dev, state);
 
     if (res)
         SAS_DPRINTK("%016llx: sas_set_scsi_state failed new %x, old %x\n",
@@ -2281,6 +2270,8 @@
 	        task->task_state_flags |= SAS_TASK_STATE_DONE;
             task->task_state_flags |= SAS_TASK_STATE_ABORTED;
 
+            task->task_status.stat = SAS_ABORTED_TASK;
+
             spin_unlock(&task->task_state_lock);
 
             if (task->uldd_task)
@@ -2342,12 +2333,14 @@
                     "state to SDEV_RUNNING\n",
                     SAS_ADDR(dev->sas_addr), dev);
     }
-
-    if ( options & SAS_DWT_BLOCKED ) {
-        spin_lock_irqsave(&dev->dwt.options_lock, flags);
-        dev->dwt.options &= ~SAS_DWT_BLOCKED;
-        spin_unlock_irqrestore(&dev->dwt.options_lock, flags);
+    
+    spin_lock_irqsave(&dev->dwt.options_lock, flags);
+    if ( !(dev->dwt.options & SAS_DWT_OPTION_PRE_REMOVE_DEV) ) {
+        if ( options & SAS_DWT_BLOCKED ) {
+            dev->dwt.options &= ~SAS_DWT_BLOCKED;
+        }
     }
+    spin_unlock_irqrestore(&dev->dwt.options_lock, flags);
     
     SAS_DPRINTK("%016llx: Task done for dev %p, options: %08x\n",
             SAS_ADDR(dev->sas_addr), dev, options);
@@ -2389,7 +2382,8 @@
     
     spin_lock_irqsave(&dev->dwt.options_lock, flags);
     
-    if ( dev->dwt.options & SAS_DWT_BLOCKED ) {
+    if ( (dev->dwt.options & SAS_DWT_BLOCKED) ||
+         (dev->dwt.options & SAS_DWT_OPTION_PRE_REMOVE_DEV) ) {
         spin_unlock_irqrestore(&dev->dwt.options_lock, flags);
         SAS_DPRINTK("%016llx: dev %p BLOCKED, options: %08x\n",
                 SAS_ADDR(dev->sas_addr), dev, options);
diff -u -r a/drivers/scsi/sas/sas_init.c b/drivers/scsi/sas/sas_init.c
--- a/drivers/scsi/sas/sas_init.c	2006-10-16 11:20:17.895750303 -0500
+++ b/drivers/scsi/sas/sas_init.c	2006-10-12 16:59:51.000000000 -0500
@@ -102,18 +102,13 @@
 extern int sas_discover_domain(struct sas_port *port);
 void sas_hae_restart(struct sas_ha_struct *sas_ha)
 {
-    int i;
     unsigned long flags;
-    int res;
 
     spin_lock_irqsave(&sas_ha->event_lock, flags);
     /* Clear the blocked state */
     sas_ha->state_flags &= ~SAS_HA_STATE_BLOCKED;
     spin_unlock_irqrestore(&sas_ha->event_lock, flags);
 
-	for (i = 0; i < sas_ha->num_phys; i++)
-		res = sas_discover_domain(sas_ha->sas_port[i]);
-    
     SAS_DPRINTK("%s: Re-initializing ddb entries\n", __FUNCTION__);
     sas_reinit_all_ha_ddbs(sas_ha);
     
diff -u -r a/drivers/scsi/sas/sas_scsi_host.c b/drivers/scsi/sas/sas_scsi_host.c
--- a/drivers/scsi/sas/sas_scsi_host.c	2006-10-16 11:20:17.906749256 -0500
+++ b/drivers/scsi/sas/sas_scsi_host.c	2006-10-13 06:28:57.000000000 -0500
@@ -859,14 +859,22 @@
         spin_unlock_irqrestore(&dev->io_list_lock,flags);
         
 	res = dev->port->ha->lldd_execute_task(task, 1, GFP_ATOMIC);
-        if (res)
-        {
-            SAS_DPRINTK("lldd_execute_task returned %02x task %p\n",res,task);
-            spin_lock_irqsave(&dev->io_list_lock,flags);
-            list_del_init(&task->dev_io_list);
-            spin_unlock_irqrestore(&dev->io_list_lock,flags);
+    if (res)
+    {
+        SAS_DPRINTK("lldd_execute_task returned %02x task %p\n",res,task);
+        spin_lock_irqsave(&dev->io_list_lock,flags);
+        list_del_init(&task->dev_io_list);
+        spin_unlock_irqrestore(&dev->io_list_lock,flags);
 
+        if (task->uldd_task) {
+            task->task_status.stat = res;
+            sata_xlate_err_codes(&task->task_status, qc->scsicmd);
+            ata_qc_complete(qc);
+            res = 0;
         }
+        
+        sas_free_task(task);
+    }
 out:
 	return res;
 }

