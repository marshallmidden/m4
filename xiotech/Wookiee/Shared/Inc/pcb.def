# $Id: pcb.def 147854 2010-09-20 14:49:35Z m4 $
#**********************************************************************
#
#  NAME: pcb.def (Process Control Block)
#
#  DESCRIPTION:
#
#       To provide a means of defining the Process Control Block (PCB)
#       definitions.
#
#  Copyright (c) 1996-2008 Xiotech Corporation.  All rights reserved.
#
#**********************************************************************

            @#ifndef _PCB_H_
            @#define _PCB_H_

            @#include "XIO_Types.h"

            @#ifdef __cplusplus
            @#pragma pack(push,1)
            @#endif


#
# --- Definitions -----------------------------------------------------
#

            @#ifdef CCB_RUNTIME_CODE
            #
            #   Provided so that we can use for CCB or PC use
            #
            @#endif /* CCB_RUNTIME_CODE */

#
# Note 1:   There is a dependency on these values (PROCEDURE_LEVELS,
#           PROCEDURE_STACK_SIZE & FRAME_SIZE)
#           in the "stack depth monitoring" code found in kernel.as. If they
#           change, be sure check that the stack monitor works correctly with
#           your new values.

.def FRAME      64      @#define FRAME_SIZE     @ Frame size

.ifdef FRONTEND         @#ifdef FRONTEND
.def PSTACK     512     @#define PROCEDURE_STACK_SIZE   @ Procedure stack size
.def PLEVELS    32      @#define PROCEDURE_LEVELS       @ Procedure levels
.else                   @#else
.ifdef BACKEND          @#ifdef BACKEND
.def PSTACK     0       @#define PROCEDURE_STACK_SIZE   @ Procedure stack size
.def PLEVELS    32      @#define PROCEDURE_LEVELS       @ Procedure levels
.else                   @#else
.def PSTACK     0x7000  @#define PROCEDURE_STACK_SIZE   @ Procedure stack size
.def PLEVELS    64      @#define PROCEDURE_LEVELS       @ Procedure levels
.endif                  @#endif /* BACKEND */
.endif                  @#endif /* FRONTEND */

#**
#*  @name   Process Control Block Status definitions

.def pcrdy      0x00    @#define PCB_READY          @ Ready status
.def pcnrdy     0x01    @#define PCB_NOT_READY      @ Not ready status
.def pcsram     0x02    @#define PCB_WAIT_SRAM      @ SRAM wait status
.def pccdram    0x03    @#define PCB_WAIT_CACHEABLE @ SDRAM wait status - cacheable
.def pcncdram   0x04    @#define PCB_WAIT_NON_CACHEABLE @ SDRAM wait status - noncacheable
.def pcrsdram   0x05    @#define PCB_WAIT_REMOTE    @ SDRAM wait status - remote
.def pctwait    0x06    @#define PCB_TIMED_WAIT     @ Timer wait status
.def tim21wait  0x07    @#define PCB_21MS_TIMER_WAIT@ 21 MS Timer (Timer 1) wait
                                        # Next 6 MUST be in this order
.def pcim0wait  0x08    @#define PCB_WAIT_MSG_0     @ Inbound Message Reg 0 wait
.def pcim1wait  0x09    @#define PCB_WAIT_MSG_1     @ Inbound Message Reg 1 wait
.def pcid0wait  0x0A    @#define PCB_WAIT_DOOR_BELL_0   @ Inbound Doorbell Reg bit 0 wait
.def pcid1wait  0x0B    @#define PCB_WAIT_DOOR_BELL_1   @ Inbound Doorbell Reg bit 1 wait
.def pcid2wait  0x0C    @#define PCB_WAIT_DOOR_BELL_2   @ Inbound Doorbell Reg bit 2 wait
.def pcid3wait  0x0D    @#define PCB_WAIT_DOOR_BELL_3   @ Inbound Doorbell Reg bit 3 wait
.def pciowait   0x0E    @#define PCB_WAIT_IO        @ I/O wait status
.def pcnvawait  0x0F    @#define PCB_WAIT_NVA       @ NVA wait status

.def pcqresetwait 0x10  @#define PCB_HOST_RESET_WAIT    @ Host adapter reset wait
.def pcsem1wait 0x11    @#define PCB_WAIT_SEM_1     @ Semaphore 1 wait
.def pcsem2wait 0x12    @#define PCB_WAIT_SEM_2     @ Semaphore 2 wait
.def pcsresetwait 0x13  @#define PCB_SCSI_RESET_WAIT@ SCSI reset wait
.def pcblklock  0x14    @#define PCB_WAIT_BLK_LOCK  @ Block lockout wait
.def pcbsclock  0x15    @#define PCB_WAIT_COPY_LOCK @ Sec. copy lockout wait
.def pcdma0wait 0x16    @#define PCB_WAIT_DMA_0     @ DMA Unit 0 wait
.def pcdma1wait 0x17    @#define PCB_WAIT_DMA_1     @ DMA Unit 1 wait
.def pcispqwait 0x18    @#define PCB_ISP_WAIT       @ Wait for ISP request
.def pcncwb     0x19    @#define PCB_WAIT_NON_CACHE_WBUF    @ Non-cached Write Buffers wait
.def pccwb      0x1A    @#define PCB_WAIT_CACHE_WBUF    @ Cached Write Buffers wait
.def pcrmtwait  0x1B    @#define PCB_WAIT_FE_BE_MRP @ Wait for FE/BE MRP to complete
.def pcfcrdywait 0x1C   @#define PCB_FC_READY_WAIT  @ Wait for FC devices to come ready
.def pcocmpwait 0x1D    @#define PCB_ONLINE_WAIT    @ Wait for Online to process PDD list
.def pcwcreswait 0x1E   @#define PCB_WAIT_WRT_CACHE @ Wait for write cache resources
.def pclinkvqw  0x1F    @#define PCB_WAIT_LINK      @ Link i960 submission queue wait
                                        # allow room for 8 waits here
.def pcqlwait   0x27    @#define PCB_QLOGIC_WAIT    @ QLogic ISP 2x00 chip instance
                                        # waits. Beginning of range.
                                        # Allow room for MAXISP waits here
                                        # (i.e. 27, 28, 29, 1A are Reserved)
.def pcmrpwait  0x2B    @#define PCB_WAIT_MRP       @ Wait for MRP completion
.def pcsnvawait 0x2C    @#define PCB_WAIT_SYNC_NVA  @ Sync NVA wait status
.def pcrerrorwait 0x2D  @#define PCB_WAIT_RAID_ERROR@ RAID error wait
.def pcfscleanup  0x2E  @#define PCB_FILE_SYS_CLEANUP   @ Try to clean file systems
.def pcinitwait 0x2F    @#define PCB_WAIT_RAID_INIT @ Pause RAID initializations

.def pcnotused1 0x30    @#define PCB_NOTUSED1       @ Wait for copy completion handler
.def pcscmt     0x31    @#define PCB_IPC_WAIT       @ Waiting for scmt
.def pcwait4swap 0x32   @#define PCB_EVENT_WAIT     @ Wait for swap completion
.def PCB_WAIT_LINUX_TARG_IN 0x33 @#define PCB_WAIT_LINUX_TARG_IN    @ Target task input wait (Linux)
.def PCB_WAIT_LINUX_COMP_IN 0x34 @#define PCB_WAIT_LINUX_COMP_IN    @ Completion task input wait
.def pcp2wait   0x35    @#define PCB_WAIT_P2_NVRAM  @ Wait for P2 NVRAM update
.def PCB_MM_WAIT 0x36   @#define PCB_MM_WAIT        @ Wait for MM Info => FE
.def PCB_NV_DMA_QFULL_WAIT 0x37 @#define PCB_NV_DMA_QFULL_WAIT  @ NV DMA Queue Full wait
.def PCB_NV_DMA_EXEC_WAIT 0x38  @#define PCB_NV_DMA_EXEC_WAIT   @ NV DMA Executor wait
.def PCB_NV_DMA_COMP_WAIT 0x39  @#define PCB_NV_DMA_COMP_WAIT   @ NV DMA Completor wait
.def PCB_NV_SCRUB_WAIT 0x3A     @#define PCB_NV_SCRUB_WAIT  @ NV Scrub Task Wait
.def pcscsiiowait 0x3B  @#define PCB_SCSI_IO_WAIT   @ Wait for SCSI IO op to complete
.def pcepollwait  0x3C  @#define PCB_EPOLL_WAIT     @ Wait for Epoll Events
.def PCB_SS_SSMS_READ 0x3D      @#define PCB_SS_SSMS_READ       @ Wait for SSMS reads complete
.def PCB_SS_R_OGER_READS 0x3E   @#define PCB_SS_R_OGER_READS    @ Wait for OGER right reads done
.def PCB_SS_SSMS_MORE_TASKS 0x3F @#define PCB_SS_SSMS_MORE_TASKS @ Wait for a SSMS task to finish
.def PCB_IOCB_WAIT 0x40 @#define PCB_IOCB_WAIT      @ Wait for IOCB completion
.def PCB_QLMBX_RSP_WAIT 0x41    @#define PCB_QLMBX_RSP_WAIT     @ Wait for QLOGIC Mailbox Response
                                                              # Beginning of range.
                                                              # Allow room for MAXISP waits here
                                                              # (i.e., 41,42,43,44 are Reserved)
#
# --- Begin structures -------------------------------------------------
#

#
# --- Begin structure -------------------------------------------------
#
                @#if defined(CCB_RUNTIME_CODE)
                @typedef struct _SF {
                @    /* Stack pointer is right above pfp */
                @    struct _SF   *sf_pfp;          @ Prev Frame Ptr
                @    unsigned int *sf_rip;          @ Return Inst Ptr
                @    unsigned int *rsvd1;           @ Not Used
                @    unsigned int rsvd2[13];
                @} SF;
                @#else
.struct         @typedef struct _SF {
.w sf_pfp       @    struct _SF   *sf_pfp;          @ Prev Frame Ptr
.w sf_sp        @    unsigned int *sf_sp;           @ Stack Pointer
.w sf_rip       @    unsigned int *sf_rip;          @ Return Inst Ptr
                @    unsigned int rsvd[13];
                @} SF;
                @#endif

#
# --- PCB
#

            @#define pc_event pc_time   @ these share the same location in the pcb
            @#define TOTAL_STACK_SIZE ((PROCEDURE_LEVELS-3)*FRAME_SIZE+PROCEDURE_STACK_SIZE)
            @#define XIONAME_MAX    32

.struct         @typedef struct PCB {
.w pc_thd       @    struct PCB * volatile pc_thd;      @ Thread word
.b pc_global    @    volatile UINT8  pc_global;         @ Global reg restore (t/f)
.b pc_pri       @    UINT8           pc_pri;            @ Process priority
.b pc_stat      @    volatile UINT8  pc_stat;           @ Process status
.b pc_rsreg     @    UINT8           pc_rsreg;          @ Restore G Reg. flag
.w pc_time      @    volatile INT32  pc_time;           @ Process timeout
.w pc_pfp       @    SF              *pc_pfp;           @ Current saved PFP

#
#       global registers                                           *****
#
.q pc_g0        @    UINT32          pc_gRegs[16];      @'G' registers # g0-g3
.q pc_g4        @                                       @ g4-g7
.q pc_g8        @                                       @ g8-g11
.q pc_g12       @                                       @ g12-g15

.f pc_CT_fork_name 32   @    char    pc_fork_name[XIONAME_MAX]; @ name of process.
.f pc_SF_start 0        @

#                                                                  *****
#       stack frames
#
                @#if defined(CCB_RUNTIME_CODE)
                @    SF              *pc_sf0;           @ 1st stack frame
                @    UINT8           rsvd3[sizeof(SF) - sizeof(SF *)];
                @#else   /* defined(CCB_RUNTIME_CODE) */
.f pc_sf0 64    @    SF              pc_sf0;            @ 1st stack frame
                @#endif /* CCB_RUNTIME_CODE */
.f pc_sf1 64    @    SF              pc_sf1;            @ 2nd stack frame
.f pc_sf2 64    @    SF              pc_sf2;            @ 3rd stack frame
.f pc_sf3 64    @    SF              pc_sf3;            @ 4th stack frame
                @#ifndef CCB_RUNTIME_CODE

                #   The following is the actual space allocated for the stack.
                #   It is commented out for the CCB to keep the structure size down.


# .set pcbsiz,PLEVELS*FRAME+PSTACK+pc_sf1  # size of PCB
.f rest_frames_and_i960_stack (PLEVELS-3)*FRAME+PSTACK  @ UINT8 pc_stack[TOTAL_STACK_SIZE];

# Document stack size for "c" -- stackcopy is the space needed for "big" assembler C routine:
#   Perf build:  BE stackcopy = 0x00000170 (368)  -- FE  stackcopy = 0x000000f0 (240)
#   Debug build: BE stackcopy = 0x00000400 (1024) -- FE  stackcopy = 0x00000390 (912)
# Nested if's:
#   HISTORY_KEEP requires 131072 or more likely C_STACK_SIZE is defined.
#   GCC_MINUS_O0_BIGGER_STACK is set for Debug builds (65536).
#   Default is 32768 for Perf build.

.ifndef HISTORY_KEEP            @#ifndef HISTORY_KEEP
.ifdef C_STACK_SIZE             @#ifdef C_STACK_SIZE
.def pc_CT_C_stack_size C_STACK_SIZE    @#define pc_CT_C_stack_size @ NEED REALLY BIG C STACK
.else   # C_STACK_SIZE          @#else   /* C_STACK_SIZE */
.ifndef GCC_MINUS_O0_BIGGER_STACK @#ifndef GCC_MINUS_O0_BIGGER_STACK
.def pc_CT_C_stack_size 32768   @#define pc_CT_C_stack_size
.else   # GCC_MINUS_O0_BIGGER_STACK @#else   /* GCC_MINUS_O0_BIGGER_STACK */
.def pc_CT_C_stack_size 65536   @#define pc_CT_C_stack_size     @ if -O0 used.
.endif  # GCC_MINUS_O0_BIGGER_STACK @#endif  /* GCC_MINUS_O0_BIGGER_STACK */
.endif  /* C_STACK_SIZE */      @#endif  /* C_STACK_SIZE */
.else   /* HISTORY_KEEP */      @#else   /* HISTORY_KEEP */
.ifdef C_STACK_SIZE             @#ifdef C_STACK_SIZE
.def pc_CT_C_stack_size C_STACK_SIZE    @#define pc_CT_C_stack_size @ NEED REALLY BIG C STACK
.else   # C_STACK_SIZE          @#else   /* C_STACK_SIZE */
.def pc_CT_C_stack_size 131072  @#define pc_CT_C_stack_size
.endif  /* C_STACK_SIZE */      @#endif  /* C_STACK_SIZE */
.endif  /* HISTORY_KEEP */      @#endif  /* HISTORY_KEEP */
.f pc_c_sp pc_CT_C_stack_size   @    UINT32 pc_c_stack[pc_CT_C_stack_size / 4];
.w pc_CT_esp                    @    UINT32 pc_esp;
.w pc_CT_ebp                    @    UINT32 pc_ebp;
.w pc_CT_fork_tmp_exch          @    UINT32 pc_CT_fork_tmp_exch;    @ Possible exchange in middle of fork
                                @#else
                                @    UINT32 pc_esp;
                                @#endif /* !CCB_RUNTIME_CODE */
.f pcbsiz 0                     @} PCB;


# The "c" stack size is set due to fprintf, glibc, redhat 9.0.1 needing
# 4,500+ bytes of stack.  It apparently uses stack instead of malloc-ing
# memory.  8192 was the original guess, but that wasn't enough.  After
# careful consideration, a decision to multiply by 4 was made. 2004-04-16
#

#
# --- End structures ---------------------------------------------------

            @#ifdef __cplusplus
            @#pragma pack(pop)
            @#endif

            @#endif /* _PCB_H_ */

####
## Modelines:
## Local Variables:
## tab-width: 4
## indent-tabs-mode: nil
## End:
## vi:sw=4 ts=4 expandtab
