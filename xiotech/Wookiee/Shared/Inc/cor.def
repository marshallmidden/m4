# $Id: cor.def 159129 2012-05-12 06:25:16Z marshall_midden $
#**********************************************************************
#
#  NAME: cor.def (Copy Operation Registration Table)
#
#  DESCRIPTION:
#
#       This file defines the data structures and definitions to support
#       the copy operation registration component of a copy operation.
#
#  Copyright (c) 2001-2008 XIOtech Corporation.  All rights reserved.
#
#**********************************************************************

                                @#ifndef _COR_H_
                                @#define _COR_H_
                                @@#include "XIO_Types.h"
                                @struct SCD;
                                @struct DCD;
                                @struct CM;
                                @struct VDD;
                                @struct RM;
                                @struct ILT;
                                @struct P6ST;

                                @#ifdef __cplusplus
                                @#pragma pack(push,1)
                                @#endif
#
#       general definitions
#
.ifndef MODEL_3000              @#ifndef MODEL_3000
.ifndef MODEL_7400              @#ifndef MODEL_7400
.set MAX_CORS,512               @                               @ Maximum CORs supported
.endif  # MODEL_7400            @#endif  /* MODEL_7400 */
.endif  # MODEL_3000            @#endif  /* MODEL_3000 */
.ifndef  MODEL_7000             @#ifndef MODEL_7000
.ifndef  MODEL_4700             @#ifndef MODEL_4700
.set MAX_CORS,256               @                               @ Maximum CORs supported
.endif # MODEL_4700             @#endif /* MODEL_4700 */
.endif # MODEL_7000             @#endif /* MODEL_7000 */

#
#   Flag Byte Definitions
#
#   Flag bit definitions
.def CFLG_B_POLL_REQ    0       @#define CFLG_B_POLL_REQ    @ Poll requested
.def CFLG_B_DIS_DEVICE  1       @#define CFLG_B_DIS_DEVICE  @ Disable copy device updates
.def CFLG_B_DIS_STATE   2       @#define CFLG_B_DIS_STATE   @ Disable copy state updates
.def CFLG_B_DIS_GENERAL 3       @#define CFLG_B_DIS_GENERAL @ Disable gen copy info updates
.def CFLG_B_INACTIVE    7       @#define CFLG_B_INACTIVE    @ COR is inactive
#
# --- Copy Operation Registration (cor_cstate) definitions
#
.def corcst_uni 0               @#define CST_UNI                @ Uninitialized
.def corcst_copy 1              @#define CST_COPY               @ Copy data
.def corcst_mirror 2            @#define CST_MIRROR             @ Mirrored
#
#   Copy Registration State (cor_crstate) Definitions
#
.def corcrst_undef 0            @#define CRST_UNDEF             @ Undefined
.def corcrst_init 1             @#define CRST_INIT              @ Initializing
.def corcrst_active 2           @#define CRST_ACTIVE            @ Active
.def corcrst_autosusp 3         @#define CRST_AUTOSUSP          @ Auto-suspended
.def corcrst_usersusp 4         @#define CRST_USERSUSP          @ User-suspended/local
.def corcrst_remsusp 5          @#define CRST_REMSUSP           @ User-suspended/remote
#
#   Copy Operation Region/Segment Map State (cor_mstate) Definitions
#
.def cormst_term 0              @#define MST_TERM               @ Map terminated
.def cormst_act 1               @#define MST_ACT                @ Map active
.def cormst_susp 2              @#define MST_SUSP               @ Map suspended
.def cormst_acc 3               @#define MST_ACC                @ Accumulating maps
#
#   Ownership Control State Engine State Definitions
#
                                @#define OCSE_SI_NORESOURCES 0x20 @ SI No Resources
#
# Public defines - macros
#
                    @#define COR_GetLSVID(x) ((UINT16)(((x)->rscl << 8) | ((x)->rsvd)))
                    @#define COR_GetLDVID(x) ((UINT16)(((x)->rdcl << 8) | ((x)->rdvd)))

                    @#define COR_GetRSVID(x) ((UINT16)(((x)->rcscl << 8) | ((x)->rcsvd)))
                    @#define COR_GetRDVID(x) ((UINT16)(((x)->rcdcl << 8) | ((x)->rcdvd)))

# --- Begin structure -------------------------------------------------
#
.struct                         @typedef struct COR             @ Copy Operation Registration
                                @{
.w cor_link                     @   struct COR *link;           @ link list field for other
                                @                               @   COR's on defined queue
.w cor_scd                      @   struct SCD *scd;            @ Assoc. SCD address
.w cor_dcd                      @   struct DCD *dcd;            @ Assoc. DCD address
.w cor_cm                       @   struct CM  *cm;             @ Assoc. CM address
.w cor_srcvdd                   @   struct VDD *srcvdd;         @ source VDD address
.w cor_destvdd                  @   struct VDD *destvdd;        @ destination VDD address
.w cor_rmaptbl                  @   struct RM  *rmaptbl;        @ region mapping table pointer
.b cor_cstate                   @   UINT8       copystate;      @ copy state code
.b cor_flags                    @   UINT8       flags;          @ flags
                                @                               @ Bit 7 = COR inactive
                                @                               @     6 =
                                @                               @     5 =
                                @                               @     4 =
                                @                               @     3 = disable copy general
                                @                               @       info. update from NVRAM
                                @                               @     2 = disable copy state
                                @                               @         update from NVRAM
                                @                               @     1 = disable copy device
                                @                               @         update from NVRAM
                                @                               @     0 = outstanding poll
                                @                               @         request
.b cor_crstate                  @   UINT8       crstate;        @ copy reg. state
.b cor_mstate                   @   UINT8       mirrorstate;    @ region/segment map state
.b cor_label 16                 @   UINT8       label[16];      @ copy operation label array
.s cor_uops                     @   UINT16      uops;           @ outstanding update ops.
.s cor_tmr1                     @   UINT16      tmr1;           @ timer #1
.w cor_rid                      @   UINT32      rid;            @ copy registration ID
.w cor_rcsn                     @   UINT32      rcsn;           @ reg. copy MAG serial number
.b cor_rcscl                    @   UINT8       rcscl;          @ reg. copy MAG source cl num
.b cor_rcsvd                    @   UINT8       rcsvd;          @ reg. copy MAG source VD num
.b cor_rcdcl                    @   UINT8       rcdcl;          @ reg. copy MAG dest. cl number
.b cor_rcdvd                    @   UINT8       rcdvd;          @ reg. copy MAG dest. VD number
.w cor_rssn                     @   UINT32      rssn;           @ reg. source MAG serial number
.w cor_rdsn                     @   UINT32      rdsn;           @ reg. dest. MAG serial number
.b cor_rscl                     @   UINT8       rscl;           @ reg. source MAG cluster num
.b cor_rsvd                     @   UINT8       rsvd;           @ reg. source MAG VDisk number
.b cor_rdcl                     @   UINT8       rdcl;           @ reg. dest. MAG cluster number
.b cor_rdvd                     @   UINT8       rdvd;           @ reg. dest. MAG VDisk number
.b cor_gid                      @   UINT8       gid;            @ user defined group ID
.b cor_ocsert1                  @   UINT8       ocsert1;        @ OCSE current op. retry count
.b cor_ocsert2                  @   UINT8       ocsert2;        @ OCSE process retry count
.b cor_ocseto                   @   UINT8       ocseto;         @ OCSE timer (secs.)
.w cor_RCC                      @   struct ILT *rcc;            @ RCC registration
.w cor_totalsegs                @   UINT32      totalsegs;      @ total segment count
.w cor_PMPsn                    @   UINT32      PMPsn;          @ primary mirror partner SN
.w cor_SMPsn                    @   UINT32      SMPsn;          @ secondary mirror partner SN
.w cor_ocseptr                  @   void       *ocseptr;        @ OCSE table pointer
.b cor_ocsecev                  @   UINT8       ocsecev;        @ current OCSE state
.b cor_ocsecst                  @   UINT8       ocsecst;        @ current OCSE event
.b cor_ocselev                  @   UINT8       ocselev;        @ last OCSE state
.b cor_ocselst                  @   UINT8       ocselst;        @ last OCSE event
.w cor_powner                   @   UINT32      powner;         @ primary owner(ctl s/n)
.w cor_sowner                   @   UINT32      sowner;         @ secondary owner(ctl s/n)
.w cor_ccseptr                  @   void       *ccseptr;        @ CCSE table pointer
.b cor_ccsecev                  @   UINT8       ccsecev;        @ current CCSE state
.b cor_ccsecst                  @   UINT8       ccsecst;        @ current CCSE event
.b cor_ccselev                  @   UINT8       ccselev;        @ last CCSE state
.b cor_ccselst                  @   UINT8       ccselst;        @ last CCSE event
.w cor_stnvram                  @   struct P6ST *stnvram;       @ state NVRAM record address
.s cor_seqnum                   @   UINT16      seqnum;         @ sequence #
.b cor_ostindx                  @   UINT8       ostindx;        @ OCSE state trace index
.b cor_cstindx                  @   UINT8       cstindx;        @ CCSE state trace index
.b cor_ostarea 16               @   UINT8       ostarea[16];    @ OCSE state trace area
.b cor_cstarea 16               @   UINT8       cstarea[16];    @ CCSE state trace area
.w cor_respsn                   @   UINT32      respsn;         @ response message s/n
.w cor_transcpo                 @   UINT32      transcpo;       @ cur pri owner during transfer
.w cor_transcso                 @   UINT32      transcso;       @ cur sec owner during transfer
.w cor_transrmap                @   struct RM  *transrmap;      @ transfer ownership region map
.w cor_tregnum                  @   UINT32      tregnum;        @ transfer ownership region #
.s cor_swapseq                  @   UINT16      swapseq;        @ swap RAIDs operation seq num
.b cor_swapcompstat             @   UINT8       swapcompstat;   @ GeoRAID swap completion status
.b cor_userswap                 @   UINT8       userSwap;       @ User Swap request -- MRP
.w cor_r5PasKey                 @   UINT32      r5PasKey;       @ R5 scan key
.w cor_flushilt                 @   struct ILT *flushilt;       @ cache flush active
#-----------------------------------------------------------------------------
# *** TOTAL BYTES: 192 ***
#
#   IF THE NUMBER OF BYTES IN THIS STRUCTURE CHANGES IT REQUIRES WORK TO BE
#   DONE IN THE MR_DEFS.H AND CCBE/CCBCL, AS THIS DATA IS USED DIRECTLY THERE.
#-----------------------------------------------------------------------------
# --- End structure ---------------------------------------------------
.f corsize 0 # Size of CORs     @} COR;

                                @#ifdef __cplusplus
                                @#pragma pack(pop)
                                @#endif

                                @#endif /* _COR_H_ */
#******************************************************************************
#
####
## Modelines:
## Local Variables:
## tab-width: 4
## indent-tabs-mode: nil
## End:
## vi:sw=4 ts=4 expandtab
