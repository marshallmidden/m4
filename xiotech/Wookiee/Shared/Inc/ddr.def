# $Id: ddr.def 145456 2010-08-11 20:33:28Z m4 $
#**********************************************************************
#
#  NAME: ddr.def FE/BE/CCB DDR Table definitions and Direct Memory Copy.
#
# Copyright (c) 2003-2010 Xiotech Corporation. All rights reserved.
#**********************************************************************

                                @#ifndef _DDR_H
                                @#define _DDR_H
                                @#include "XIO_Types.h"
                                @#include "LKM_layout.h"
                                @#include "MR_Defs.h"

                                @#ifdef __cplusplus
                                @#pragma pack(push,1)
                                @#endif

#**********************************************************************
                                @#define FE_DDR_BASE_ADDR    (FRONT_END_PCI_START + 0x1000)
                                @#define BE_DDR_BASE_ADDR    (BACK_END_PCI_START + 0x1000)

                                @#define FE_DMC_BASE_ADDR    (FRONT_END_PCI_START + 0x800)
                                @#define BE_DMC_BASE_ADDR    (BACK_END_PCI_START + 0x800)
                                @#define CCB_DMC_BASE_ADDR   (CCB_PCI_START + 0x800)

#**********************************************************************
# Base FID identifiers. Add either FE_FID or BE_FID to the DE_xxx proc DDR
# table entries to read a logical proc fid. Add CCB_FID to the CCB_xxx CCB
# DDR table entries to read a logical CCB fid.
                                @#define P6RC_NOP6       0      @ no P6 area defined

                                @#define CCB_FID     0x100
                                @#define FE_FID      0x200
                                @#define BE_FID      0x300

                                @#define XX_FID      0x400      @ Needed for range checking

# CCB DDR table constants
                                @#define CCB_DDR_VERSION     1
#**********************************************************************
# PROC DDR table entries

# ATTENTION -- This below is in lock-step with ddr_fr_id in msc.c.
#                                                              hex   dec  FE/BE
.def de_frec         0 @#define DDR_FLIGHT_REC               @ 0x00 - 00:512/768 -- Flight rec w/o timestamps
.def de_frects       1 @#define DDR_FLIGHT_REC_TIME          @ 0x01 - 01:513/769 -- Flight rec w/timestamps
.def de_mrp          2 @#define DDR_MRP_TRACE                @ 0x02 - 02:514/770 -- MRP trace
.def de_defrag       3 @#define DDR_DEFRAG_TRACE             @ 0x03 - 03:515/771 -- Defrag trace
.def de_etregs       4 @#define DDR_ERR_TRAP_REGS            @ 0x04 - 04:516/772 -- Error Trap registers
.def de_etiram       5 @#define DDR_ERR_TRAP_INT_RAM         @ 0x05 - 05:517/773 -- Error Trap internal ram
.def de_etnmi        6 @#define DDR_ERR_TRAP_NMI_CNT         @ 0x06 - 06:518/774 -- Error Trap NMI counts
.def de_etiregs      7 @#define DDR_ERR_TRAP_INT_REGS        @ 0x07 - 07:519/775 -- Error Trap internal regs
.def de_kii          8 @#define DDR_PROC_INT_INFO            @ 0x08 - 08:520/776 -- PROC internal info (K_ii)
.def de_itrace0      9 @#define DDR_INIT_TRACE_LOGS_0        @ 0x09 - 09:521/777 -- Initiator trace logs
.def de_itrace1     10 @#define DDR_INIT_TRACE_LOGS_1        @ 0x0A - 10:522/778 --   these 4 must remain
.def de_itrace2     11 @#define DDR_INIT_TRACE_LOGS_2        @ 0x0B - 11:523/779 --   contiguous
.def de_itrace3     12 @#define DDR_INIT_TRACE_LOGS_3        @ 0x0C - 12:524/780 --
.def de_trace0      13 @#define DDR_FE_TRACE_LOGS_0          @ 0x0D - 13:525/781 -- FE Trace logs
.def de_trace1      14 @#define DDR_FE_TRACE_LOGS_1          @ 0x0E - 14:526/782 --  these 4 must remain
.def de_trace2      15 @#define DDR_FE_TRACE_LOGS_2          @ 0x0F - 15:527/783 --  contiguous
.def de_trace3      16 @#define DDR_FE_TRACE_LOGS_3          @ 0x10 - 16:528/784 --
.def de_peque       17 @#define DDR_PHY_EXEC_QUEUE           @ 0x11 - 17:529/785 -- Physical exec queue
.def de_reque       18 @#define DDR_RAID_EXEC_QUEUE          @ 0x12 - 18:530/786 -- Raid exec queue
.def de_r5eque      19 @#define DDR_RAID5_EXEC_QUEUE         @ 0x13 - 19:531/787 -- Raid 5 exec queue
.def de_vdeque      20 @#define DDR_VDEV_EXEC_QUEUE          @ 0x14 - 20:532/788 -- Virtual Device exec queue
.def de_deque       21 @#define DDR_DEFINE_EXEC_QUEUE        @ 0x15 - 21:533/789 -- Define exec queue
.def de_ripeque     22 @#define DDR_RAID_INIT_EXEC_QUEUE     @ 0x16 - 22:534/790 -- Raid init exec queue
.def de_rceque      23 @#define DDR_RAID_XOR_CMPL_EXEC_QUEUE @ 0x17 - 23:535/791 -- Raid XOR compl exec queue
.def de_rxeque      24 @#define DDR_RAID_XOR_EXEC_QUEUE      @ 0x18 - 24:536/792 -- Raid XOR exec queue
.def de_ireqq0      25 @#define DDR_ISP0_REQ_QUEUE           @ 0x19 - 25:537/793 -- ISP 0 request queue
.def de_ireqq1      26 @#define DDR_ISP1_REQ_QUEUE           @ 0x1A - 26:538/794 -- ISP 1 request queue
.def de_ireqq2      27 @#define DDR_ISP2_REQ_QUEUE           @ 0x1B - 27:539/795 -- ISP 2 request queue
.def de_ireqq3      28 @#define DDR_ISP3_REQ_QUEUE           @ 0x1C - 28:540/796 -- ISP 3 request queue
.def de_irspq0      29 @#define DDR_ISP0_RSP_QUEUE           @ 0x1D - 29:541/797 -- ISP 0 response queue
.def de_irspq1      30 @#define DDR_ISP1_RSP_QUEUE           @ 0x1E - 30:542/768 -- ISP 1 response queue
.def de_irspq2      31 @#define DDR_ISP2_RSP_QUEUE           @ 0x1F - 31:543/799 -- ISP 2 response queue
.def de_irspq3      32 @#define DDR_ISP3_RSP_QUEUE           @ 0x20 - 32:544/800 -- ISP 3 response queue
.def de_nvram5      33 @#define DDR_NVRAM_5                  @ 0x21 - 33:545/801 -- Diagnostic data NVRAM Pt 5
.def de_reeque      34 @#define DDR_RAID_ERROR_EXEC_QUEUE    @ 0x22 - 34:546/802 -- Raid error exec queue
.def de_repcb       35 @#define DDR_RAID_ERROR_EXEC_PCB      @ 0x23 - 35:547/803 -- Raid error exec PCB
.def de_pcque       36 @#define DDR_PHY_COMP_QUEUE           @ 0x24 - 36:548/804 -- Physical comp queue
.def de_pcpcb       37 @#define DDR_PHY_COMP_PCB             @ 0x25 - 37:549/805 -- Physical comp PCB
.def de_feiram      38 @#define DDR_FE_INT_RAM               @ 0x26 - 38:550/806 -- FE IRAM
.def de_beiram      39 @#define DDR_BE_INT_RAM               @ 0x27 - 39:551/807 -- BE IRAM
.def de_ppcb        40 @#define DDR_PHY_EXEC_PCB             @ 0x28 - 40:552/808 -- Physical exec PCB
.def de_rpcb        41 @#define DDR_RAID_EXEC_PCB            @ 0x29 - 41:553/809 -- Raid exec PCB
.def de_r5pcb       42 @#define DDR_RAID5_EXEC_PCB           @ 0x2A - 42:554/810 -- Raid 5 exec PCB
.def de_vdpcb       43 @#define DDR_VDEV_EXEC_PCB            @ 0x2B - 43:555/811 -- Virtual Device exec PCB
.def de_dpcb        44 @#define DDR_DEFINE_EXEC_PCB          @ 0x2C - 44:556/812 -- Define exec PCB
.def de_rippcb      45 @#define DDR_RAID_INIT_EXEC_PCB       @ 0x2D - 45:557/813 -- Raid init exec PCB
.def de_rcpcb       46 @#define DDR_RAID_XOR_CMPL_PCB        @ 0x2E - 46:558/814 -- Raid XOR compl exec PCB
.def de_rxpcb       47 @#define DDR_RAID_XOR_EXEC_PCB        @ 0x2F - 47:559/815 -- Raid XOR exec PCB
.def de_fseque      48 @#define DDR_FILE_SYS_EXEC_QUEUE      @ 0x30 - 48:550/816 -- File System exec queue
.def de_fspcb       49 @#define DDR_FILE_SYS_EXEC_PCB        @ 0x31 - 49:561/817 -- File System exec PCB
.def de_nvram1      50 @#define DDR_NVRAM1                   @ 0x32 - 50:562/818 -- Backtrace data NVRAM Part 1
.def de_ficb        51 @#define DDR_FICB                     @ 0x33 - 51:563/819 -- Firmware Init Control Block
.def de_profile     52 @#define DDR_PROFILE                  @ 0x34 - 52:564/820 -- Profile data
.def de_atioq0      53 @#define DDR_ISP0_ATIO_QUEUE          @ 0x35 - 53:565/821 -- ISP 0 atio queue
.def de_atioq1      54 @#define DDR_ISP1_ATIO_QUEUE          @ 0x36 - 54:566/822 -- ISP 1 atio queue
.def de_atioq2      55 @#define DDR_ISP2_ATIO_QUEUE          @ 0x37 - 55:567/823 -- ISP 2 atio queue
.def de_atioq3      56 @#define DDR_ISP3_ATIO_QUEUE          @ 0x38 - 56:568/824 -- ISP 3 atio queue

.def ddr_size       57 @#define DDR_SIZE                     @ DDR_ISP3_ATIO_QUEUE + 1  Number DDR in FE

# ATTENTION -- This above is in lock-step with ddr_fr_id in msc.c.

#**********************************************************************
                                @#define DDR_ENTRY_SIZE                  16 @ Size of one DDR entry

#
#  NOTE!!!!!!! - When adding DDR entries, ALWAYS add to the end of the
#                DDR table.  The CCB can access each DDR entry as a
#                logical file (fid), but only when new items are
#                added to the end of the DDR table.
#
#  NOTE!!!!!!! - Maximum number of entries allowed is defined in XIO_Const.h
#**********************************************************************
.def ddr_lab_size        8      @#define DDR_ENTRY_LABEL_SIZE   @ DDR Entry Label Size
.def DDR_VERSION         1      @#define DDR_VERSION            @ DDR code version

#**********************************************************************
# CCB DDR table entries
                                @#define CCB_TRACEBUF                0x00   @ 00/256 -- CCB Trace Buffer
                                @#define CCB_SERIALBUF               0x01   @ 01/257 -- CCB Serial Buffer
                                @#define CCB_HEAPSTATS               0x02   @ 02/258 -- CCB Heap Stats
                                @#define CCB_PROFDUMP                0x03   @ 03/259 -- CCB Profile Dump
                                @#define CCB_PCBDUMP                 0x04   @ 04/260 -- CCB PCB Dump
                                @#define CCB_CUSTLOGS                0x05   @ 05/261 -- Raw Customer log flash
                                @#define CCB_DEBUGLOGS               0x06   @ 06/262 -- Raw Debug log flash

# Cache Fids
                                @#define CCB_CACHEDISKBAYMAP         0x07   @ 07/263 -- Cache DiskBayMap
                                @#define CCB_CACHEDISKBAYPATHS       0x08   @ 08/264 -- Cache DiskBayPaths
                                @#define CCB_CACHEPDISKMAP           0x09   @ 09/265 -- Cache PDiskMap
                                @#define CCB_CACHEPDISKFAILMAP       0x0A   @ 10/266 -- Cache PDiskFailMap
                                @#define CCB_CACHEPDISKREBUILDMAP    0x0B   @ 11/267 -- Cache PDiskRebuildMap
                                @#define CCB_CACHEPDISKPATHS         0x0C   @ 12/268 -- Cache PDiskPaths
                                @#define CCB_CACHEVIRTUALDISKMAP     0x0D   @ 13/269 -- Cache VDiskMapP
                                @#define CCB_CACHEVDISKCOPYMAP       0x0E   @ 14/270 -- Cache VDiskCopyMap
                                @#define CCB_CACHEVDISKMIRRORMAP     0x0F   @ 15/271 -- Cache VDiskMirrorMapP
                                @#define CCB_CACHERAIDMAP            0x10   @ 16/272 -- Cache RaidMap
                                @#define CCB_CACHESERVERMAP          0x11   @ 17/273 -- Cache ServerMap
                                @#define CCB_CACHETARGETMAP          0x12   @ 18/274 -- Cache TargetMap
                                @#define CCB_CACHEDISKBAYS           0x13   @ 19/275 -- Cache DiskBays
                                @#define CCB_CACHETARGETS            0x14   @ 20/276 -- Cache Targets
                                @#define CCB_CACHEFELOOPSTATS        0x15   @ 21/277 -- Cache FELoopStats
                                @#define CCB_CACHEBELOOPSTATS        0x16   @ 22/278 -- Cache BELoopStats
                                @#define CCB_CACHEPHYSICALDISKS      0x17   @ 23/279 -- Cache PDisks
                                @#define CCB_CACHEVIRTUALDISKS       0x18   @ 24/280 -- Cache VDisks
                                @#define CCB_CACHERAIDS              0x19   @ 24/281 -- Cache Raids
                                @#define CCB_CACHESERVERS            0x1A   @ 25/282 -- Cache Servers

                                @#define CCB_STATSI2C                0x1B   @ 27/283 -- UNUSED (was I2C stats)
                                @#define CCB_STATSPROC               0x1C   @ 28/284 -- Stats Proc (FE & BE)
                                @#define CCB_STATSPCI                0x1D   @ 29/285 -- Stats PCI (FE & BE)
                                @#define CCB_STATSENVIRON            0x1E   @ 30/286 -- Stats Environmental
                                @#define CCB_STATSSERVER             0x1F   @ 31/287 -- Stats Servers
                                @#define CCB_STATSVDISK              0x20   @ 32/288 -- Stats VDisks
                                @#define CCB_STATSCACHEDEVICE        0x21   @ 33/289 -- Stats Cache Devices
                                @#define CCB_STATSLOOP               0x22   @ 34/290 -- Stats Loop (FE & BE)
                                @#define CCB_STATSFCALCOUNTERS       0x23   @ 35/291 -- Stats FCAL Counters

                                @#define CCB_CMD_RECORD_TBL          0x24   @ 36/292 -- Command Record Table
                                @#define CCB_NVRAM                   0x25   @ 37/293 -- CCB NVRAM
                                @#define CCB_NVRAM_PERS_STORE        0x26   @ 38/294 -- XSSA Persistent Store
                                @#define CCB_PROC_DDR_TABLES         0x27   @ 39/295 -- Proc DDR Tables
                                @#define CCB_FIRMWARE_VERSIONS       0x28   @ 40/296 -- FW Versions
                                @#define CCB_TIMESTAMP               0x29   @ 41/297 -- Timestamp
                                @#define CCB_NVRAM_COPIES            0x2A   @ 42/298 -- CCB NVRAM Flash Copies
                                @#define CCB_FCM_COUNTERS            0x2B   @ 43/299 -- FCM Counters
                                @#define CCB_VCG_INFO                0x2C   @ 44/300 -- VCG Info
                                @#define CCB_TARGET_RESOURCE_LIST    0x2D   @ 45/301 -- Active Servers
                                @#define CCB_FID_LIST                0x2E   @ 46/302 -- FID List
                                @#define CCB_STATS_CCB               0x2F   @ 47/303 -- CCB Statistics
                                @#define CCB_MIRROR_PARTNER_LIST     0x30   @ 48/304 -- Mirror Partner List

                                @#define CCB_LINUX_FILE_READ_START   0x31   @ 49/305
                                @#define CCB_LINUX_FILE_READ         0x31   @ 49/305 -- Wookiee Linux File R/W
                                @#define CCB_LINUX_FILE_READ_PAMLOG  0x32   @ 50/306 -- Wookiee PAM Logs
                                @#define CCB_LINUX_FILE_READ_LINLOG  0x33   @ 51/307 -- Wookiee Linux Sys Logs
                                @#define CCB_LINUX_FILE_READ_RAIDLOG 0x34   @ 52/308 -- Wookiee Linux Raid Logs
                                @#define CCB_LINUX_FILE_READ_CORESUM 0x35   @ 53/309 -- Wookiee Core Summaries
                                @#define CCB_LINUX_FILE_READ_CORES   0x36   @ 54/310 -- Wookiee Core Files
                                @#define CCB_LINUX_FILE_READ_APPLOG  0x37   @ 55/311 -- Wookiee Apps Logs
                                @#define CCB_LINUX_FILE_READ_SMP     0x38   @ 56/312 -- 750 SMP PHY Info Logs
                                @#define CCB_LINUX_FILE_READ_QLCORES 0x39   @ 57/313 -- Wookiee Qlogic Cores

                                @#define CCB_LINUX_FILE_READ_RESERVE_START 0x40 @ 58/314

# Reserve thru 0x60 for linux files
                                @#define CCB_LINUX_FILE_READ_END     0x60   @ 96/352

                                @#define CCB_BAY_SES_DATA            0x61   @ 97/353 -- Bay SES Data
                                @#define CCB_ISCSI_STATS             0x62   @ 98/354 -- iSCSI Stats
                                @#define CCB_ASYNC_REP               0x63   @ 99/355 -- Async Rep

# NOTE: When adding a new FID, see note below!
                                @#define CCB_DDR_NUM_ENTRIES         0x64   @ 100 -- # of DDR entries
                                @                                           @ (i.e. size of DDR array)
#
# When you add a new FID. you need to decide if it is a FID that needs to be
# captured as part of a Snapshot. Things to consider/update:
# 1) ddr.c: Add the FID to the "fidList" structure (to include in a snapshot).
# 2) SnapDump.pl: add the FID into the appropriate category in BuildFidBucketHash.
#    A compiled version of this needs to be put up onto the "Snap Server".
# 3) Write a FID decoder and add it to fmtFIDs.pm and decodeSupport.pm
# 4) ccbcl.pl: Add the FID description to the FIDREAD help text
# These notes apply to new FE/BE FIDs too!

#**********************************************************************
#
# Layout of the FE/BE <-> CCB communications area found in the their sram.
# It is located at FE/BE_COMM_AREA_BASE_ADDR.
# Note: Each comm area is 4096 bytes long.

.struct                         @typedef struct PROC_DDR_ENTRY
                                @{
.w de_id                        @    char        id[8];         @ ID of data
.w de_id2                       @
.w de_addr                      @    void       *addr;          @ Address of data
.w de_len                       @    UINT32      len;           @ Length of data
.f de_size 0                    @} PROC_DDR_ENTRY;

.struct                         @typedef struct PROC_DDR_TABLE
                                @{
.w dh_id                        @    UINT32      tableId;       @ ID str, BDDR=BE, FDDR=FE
.w dh_vers                      @    UINT32      version;       @ Version of DDR code
.w dh_len                       @    UINT32      numEntries;    @ Number of entries
.w dh_crc                       @    UINT32      crc;           @ CRC of DDR table
                                @    PROC_DDR_ENTRY entry[0];   @ DDR Entries
.f dh_size 0                    @} PROC_DDR_TABLE;

#**********************************************************************
#
# A DDR_FUNC_PTR takes address and length as parameters and returns
# length of formatted data (in gBigBuffer).
                                @typedef UINT32 (*DDR_FUNC_PTR)(void *addr, UINT32 len);

# Layout of the CCB's DDR table. This table is NOT in the comm area.
                                @typedef struct CCB_DDR_ENTRY
                                @{
                                @    char        id[8];         @ ID of data
                                @    void       *addr;          @ Address of data
                                @    UINT32      len;           @ Length of data
                                @    DDR_FUNC_PTR pFunc;        @ optional function ptr
                                @} CCB_DDR_ENTRY;

                                @typedef struct CCB_DDR_TABLE
                                @{
                                @    UINT32      version;       @ Version of DDR code
                                @    UINT32      numEntries;    @ Number of entries
                                @    UINT32      crc;           @ CRC of DDR table
                                @    CCB_DDR_ENTRY entry[CCB_DDR_NUM_ENTRIES]; @ DDR Entries
                                @} CCB_DDR_TABLE;

#**********************************************************************
# Header that gets sent back with each FID
                                @#define DDR_FID_HEADER_MAGIC_NUM 0x312A2A66 @ f**1
                                @typedef struct DDR_FID_HEADER
                                @{
                                @    UINT32      magicNumber;   @ Identifies this header
                                @    UINT32      fid;           @ FID number
                                @    UINT32      version;       @ version of fid, used
                                @                               @ to select proper decoder
                                @    void       *startAddr;     @ starting address if mem dump
                                @    char        id[8];         @ FID id/name
                                @    UINT32      reserved[2];   @ pad
                                @} DDR_FID_HEADER;

#**********************************************************************
#**********************************************************************
# Data structure for Direct Memory Copy
                                @struct DMC
                                @{
                                @   UINT8   atomic_lock;        @ 0 = not locked
                                @   UINT8   id[8];              @ Character name of structure
                                @   void   *copy_addr;          @ Starting address of copy
                                @   UINT32  copy_length;        @ Amount to copy
                                @};

#**********************************************************************
# Array entry values for CCB Direct Memory Copy table.
                                @enum CCB_DMC_enum {
                                @   CCB_DMC_nvramp2percent,     @ nvram part 2 % usage
                                @   CCB_DMC_raidcache,          @ fill raid cache from BE
                                @   CCB_DMC_vdiskcache,         @ fill vdisk cache from BE
                                @   CCB_DMC_pdiskcache,         @ fill pdisk cache from BE
                                @   CCB_DMC_vcdcache,           @ fill vcd cache from FE
                                @   CCB_DMC_servercache,        @ fill server cache from FE
                                @   CCB_DMC_targetcache,        @ fill target cache from FE
                                @   CCB_DMC_MAX
                                @};
#******************************************************************************
# Structure for CCB Direct Memory Copy entries.
                                @struct DMC_nvramp2percentused
                                @{
                                @   UINT32 totalnvramp2;
                                @   UINT32 nvram_unused;
                                @   UINT32 must_reserve_nvram;
                                @};

#**********************************************************************
                                @#define DMC_CACHE_SIZE_RAIDS (MAX_RAIDS * (sizeof(MRGETRINFO_RSP) + (MAX_PDISKS_PER_RAID * sizeof(MRGETRINFO_RSP_EXT))))
                                @struct DMC_raid_structure
                                @{
                                @   UINT16 cacheRaidCount_DMC;
                                @   UINT8  cacheRaidMap_DMC[(MAX_RAIDS + 7) / 8];  @ A bit for each raid
                                @   UINT8 *cacheRaidAddr_DMC[MAX_RAIDS];           @ Array pointing to raids
                                @   UINT8  cacheRaidBuffer_DMC[DMC_CACHE_SIZE_RAIDS]; @ Data for RDDs
                                @};

#**********************************************************************
                                @#define DMC_CACHE_SIZE_VDISKS (MAX_VIRTUAL_DISKS * (sizeof(MRGETVINFO_RSP) + (MAX_SEGMENTS * sizeof(MREXTENDED_VINFO_RSP_PKT))))
                                @struct DMC_vdisk_structure
                                @{
                                @   UINT16 cachevdiskCount_DMC;
                                @   UINT8  cacheVDiskMap_DMC[(MAX_VIRTUAL_DISKS + 7) / 8]; @ A bit for each raid
                                @   UINT8 *cacheVDiskAddr_DMC[MAX_VIRTUAL_DISKS];  @ Array pointing to vdisks
                                @   UINT8  cacheVDiskBuffer_DMC[DMC_CACHE_SIZE_VDISKS]; @ Data for VDDs
                                @   UINT8  cacheVDiskMirrorMap_DMC[(MAX_VIRTUAL_DISKS + 7) / 8]; @ Data for VDDs
                                @   UINT8  cacheVDiskCopyMap_DMC[(MAX_VIRTUAL_DISKS + 7) / 8]; @ Data for VDDs
                                @};

#**********************************************************************
# NOTDONEYET -- NO_PDISK_CACHE
                                @#define DMC_CACHE_SIZE_PDISKS (MAX_PHYSICAL_DISKS)
                                @struct DMC_pdisk_structure
                                @{
                                @   UINT16 cachepdiskCount_DMC;
                                @   UINT8 *cachePDiskAddr_DMC[MAX_PHYSICAL_DISKS]; @ Array pointing to pdisks
                                @   UINT8  cachePDiskBuffer_DMC[DMC_CACHE_SIZE_PDISKS]; @ Data for PDDs
                                @};

#******************************************************************************
# NOTDONEYET -- NO_SERVER_CACHE
                                @#define DMC_CACHE_SIZE_SERVERS (MAX_SERVERS)
                                @struct DMC_server_structure
                                @{
                                @   UINT16 cacheserversCount_DMC;
                                @   UINT8 *cacheServerAddr_DMC[MAX_SERVERS];       @ Array pointing to servers
                                @   UINT8  cacheServerBuffer_DMC[DMC_CACHE_SIZE_SERVERS]; @ Data for servers
                                @};

#******************************************************************************
# Public variables
#******************************************************************************
                                @extern CCB_DDR_TABLE ccbDdrTable;

#******************************************************************************
# Public function prototypes
#******************************************************************************
                                @extern void InitDdrTable(void);
                                @extern void InitCCBDMCtable(void);
                                @extern UINT8 FetchFIDVersion(UINT32 fid);
                                @extern UINT8 DDRisLinuxFileReadFid(UINT32 fid);
                                @extern INT32 DDRLinuxFileSet(const void *addr, UINT32 len);
                                @extern void DDRLinuxFileClose(void);
                                @extern UINT32 DDRLinuxFileRead(void *addr, UINT32 len);
                                @extern INT32 DMC(INT32 *, char *, UINT32, void *, UINT32);
                                @extern struct DMC *DMC_CCB;

                                @#ifdef __cplusplus
                                @#pragma pack(pop)
                                @#endif

                                @#endif                         @ _DDR_H
#******************************************************************************
#
####
## Modelines:
## Local Variables:
## tab-width: 4
## indent-tabs-mode: nil
## End:
## vi:sw=4 ts=4 expandtab
