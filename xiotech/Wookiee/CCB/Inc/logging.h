/* $Id: logging.h 143845 2010-07-07 20:51:58Z mdr $ */
/**
******************************************************************************
**
**  @file       logging.h
**
**  @brief      Header file for logging.c
**
**  Copyright (c) 2001,2009-2010 XIOtech Corporation. All rights reserved.
**
******************************************************************************
**/
#ifndef _LOGGING_H_
#define _LOGGING_H_

#include "kernel.h"
#include "mutex.h"
#include "XIO_Types.h"

#ifdef __cplusplus
#pragma pack(push,1)
#endif


/*****************************************************************************
** Public defines
*****************************************************************************/
#define MAX_FORMATTED_ENTRY_SIZE    (1024)

/*
** Init Log Inputs
*/
#define INIT_LOGS_NOW               0x01
#define INIT_ON_FIRST_EVENT         0x02
#define CLEAR_LOGS_NOW              0x03
#define CLEAR_ON_FIRST_EVENT        0x04
#define FIRST_LOG_EVENT             0x05

/*
** Logging States
*/
#define LOG_VALID                   0x01
#define LOG_ERASE_PENDING           0x02

/*
** Define levels above which a log entry will be classified as either an error,
** warning, or debug. Anything below these levels will be classified as info.
*/
#define LE_WARNING_LEVEL    0x200
#define LE_ERROR_LEVEL      0x400
#define LE_DEBUG_LEVEL      0x4000

/*
** Define the different classes of log events
*/
#define LOG_TYPE_INFO        0
#define LOG_TYPE_WARNING     1
#define LOG_TYPE_ERROR       2
#define LOG_TYPE_DEBUG       3
#define LOG_TYPE_FATAL       4

/* Log entry status flags - flags are negative active */

#define LE_STARTED                  0x0001
#define LE_COMPLETE                 0x0002
#define LE_ACKED                    0x4000
#define LE_DELETED                  0x8000
#define LE_ERASED                   0xFFFFFFFF

struct _PI_BINARY_LOG_EVENT;

/*
** Logging MRP header
*/
typedef struct logMRP_t
{
    UINT32      mleEvent;
    UINT32      mleLength;
    UINT32      mleData[256];
} LOG_MRP;

typedef struct
{
    UINT16      year;           /* Year 0 -9999                        */
    UINT8       month;          /* Month 1 -12                         */
    UINT8       date;           /* Day of the month 1 - 31             */
    UINT8       day;            /* Day of the week 1 - 7 (1 = Sunday)  */
    UINT8       hours;          /* Hour 0 - 23     (0 = midnight)      */
    UINT8       minutes;        /* Minutes 0 - 59                      */
    UINT8       seconds;        /* Seconds 0 - 59                      */
} LOGTIME;


/*
 * Type for 32-bit sequence numbers.
 */
typedef UINT32  SEQ32;


/*
 * Log Entry Header
 */
typedef struct LOG_HDR
{
    union
    {
        struct
        {
            UINT16      flags;
            UINT16      reserved;
        } status;
        UINT32      statusWord;
    } le;

    SEQ32   masterSequence;
    SEQ32   sequence;
    UINT16  length;
    UINT16  eventCode;
    UINT32  timeStamp;
} LOG_HDR;

/*
 * Define the different classes of MMC log events
 */
#define MMC_LOG_TYPE_INFO       0
#define MMC_LOG_TYPE_WARNING    1
#define MMC_LOG_TYPE_ERROR      2
#define MMC_LOG_TYPE_FATAL      3

/*
 * Define the different classes of MMC extended log defs
 *
 * eType is generated by adding 1 (or more) base type with 1 extended type.
 * For example if you have a fan environmental error message, the
 * etype would by 0x20 + 0x08 = 0x28
 */

/* Base eType constants */
#define MMC_ELOG_NORMAL         0x00
#define MMC_ELOG_FATAL_BIT      0x80
#define MMC_ELOG_POWERUP_BIT    0x40
#define MMC_ELOG_ENV_BIT        0x20

/* Extended eType constants */
#define MMC_ELOG_USER_MSG       0
#define MMC_ELOG_PS             1
#define MMC_ELOG_HAB            2
#define MMC_ELOG_UPS            3
#define MMC_ELOG_DEBUG          4
#define MMC_ELOG_DIAG           5
#define MMC_ELOG_SCSI           6
#define MMC_ELOG_MEMPROB        7
#define MMC_ELOG_FAN            8
#define MMC_ELOG_TEMP           9
#define MMC_ELOG_PRED           10
#define MMC_ELOG_CONTROLLER     14

#define MMC_MESSAGE_SIZE    40

/*****************************************************************************
** Public variables
*****************************************************************************/


/*****************************************************************************
** Public function prototypes
*****************************************************************************/

/*----------------------------------------------------------------------------
**  Function Name: InitLogs
**
**  Comments: Initializes the log information structure and sets the log
**            pointer to the last log entry. If no valid log sectors exists
**            (i.e. this is the first time the logs have been created), the
**            log sectors will be erased and the first sector marked as
**            valid.
**            Flash operations can take a relatively long period of time and
**            thus these functions may perform task exchanges. To avoid
**            conflicts with initializing the logs (when the flash sectors
**            need to be written) and receiving new log events (through a
**            process exchange), initialization of flash logs can be delayed
**            until the first log event is received. This is accomplished
**            thru the initType input. In these cases the log structure will
**            be initialized, but the flash will not be written until the
**            function is invoked again (with the FIRST_LOG_EVENT input).
**            If the user is sure not conflict will exist with other processes
**            trying to create log events, the _NOW inputs can be used.
**            The CLEAR_ inputs force the logs back to an initial (erased)
**            state.
**
**  Parameters: initType
**                 - INIT_LOGS_NOW - initialize log pointers now, including
**                                   flash writes (if required)
**                 - INIT_ON_FIRST_EVENT - initialize log pointers now, but
**                                   delay flash writes (if required) until
**                                   the first log event
**                 - CLEAR_LOGS_NOW - clear (erase) flash logs and initialize
**                                   log pointers now.
**                 - CLEAR_LOGS_ON_FIRST_EVENT - delay clearing (erase) of flash
**                                   logs and initialization log pointers
**                                   until first log event.
**                 - FIRST_LOG_EVENT - performed delayed log initialization as
**                                   saved in the logState variable
**
**
**  Returns:
**
**--------------------------------------------------------------------------*/
extern void InitLogs(UINT16 initType);

/*----------------------------------------------------------------------------
**  Function Name: LogMessage
**
**  Comments:  Logs a text message as info, error, warning, or debug.
**
**  Parameters: type -  type of message.
**                          LOG_TYPE_INFO        0
**                          LOG_TYPE_WARNING     1
**                          LOG_TYPE_ERROR       2
**                          LOG_TYPE_DEBUG       3
**
**              fmt  -  String format message to log.
**
**              ...  -  Replacement text information
**
**  Returns:    None
**--------------------------------------------------------------------------*/
extern void LogMessage(UINT32 msgType, const char *fmt, ...)
    __attribute__((__format__(__printf__, 2, 3)));

/*----------------------------------------------------------------------------
**  Function Name: LogTextMessage
**
**  Comments:  Logs a text message as info, error, warning, or debug.
**
**  Parameters: type -  type of message.
**                          LOG_TYPE_INFO        0
**                          LOG_TYPE_WARNING     1
**                          LOG_TYPE_ERROR       2
**                          LOG_TYPE_DEBUG       3
**
**              msg  -  String message to log.
**
**  Returns:    GOOD or ERROR.
**
**--------------------------------------------------------------------------*/
extern INT32 LogTextMessage(UINT32 msgType, char *msg);

/*----------------------------------------------------------------------------
**  Function Name: LogEvent
**
**  Comments:  Moves the log data from the MRP to the flash. Adds a log entry
**             header with a timestamp. Checkpoints the writing of the log.
**             Advances next log entry pointer.
**
**  Parameters: ilt  - ilt pointer
**              mrp  - mrp pointer
**
**  Returns:
**
**--------------------------------------------------------------------------*/
extern void LogEvent(LOG_MRP *mrp);

/*----------------------------------------------------------------------------
**  Function Name: ValidLogEntry
**
**  Comments:   Test to see if the Log Entry is valid.
**
**  Parameters:
**
**  Returns:  1 - valid log entry
**            0 - invalid log entry
**
**--------------------------------------------------------------------------*/
extern int  ValidLogEntry(LOG_HDR *);

/*----------------------------------------------------------------------------
**  Function Name: GetEventType
**
**  Comments:  From the log event code, determine the class of the event.
**
**  Parameters:   eventCode  - log entry event code
**
**  Returns:      eventType - LOG_TYPE_INFO,
**                            LOG_TYPE_WARNING,
**                            LOG_TYPE_ERROR,
**                            LOG_TYPE_FATAL,
**                            LOG_TYPE_DEBUG
**
**--------------------------------------------------------------------------*/
extern UINT8 GetEventType(UINT16 eventCode);

extern void InitLogMutex(void);
extern int LogIsAcked(LOG_HDR *);
extern void GetStatusString(UINT16 status, UINT16 eventCode, char *strPtr);
extern UINT32   LogInfoRequest(UINT8 *, UINT32 size, UINT16 mode,
            UINT32 *eventCount, SEQ32 *sequenceNumber, UINT32 *responseLength);
extern void LogClearRequest(void);
extern LOG_HDR *LogAcknowledge(SEQ32 seq);
extern LOG_HDR *GetLogEntry(SEQ32 seq);
extern SEQ32 GetNextLogSequence(void);
extern void EnqueuePIAsyncNotification(struct _PI_BINARY_LOG_EVENT *);


#ifdef __cplusplus
#pragma pack(pop)
#endif

#endif /* _LOGGING_H_ */

/***
** Modelines:
** Local Variables:
** tab-width: 4
** indent-tabs-mode: nil
** End:
** vi:sw=4 ts=4 expandtab
**/
