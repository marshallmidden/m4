                        How Use makeinc.pl

                    Mark D. Rustad, 2008/01/09

makeinc.pl is a perl script designed to allow definitions shared by platform
C and i960 code to be derived from a single source. The tool takes a .def
file as input and produces a .inc and .h file in the specified directory.

The makeinc.pl script is automatically invoked by the relevant Makefile to
produce the generated .h and .inc files into the appropriate objects
directory. The makeinc.pl script command line looks like this:

makeinc.pl [-o <output dir>] input.def

Where <output dir> represents the directory to receive the created .h and
.inc files. The basename of these files will be the same as the basename of
the input .def file.

The input .def has the following characteristics:

*   Lines that begin with a '#' character are treated as comments

*   Lines that do not contain an '@' character are treated as comments

Lines that contain '@' are broken up into sections by the '@' characters.
The portion of the line up to the first '@' is used to produce the .inc
content. The portion between the first and second '@' is used to produce
the .h content. The portion after the second '@' is treated as a comment
that is emitted into both the .inc and .h files.

Additional features are recognized in the first portion to increase the
utility of the tool. Specifically, some new "assembly" directives are
processed by the script. These are listed below:


.def symbol value
-----------------

.def emits a ".set symbol,value" to the .inc file, but also appends the
"value" part to the end of the line that the .h file content would be.
Assuming that the "value" can be correctly evaluated by both the i960
translator and GCC, then it assures that the two symbols have the same
value by only naming it once in the file.

Example:
.def file                       ->  .inc file           .h file
-------------------------------     --------------      -----------------
.def MAXTAG 32  @#define MAXTAG     .set MAXTAG,32      #define MAXTAG 32


.struct
-------

.struct is processed by makinc.pl to mark the beginning of a structure
definition. It emits nothing to the .inc file, but clears the internal
offset counter of the makeinc.pl script. It has no direct effect on what
is generated in the .h file.

Example:
.def file                       ->  .inc file           .h file
-------------------------------     --------------      -----------------
.struct     @typedef struct DCD                         typedef struct DCD


In each of the subsequent examples, "offset" represents the numeric value
of the internal offset counter before that counter is incremented by the
size of the field being declared.


.b symbol [num]
---------------

.b is processed by makeinc.pl to declare a single-byte field in a structure
definition. Optionally a count can be specified to delcare an array of bytes.
It emits a .set to define the symbol and increments the internal counter used
to produce structure offset for the .inc file. It has no direct effect on
what is generated in the .h file.

Examples:
.def file                       ->  .inc file           .h file
-------------------------------     ------------------  ------------------
.b symbol   @   UINT8   symbol;     .set symbol,offset     UINT8   symbol;
.b sym   6  @   UINT8   sym;        .set sym,offset        UINT8   sym[6];


.s symbol [num]
---------------

.s is processed by makeinc.pl to declare a two-byte field in a structure
definition. Optionally a count can be specified to delcare an array of shorts.
It emits a .set to define the symbol and increments the internal counter used
to produce structure offset for the .inc file. It has no direct effect on
what is generated in the .h file.

Example:
.def file                       ->  .inc file           .h file
-------------------------------     ------------------  ------------------
.s symbol   @   UINT16  symbol;     .set symbol,offset     UINT16  symbol;


.w symbol [num]
---------------

.w is processed by makeinc.pl to declare a four-byte field in a structure
definition. Optionally a count can be specified to delcare an array of words.
It emits a .set to define the symbol and increments the internal counter used
to produce structure offset for the .inc file. It has no direct effect on
what is generated in the .h file.

Example:
.def file                       ->  .inc file           .h file
-------------------------------     ------------------  ------------------
.w symbol   @   UINT32  symbol;     .set symbol,offset     UINT32  symbol;


.l symbol [num]
---------------

.l is processed by makeinc.pl to declare an eight-byte field in a structure
definition. Optionally a count can be specified to delcare an array of longs.
It emits a .set to define the symbol and increments the internal counter used
to produce structure offset for the .inc file. It has no direct effect on
what is generated in the .h file.

Example:
.def file                       ->  .inc file           .h file
-------------------------------     ------------------  ------------------
.l symbol   @   UINT64  symbol;     .set symbol,offset     UINT64  symbol;


.t symbol [num]
---------------

.t is processed by makeinc.pl to declare a twelve-byte field in a structure
definition. Optionally a count can be specified to delcare an array of triples.
It emits a .set to define the symbol and increments the internal counter used
to produce structure offset for the .inc file. It has no direct effect on
what is generated in the .h file.

Example:
.def file                       ->  .inc file           .h file
-------------------------------     ------------------  ------------------
.t symbol   @   UINT96  symbol;     .set symbol,offset     UINT96  symbol;


.q symbol [num]
---------------

.q is processed by makeinc.pl to declare a 16-byte field in a structure
definition. Optionally a count can be specified to delcare an array of quads.
It emits a .set to define the symbol and increments the internal counter used
to produce structure offset for the .inc file. It has no direct effect on
what is generated in the .h file.

Example:
.def file                       ->  .inc file           .h file
-------------------------------     ------------------  ------------------
.q symbol   @   UINT128 symbol;     .set symbol,offset     UINT128 symbol;


.f symbol size
--------------

.f is processed by makeinc.pl to declare a field with an arbitrary size in
a structure definition. If the "size" is all numeric, it will be evaluated
as a decimal number and added to the internal offset counter as the sizes
of the previous directives are. If it is not all numeric, the "size" value
will be enclosed in parenthesis and appended along with a "+" to an internal
string that is emitted along with the offset counter. Thus, makeinc.pl does
not necessarily evaluate "size", but can pass a symbolic expression through
to be evaluated later.  It has no direct effect on what is generated in the
.h file.

Examples:
.def file                               ->  .inc file           .h file
-------------------------------             ------------------  ---------------
.f sym1 0        @                          .set sym1,offset
.f sym2 MAXCHN*4 @ UINT32 sym2[MAX_PORTS];  .set sym2,offset
.f sym3 176      @ UINT8  sym3[176];        .set sym3,offset+(MAXCHN*4)


NOTES
-----

Include files that have conditional content may or may not be possible to
represent as reasonable .def files. Remember that makeinc.pl does not itself
do any handling of #ifdef or .ifdef but it does maintain the internal offset
counter used in conjunction with .struct. If conditional directives are
caused to be emitted into either the .h or .inc that affect the interpretation
of a structure being declared with .struct, things will be all messed up.
Either the file is not a candidate for this handling, or the conditional needs
to be eliminated somehow. In a file I already converted, I ran into a
conditional on VDISK priority. Since that conditional is always true, and
the only ill effect of removing the conditional from the declaration would be
to have a couple unused fields, I decided to just remove the conditional and
proceed. That is not always a prudent thing to do, so do some asking around
if there are questions.

Also, it is not required that converting things to .def files be undertaken
as an activity or objective. At this time I just wanted to establish a means
of creating these kinds of definitions. Nothings requires that it always be
used.

# vi:sw=4 ts=4 expandtab
