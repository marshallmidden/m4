# Start of file fe_proto
#-----------------------------------------------------------------------------
# CA => C routine calls Assembler routine.
# ! means "NOT".
# ?PERF means conditional on define PERF (-DPERF) from command line.
# AC => Assembler routine calls C routine.
# LC => C routine referenced in assembler via computed goto or fork.
# LA => Assembler routine referenced in C, but i960.as does computed goto it.
# Variable => C variable referenced in i960 assembler.
#-----------------------------------------------------------------------------
# C routines calling Assembler.
CA void K$start(void);

CA void error08(void);
CA void error11(void);
CA void error31(void);
CA void errorLinux(void);

CA void C_recv_scsi_io(g1=void*);
CA void* DEF_AllocServer(void);
CA void* DEF_AllocTarg(void);
CA void DEF_HashLUN(void*, UINT32, UINT32);
CA void DEF_Que(void*);
CA void DEF_RelSDDLVM(void*);
CA void DLM$PortReady(void);
CA void* DLM_FindController(UINT32);
CA void isp$r23qx(void *);
CA UINT32 ISP_ResetChip(UINT8, UINT32);
CA void ISP_SubmitMarker(UINT8, UINT16, UINT32, UINT16);
CA void I_recv_offline(UINT32);
CA void I_recv_online(UINT32, UINT32, UINT32);
CA void I_recv_rinit(UINT32);
CA void M$flight_rec(void);
CA void MSC_LogMessageRel(void*, UINT32);
CA int MSC_MemCmp(void*, void*, UINT32);
CA void MSC_NMIClear(void);
CA void MSC_QueHBeat(void*);
CA void NVA_ClearP4(void);
?ENABLE_SG CA void* PM_MergeSGL(void*, void*);
CA void PM_MoveSGL(void*, void*);
CA void isp$complete_io(g0=UINT32, g1=ILT *, g11=void *);
CA UINT32 ISP_IsMyWWN(void *);
CA UINT32 ISP_initiate_io(void *);
CA void ISP_NotifyAck(UINT8, void *);
CA void wc$msgCacheRecoverFail(UINT32, void*);
CA void wc_recoveryFlushRequest(void*);
CA UINT32 C$stop(UINT8, UINT8);
CA void TaskSleepMS(UINT32);
CA void TaskSleepNoSwap(UINT32);
CA void TaskSwitch(void);
# CA struct RB_NODE_S * RB$locateNextCIntf(struct RB_NODE_S *);
CA int* RB$locateNextCIntf(int*);

# void EnqueueILTW(void (*qr)(), ILT *);
CA void EnqueueILTW(int*, int*);
CA void EnqueueILT(int*, int*, void*);
# void* TaskCreate(void *func, UINT8 prio, ...);
CA void* TaskCreate2(void*, UINT8);
CA void* TaskCreate3(void*, UINT8, int);
CA void* TaskCreate4(void*, UINT8, int, int);
CA void* TaskCreate5(void*, UINT8, int, int, int);
CA void* TaskCreate6(void*, UINT8, int, int, int, int);
CA void* TaskCreate7(void*, UINT8, int, int, int, int, int);
CA void* TaskCreate8(void*, UINT8, int, int, int, int, int, int);
CA void* TaskCreatePerm2(void*, UINT8);
CA void* TaskCreatePerm3(void*, UINT8, UINT32);
CA void* TaskCreatePerm2Shared(void*, UINT8);
CA void KernelDispatch(UINT32, void*, void*, UINT32);
CA void L$send_packet(void*, UINT32, UINT32, void*, UINT32, void*, UINT32);

CA UINT32 CA_QueryMirrorPartnerChange (UINT32);
CA void   NVA_ReInitialize(void);
CA void   C_Enable(UINT32);
CA void   C_que(g1=ILT *);
CA void   C_ncrComp1(g0=UINT32, g1=ILT *);
CA void   WC_batHealth(UINT8, UINT8);
CA void   CA_LogMirrorFailure(UINT32, void*);
CA UINT32 WC_FlushInvalidateVID(UINT16);
CA void   WC_SetGlobalDisable(void);
CA UINT32 DLM$queryFEcomm(UINT32);

CA void MAG_SrvLogout(void *, void *);
CA void MAG_prComp(void *);
CA void MAG_prAbortTask(void *);
CA void MAG_CheckNextTask(void *);
CA void I_logout(void*);
CA void I_login(UINT16, UINT16);
CA UINT16 I_get_lid(UINT8);
CA void I_put_lid(UINT8,UINT16);
CA void I_queTLMT(g4=void *, g6=void *);
CA void APL_StartIO(g4=void *, g6=void *);
CA void APL_TimeoutILT(g1=void *, g4=void *, g5=void *, g6=void *);
CA void APL_AbortILT(g1=void *, g4=void *, g5=void *, g6=void *);
CA void I_removeLUN(g6=void *, g5=void *, g4=void *);
CA void LLD_Offline(UINT8 );
CA void LLD_Online(UINT8 );
CA UINT32 LLD_CheckTargetDel(g5=void *);
CA void LLD_TargetOffline(g5=void *);
CA void LLD_TargetOnline(g5=void *);

!?PERF CA void mag$tr_MAG$submit_vrp(g2=void*, g7=void*, g9=void*);
CA void MAG$submit_vrp(g1=void*);
CA void mag$updtlen(g1=void*, g9=void*);
CA void mag$ISP$receive_io(g1=void*, g7=void*, g9=void*);

#-----------------------------------------------------------------------------
# Assembler calling "c" follow.
AC void LL_Init(void);
AC UINT32 LL_QueueMessageToSend(ILT*);
AC void LL_SendPacket(void*, UINT32, UINT32, void*, UINT32, void*, UINT32);
AC void LL_TargetTaskCompletion(UINT32, ILT*);
AC void LL_Errtrap(void);
AC void tsl_init(void);
AC void tsl_ev_check(UINT8, UINT8);
AC INT32 MM_Write(UINT32, UINT8 *, UINT32);
AC INT32 MM_Read(UINT32, UINT8 *, UINT32);

AC UINT8 DEF_CBridge(void*);
AC UINT32 DEF_WWNLookup(UINT64, UINT16, UINT32, UINT8 *);
AC UINT16 ISP_AbortIOCB(UINT8, UINT32, UINT16, UINT32);
AC UINT16 ISP_ClearTaskSet(UINT8, UINT32, UINT16);
AC void ISP_DumpQL(UINT8, UINT32);
AC void ISP_GenOffline(UINT32);
AC UINT16 ISP_GetPortDB(UINT8, UINT32, UINT16);
AC UINT32 ISP_IsReady(UINT32);
AC void WC_initTag(void*);
AC UINT16 isp_SetFirmwareOptions(UINT8);
AC void isp_exec_cmd(UINT8, void*, UINT32);
AC void isp_exec_cmd_sri(UINT8, void*, UINT32);
AC UINT16 isp_loadQFW(UINT8);
AC void ISP2400_IntrServiceRoutine(UINT32);
AC UINT32 ISP2400_SetupInit(UINT32);
AC UINT32 ISP2400_InitFW(UINT32);
AC UINT32 ISP2400_ResetChip(UINT32);
AC UINT32 ISP2400_IcbStore(UINT32, UINT32);
AC UINT32 ISP_ChkIfPeerTarget(UINT64);
AC UINT32 isp2400_sendctGAN(UINT32, UINT32, UINT32);
AC UINT32 isp2400_build_ctio7(UINT16, void *);
AC void isp2400_build_ntack(UINT16, void *, void *);
AC UINT32 isp_handle2alpa(UINT8, UINT32);
AC UINT16 isp_alpa2handle(UINT8, UINT32, UINT8);
AC UINT32 ISP_LoginFabricPort(UINT8, UINT32 *, UINT32);
AC UINT32 ISP_LogoutFabricPort(UINT8, UINT32, UINT32);
AC void LI_RegisterIRQ(UINT32, void *, UINT32);
AC void wc_recoveryInit(void);
AC void WC_MirrorExec(void);
AC UINT32 WC_CheckBypass(void);
AC void WC_MirrorBE(void*, void*);
AC void CheckNodeMaximum(void*);
AC void WC_RestoreData(void);
AC void WC_CopyNVwWait(void*, void*, UINT8, UINT32);
AC void WC_MirrorBETagExec(void);
AC void CA_Que(void *);
AC UINT32 CA_GetReadComp(void);
AC UINT32 isp_registerFc4(UINT8, UINT32, void*);
AC UINT8 ISP_IsPrimaryPort(UINT16, UINT16);

AC UINT32 fsl_findIMT(UINT64, UINT16, UINT16);
AC void fsl_tmf_cb1(UINT32, void*);
AC UINT32 fsl_ResetPort(UINT8, UINT32);
AC void fsl_UpdName(void *);
AC void fsl_LogZoneInquiry(void*);
AC UINT64 fsl_getPortWWN(UINT16, UINT16);
AC UINT64 fsl_getNodeWWN(UINT16, UINT16);
AC UINT8  fsl_updateTMT(UINT16, UINT16, UINT32);
AC UINT32 fsl_isIFP(UINT16, UINT16);
AC void fsl_login(void*);
AC void fsl_logout(UINT16, UINT16);
AC UINT32 fsl_sgTx(void*);
AC void fsl_resetLPMap(UINT16);
AC void fsl_initLPMap(UINT16);

AC UINT8 iscsiFeProcMsg(void*);
AC UINT64 iSCSI_GetISID(UINT16, UINT16);
AC UINT32 fsl_get_tar(UINT16);

# Following found via looking at externals in load/store.
AC void CalcHBAStats(void);
AC void InitHBAStats(void);
AC void isp_ClearFC4TypesRegistration(UINT32);
AC UINT32 isp2400_ReadGPIOD(UINT8);
AC void ISP_LoopDown(UINT32);
AC UINT16 ISP_GetFirmwareState(UINT8);
AC UINT16 isp2400_initiate_io(UINT16, ILT *, struct DEV *);
# Following routines are for persistent reservations (used in mag driver)
AC UINT32 presv_in(void *);
AC UINT32 presv_out(void *, void *);
AC void presv_abort(void *, void *);
AC void pr_updCmdHandler(void *);
AC void pr_cfgRetrieve(UINT16);
AC void pr_rmVID(void *);
?MODEL_7000 AC void CA_Check4PAB(void *, void *);
?MODEL_4700 AC void CA_Check4PAB(void *, void *);

AC void I_Offline(UINT16 );
AC void I_Online(UINT16 , UINT16 );
AC void I_RemoveTarget(void * );
AC void I_Rescan(void *);

AC void mag1_vfymedia(UINT32, const UINT32, UINT32, UINT32, UINT32, UINT32);

#-----------------------------------------------------------------------------
# Follow are "c" routines that are referenced in i960 via either a "goto",
# "call(r4)", "bx (r4), or by the forking process.  They need to have an
# i960 "call" stub routine that then calls the Assembler to "c" glue routines.

LC void DLM_MirrorPartnerFECommAvailable(void);
LC void ISP_monitor_async(UINT32, UINT32, UINT8);
LC void ISP_monitor_atio(UINT32, UINT32, UINT8);
LC void ISP_RCV_IO_Queue_exec(UINT32, UINT32, UINT8);
LC void isp_monitorFwhb(void);
LC void isp_pciConfigError(void);
LC void isp_portFailureHandler(void);
LC void isp_resetProcess(UINT32, UINT32, UINT8, UINT32, UINT32*, UINT32*);

LC void isp_loopEventHandler(UINT32, UINT32, UINT8);
LC void fsl_tlogin(UINT32, UINT32, void *);
LC void fsl_tlogout(UINT32, UINT32, void *);
LC void fsl_tmonitor(void);
LC void t_iSNS(UINT32, UINT32, UINT32);
LC void isp_portOnlineHandler(void);
LC void isp_registerVports(UINT32, UINT32, UINT8);
LC void CA_SplitComp(UINT32 , void *);
LC void CA_ReadVRPComp(UINT32 , void *);
LC void WC_MirrorDRPComplete(UINT32, void*);
LC void WC_WRPExec(void);
LC void WC_TDisExec(void);
LC void WC_WRPQueue(void*, void*);
LC void wc_markWCache(void);

LC void MM_TestTask(UINT32, UINT32, void*);

LC void fsl_Init(UINT32, UINT32, UINT8);
LC void tsl_events(void);
LC void iscsiTimerTaskCallback(void);
LC void fsl_tmf_cb(UINT32, void *);
LC void fsl_ilt_cb(UINT32, void *);
LC void isp2400_targetiocb(UINT32, void *);
LC void tsl_arpTask (UINT32, UINT32, UINT8);
LC void ISCSI_LoopUp (UINT32, UINT32, UINT8);
LC void ISCSI_LoopDown (UINT32, UINT32, UINT8);
LC UINT32 ICL_IsIclPort(UINT8);
LC UINT32 ICL_IsIclMagLinkVRP(void*);
LC void  ICL_SetIclMagLinkFlag(void*);
LC void  ICL_ClearIclMagLinkFlag(void*);
LC void  ICL_SendDg_Dump1(void*, void*);
LC void  ICL_LogEvent(UINT32);
LC void  ICL_UpdateDmlPathStats(void*);
LC UINT32 ICL_GetTargetPath(void*);
LC UINT32 getIdd(UINT16, UINT16);
LC void  ICL_NotifyIclPathMade (void *);
LC void  ICL_NotifyIclPathLost(void *);
LC void ICL_CreateIclTargets (void);
LC void ICL_CheckIclExistence (void);
LC void t_iscsiDiscover(UINT32, UINT32, UINT16, void *);
LC void t_fcDiscover(UINT32, UINT32, UINT16, void *);
LC void t_iTimer(UINT32, UINT32, UINT16);
LC void tScan(UINT32, UINT32, void *);
LC void cbScan(UINT32, void *);

#CQT 17703_FIX
LC UINT8 ICL_onlyIclPathExists(void *);

#CQT 13112_FIX
LC void LL_QueFullReqHandlingTask(UINT32);

# Following are in the new Link Layer, TaskCreate or TaskCreatePerm.
LC void LL_InitiatorTask(void*);
LC void LL_CompletionTask(void*);
LC void LL_TargetTask(void*);

# Marshall found these missing/wrong 2008-03-12
LC void nv_DMAExec(void*);
LC void nv_DMAComplete(void*);
LC void MM_MonitorTask(void*);
LC void NV_ScrubTask(void*);
?MODEL_7000 LC void CA_DeferredBusyTask(void);
?MODEL_4700 LC void CA_DeferredBusyTask(void);
?FLIGHTRECORDER LC void flightrecorder_task(void*);

#-----------------------------------------------------------------------------
# Routines in assembler that are referenced from "c".  Put a asm label on it.
# This is only useful if the assembler code actually jumps to it, as per
# a TaskCreate or TaskCreatePerm.
LA QWComp
LA DEF_RmtWait
LA PM_RelILT2
LA c$qio

LA mag1_iocr
LA mag1_srpreq
LA mag1_MAGcomp

#-----------------------------------------------------------------------------
# Variables defined in "c".
Variable ulong CT_fork_tmp

Variable ulong ispCp
Variable ulong iscsimap
Variable ulong ispInterrupt
Variable ulong ispLid
Variable ulong ispOnline
Variable ulong ispSysErr
Variable ulong ispofflfail
Variable ulong isppfpcb
Variable ulong ispprc
Variable ulong isprev
Variable ulong mpn
Variable ulong portdb
Variable ulong tar
Variable ulong K_ii
Variable ulong BATTERY_BACKUP
Variable ulong hbaPerRdBlocks
Variable ulong hbaPerRdCmds
Variable ulong hbaPerWrBlocks
Variable ulong hbaPerWrCmds
Variable ulong sessionSize
Variable ulong connectionSize
Variable UINT8 ispPortAssignment;
#-----------------------------------------------------------------------------
# End of file fe_proto
