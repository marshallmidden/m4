# Start of file be_proto
#-----------------------------------------------------------------------------
# ! means "NOT".
# ?PERF means conditional on define PERF (-DPERF) from command line.
# CA => C routine calls Assembler routine.
# AC => Assembler routine calls C routine.
# LC => C routine referenced in assembler via computed goto or fork.
# LA => Assembler routine referenced in C, but i960.as does computed goto it.
# Variable => C variable referenced in i960 assembler.
#-----------------------------------------------------------------------------
CA void K$start(void);
CA void K_comp(g1=ILT *);
CA void complete_scr(void *, SCRP1 *);
CA OGER* D$alloc_oger(g3=UINT32);
CA void EnqueueILT(int*, int*, void*);
CA void EnqueueILTW(int*, int*);
CA void error08(void);
CA void error11(void);
CA void error31(void);
CA void errorLinux(void);
CA UINT8 DEF_CacheStop(UINT8, UINT8);
CA void DEF_CacheResume(UINT8, UINT8);

CA void* DEF_build_slink_structures(UINT64, UINT32, UINT32);
CA void DEF_Slink_Delete(UINT32);
CA void DEF_Kill_SS_Structs(SSMS*);
CA void* DC_AllocPDD(void);
CA void* DC_AllocPSD(void);
CA void* DC_AllocRDD(UINT32);
CA void* DC_AllocVDD(void);
CA void* DC_ConvPDD2PSD(void*);
CA void DC_DeleteRAID(void*);
CA void DC_RelPDD(void*);
CA void DC_RelRDDPSD(void*);
CA void* DEF_AllocServer(void);
CA void* DEF_AllocTarg(void);
CA void* DEF_FindPDD(UINT8, UINT32, UINT16);
CA void* DEF_FindPDDWWN(UINT64, UINT16);
CA void DEF_HashLUN(void*, UINT32, UINT32);
CA void DEF_InsertPDD(void*);
CA void DEF_Que(void*);
CA void DEF_QueRInit(void*);
CA void DEF_RelSDDLVM(void*);
CA void DEF_SignalServerUpdate(void);
CA void DEF_SignalVDiskUpdate(void);
CA void DEF_TerminateBackground(void);
CA void DEF_UpdRmtCache(void);
CA void DEF_UpdRmtCacheGlobal(void);
CA void DEF_UpdRmtCacheSingle(UINT16, UINT16);
CA void DEF_UpdRmtSysInfo(void);
CA void DEF_UpdRmtTarg(UINT16, UINT16);
CA void DEF_SndConfigOpt(void);
CA void* DLM_FindController(UINT32);
CA void FS_InitDirectory(void*);
CA void FS_Que(void*);
CA UINT32 FS_UpdateFS(void*, UINT32);

CA void M$flight_rec(void);
CA UINT8 MSC_ChkStat(void*);
CA void MSC_LogMessageRel(void*, UINT32);
CA int MSC_MemCmp(void*, void*, UINT32);
CA void MSC_NMIClear(void);
CA void MSC_QueHBeat(void*);
CA void NVA_ClearP3(void);
CA void NVA_ClearP4(void);
CA void NV_P2Update(void);
CA void NV_P2UpdateConfig(void);
CA void NV_SendRefresh(void);
CA UINT32 ON_CreateDefaults(UINT32);
CA void ON_CreateTargetWWN(void*);
CA void ON_InitDrive(void*, UINT32, void*);
CA void ON_LedChanged(void*);
CA void ON_LogBayInserted(void*);
CA void ON_LogBayMissing(void*);
CA void ON_LogBayMoved(void*);
CA void ON_LogDeviceSPath(void*);
CA void ON_LogDriveInserted(void*);
CA void ON_LogDriveReattached(void*);
CA void ON_LogDriveMissing(void*);
CA void ON_LogError(UINT32);
CA void ON_LogSerialChanged(void*);
CA void ON_QueReq(void*);
CA void ON_RelReq(void*);
CA void ON_Resume(void);
CA void ON_Stop(void);
CA void ON_LogDriveDelay(void*);
CA void PM_ClearSGL(void*);
CA void PM_MoveSGL(void*, void*);
CA void PM_RelILTPRPSGL(void*);
CA void PM_RelILTVRPSGL(void*, void*);
CA UINT8 RB_CanSpare(void*);
CA UINT8 rb$getraiderrorstat(g1=void*);
CA void RB_LogHSDepleted(UINT16, UINT16, UINT8);
CA void RB$rerror_que(g1=void*);
CA void RB_RedirectPSD(void*, void*);
CA void RB_SearchForFailedPSDs(void);
CA void RB_setpsdstat(void);
CA void RB_setraidstat(g1=void*);
CA void RB_SetVirtStat(void);
CA void isp$r23qx(void *);
CA UINT32 ISP_ResetChip(UINT8, UINT32);
CA void ISP_SubmitMarker(UINT8, UINT16, UINT32, UINT16);
CA INT32 isp$check_initiator(UINT8, UINT8, void*);
CA void p$wakeup(int*);
CA void P$fail_dev_cmds(int*);
CA void isp$complete_io(g0=UINT32, g1=ILT *, g11=void *);
CA void* TaskCreate2(void*, UINT8);
CA void* TaskCreate3(void*, UINT8, int);
CA void* TaskCreate4(void*, UINT8, int, int);
CA void* TaskCreate5(void*, UINT8, int, int, int);
CA void* TaskCreate6(void*, UINT8, int, int, int, int);
CA void* TaskCreate7(void*, UINT8, int, int, int, int, int);
CA void* TaskCreate8(void*, UINT8, int, int, int, int, int, int);
CA void* TaskCreatePerm2(void*, UINT8);
CA void* TaskCreatePerm3(void*, UINT8, UINT32);
CA void* TaskCreatePerm2Shared(void*, UINT8);
CA void KernelDispatch(UINT32, void*, void*, UINT32);
CA void TaskSleepMS(UINT32);
CA void TaskSleepNoSwap(UINT32);
CA void TaskSwitch(void);
CA void DEF_ReportEvent(void*, UINT32, UINT32, UINT32, UINT32);
CA void DLM_ClearLDDIndx(void);
CA void DLM_ClrLDD(int*);
CA int* DLM_GetLDD(void);
CA void DLM_PutLDD(int*);
CA UINT32 FS_MultiRead(UINT32, void*, UINT32, UINT32, UINT32, UINT32, UINT32);
CA UINT32 FS_ReadFile(UINT32, void*, UINT32, int*, UINT32);
CA UINT32 FS_WriteFile(UINT32, void*, UINT32, int*, UINT32);
CA int* ON_GenReq(int*, int*, void**, int**);
CA UINT32 ON_SCSICmd(void*, void*, UINT32, int*, int**);
CA UINT32 ON_BypassCmd(void*, void*, UINT32, int*, int**, UINT8, UINT16);
CA void RB_RAIDError(void*, void*, void*, void*);

CA void CCSM_cco(void);
CA void CCSM_cosc(UINT8, UINT8, UINT8, COR*);
CA void CCSM_start_copy(g3=COR*);
CA void CCSM_term_copy(g3=COR*);
CA void CCSM_Copy_ended(g3=COR*);
CA void CM_act_cm(CM*);
CA void CM_act_cor(COR*);
CA void CM_act_dcd(DCD*);
CA void CM_act_scd(SCD*);
CA void CM_cnt_smap(g1=SM*);
CA void CM_deact_dcd(DCD*);
CA void CM_deact_scd(SCD*);
CA void CM_dealloc_transRM(g3=COR*);
CA SM* CM_setsmtbl(void);
CA UINT32 FS_MultiWrite(UINT32, void*, UINT32, void*, UINT32, UINT32*, UINT32*);
CA UINT32 CCSM_ST_CpyOwned(void);
CA void CM_mmc_sflag(g3=COR*);
CA void CM_pksnd_local_poll(g3=COR*, g4=CM*);
CA void CM_SuspendCopy_auto(g3=COR*, g4=CM*);
CA void CM_InhibitPoll(g3=COR*);
CA void CM_ResumePoll(g3=COR*);
CA void L$send_packet(void*, UINT32, UINT32, void*, UINT32, void*, UINT32);
CA void D_SetVPri(UINT32, UINT16, UINT8);
CA void DEF_update_spool_percent_used(UINT16);
CA void NVA_ReInitialize(void);

CA COR* CM_find_cor_rid(UINT32, UINT32);
CA void CCSM_swap_raids(UINT32, COR*);
CA void CCSM_resume_copy(COR*);
CA void CCSM_pause_copy(g3=COR*);
CA void CCSM_savenrefresh(void);
CA void call_comp_routine(UINT32, ILT*);
CA UINT32 DLM_send_async_nva(UINT32);

CA void CM_Log_Completion(g0=UINT32, g3=COR *);
CA void CM$ctlrqstq(g1=UINT32);
CA UINT32 v_callx(g2=UINT32,g0=UINT32,g1=UINT32,g3=UINT32,g4=UINT32,g9=UINT32,g10=UINT32,g11=UINT32,g12=UINT32,g13=UINT32,g14=UINT32);
CA UINT32 CCSM$get_cwip(void);
CA void CCSM$reg_sync(g0=UINT32, g3=COR *);
CA void V$xque(g1=ILT *);
CA void DLM$VLraid(g6=UINT64,g8=UINT32,g9=UINT32,g10=UINT32,g11=UINT32,g13=UINT32,g14=UINT32);
CA void o$inquire(UINT32,UINT32,UINT32,UINT32);
CA void r$sxorsgls(g2=UINT32);
CA UINT32 r$rrrb(g2=UINT32);
CA UINT32 R$checkForR5PSDRebuilding(UINT32);
CA g12=UINT32 r$r5a6msglrw(g2=UINT32, g12=UINT32);
CA g12=UINT32 r$r5a6msglwr(g2=UINT32, g12=UINT32);
CA void M$ap3nva(g13=UINT32,g14=UINT32);

CA void K$qxchang(void);
CA void D$SndFTOO(void);

#-----------------------------------------------------------------------------
AC void LL_Init(void);
AC UINT32 LL_QueueMessageToSend(ILT*);
AC void LL_SendPacket(void*, UINT32, UINT32, void*, UINT32, void*, UINT32);
AC void LL_TargetTaskCompletion(UINT32, ILT*);
AC void LL_Errtrap(void);
AC INT32 MM_init(void);
AC INT32 MM_Write(UINT32, UINT8 *, UINT32);
AC INT32 MM_Read(UINT32, UINT8 *, UINT32);
AC void nv_InitSNAdminRegion(UINT32);

AC UINT32 ISP_EnhancedGetPortDBHdl(UINT8, UINT32);
AC bool NVA_CheckReSyncInProgress(void);
AC void NV_P2GenerateImage(void*);
AC void RB_UpdateRebuildWriteState(bool, bool);
AC bool RB_IsRaidRebuildWriteActive(void*);
AC bool RB_IsPSDRebuildWriteActive(void*);
AC void RB_AcceptIOError(void);
AC void RB_CheckRBRemainingIntegrity(void);
AC void RL_LocalImageIPCheck(void);

AC UINT16 DEF_GetVDiskAndCopyTreeAttrs(UINT16);
AC UINT8 DEF_CBridge(void*);
AC UINT16 DEF_CheckForMapped(UINT16);
AC UINT8 DEF_CheckRaidStates(void);
AC void DEF_GetRDA(void*);
AC void DEF_RelRDA(void*);
AC void DEF_UMiscStat(void);
AC UINT32 DEF_WWNLookup(UINT64, UINT16, UINT32, UINT8 *);
AC void DEF_UpdRmtServer(UINT16, UINT16);
AC void DEF_ValidateTarget(void *, UINT8);
AC void DL_ClearVIDLUNMap(UINT16);
AC void FAB_BalanceLoad(void);
AC void FAB_clearLid(UINT8);
AC void FAB_removeDevice(UINT8, void*);
AC UINT32 F_findAltPort(void*);
AC void* F_find_dev(UINT8, void*, UINT32, UINT16);
AC void F_moveDevice(UINT8, void*);
AC UINT32 F_rescanDevice(UINT32);
AC UINT16 ISP_AbortIOCB(UINT8, UINT32, UINT16, UINT32);
AC UINT16 ISP_ClearTaskSet(UINT8, UINT32, UINT16);
AC void ISP_DumpQL(UINT8, UINT32);
AC void ISP_GenOffline(UINT32);
AC UINT16 ISP_LipReset(UINT8, UINT32);
AC UINT16 ISP_Login(UINT8, UINT32);
AC UINT16 ISP_TargetReset(UINT8, UINT32);
AC void LI_RegisterIRQ(UINT32, void *, UINT32);
AC void NVA_ClearReSyncAStatus(void*, UINT32);
AC void NVA_SetReSyncAStatus(void*, UINT32);
AC void NV_BuildLocalImage(void*);
AC UINT32 NV_CalcLocalImageSize(void);
AC void NV_GetVCGID(void*);
AC UINT8 NV_P2ChkSumChk(void*);
AC void NV_P2UpdateNvram(void);
AC void NV_ProcessFSys(void*, UINT8);
AC void NV_RefreshNvram(void*);
AC void NV_ReorderPDDs(void*);
AC void NV_RestoreNvram(void*, void*, UINT8, UINT8);
AC void NV_SendFSys(UINT16);
AC void NV_UpdateLocalImage(void*);
AC void RB_CheckHSCapacity(void*);
AC void RB_CheckHSDepletion(void*);
AC UINT8 RB_CheckOperablePDisks(void);
AC UINT64 RB_FindCapacity(UINT16);
AC void* RB_FindHotSpare(UINT64, UINT16);
AC void SES_StartBGProcess_c(void);
AC void RB_ReInitUsedHotSpare(PDD*);
AC void RB_FailBackEventHandler(void *, UINT32);
AC void RB_NonOpEventHandler(void *, UINT32);

AC UINT16 isp_SetFirmwareOptions(UINT8);
AC void isp_exec_cmd(UINT8, void*, UINT32);
AC void isp_exec_cmd_sri(UINT8, void*, UINT32);
AC UINT16 isp_loadQFW(UINT8);
AC void ISP2400_IntrServiceRoutine(UINT32);
AC void isp_ClearFC4TypesRegistration(UINT32);
AC UINT32 isp2400_ReadGPIOD(UINT8);
AC UINT32 ISP2400_ResetChip(UINT32);
AC UINT32 ISP2400_SetupInit(UINT32);
AC UINT32 ISP2400_InitFW(UINT32);
AC UINT32 ISP2400_IcbStore(UINT32, UINT32);
AC void ISP_LoopDown(UINT32);
AC UINT16 ISP_GetFirmwareState(UINT8);

AC int* ON_ModeSenseSelect(int*, int*, UINT32, UINT32);
AC UINT8 SES_GetDeviceType(int*);
?MODEL_7000 AC UINT8 ISE_GetVolumeInfo(PDD *);
?MODEL_4700 AC UINT8 ISE_GetVolumeInfo(PDD *);
AC void ON_TURSuccess(UINT16 );
AC void ON_UpdateVDisks(void);
AC UINT8 SES_DirectlyAddressable(int*);
AC void RB_CalcAddressRange(UINT16, UINT32, UINT64, int*, int*);
AC void DF_CancelDefrag(void);
AC void DF_LogDefragDone(UINT16, UINT16, UINT16);
AC void DF_StopDefragRID(UINT16);
AC void RB_CalcPercentRemaining(void*);
AC UINT8 WC_VDiskDisable(UINT16, UINT16);
AC void* P6_AllocStRec(UINT32, UINT32, UINT32, void*);
AC void P6_ClrAllMainRM(UINT32, UINT32, UINT32, void*);
AC void P6_ClrAllTransRM(UINT32, UINT32, UINT32, void*);
AC void P6_ClrMainRM(UINT32, UINT32, UINT32, void*);
AC void P6_CopyTransRM(UINT8*, UINT32, UINT32, void*);
AC void P6_DeallocStRec(UINT32, UINT32, UINT32, void*);
AC void P6_Init(void);
AC void P6_LockAllCor(void);
AC void P6_UnlockAllCor(void);
AC void P6_MergeRM(UINT32, UINT32, UINT32, void*);
AC void P6_SetAllTransRM(UINT32, UINT32, UINT32, void*);
AC void P6_SetMainRM(UINT32, UINT32, UINT32, void*);
AC UINT32 P6_TestTransRM(UINT32, UINT32, UINT32, void*);
AC void P6_Update_Config(void*);
AC void p6_Set_CopyWorkInProcess_Bit(void);
AC void p6_Clear_CopyWorkInProcess_Bit(void);
AC UINT32 DL_AmIOwner(UINT16);
AC void DL_SetVDiskOwnership(void);

AC UINT16 isp2400_initiate_io(UINT16, ILT *, struct DEV *);

AC UINT8 RB_pdiskFailBack(UINT16, UINT8);
AC UINT8 RB_AutoFailBackEnableDisable(MR_PKT*);
AC void GR_NotifySwapComp(COR *);
AC void GR_RaidSwapEventHandler(void *, UINT32);

AC void DEF_LogCopyLabelEvent(COR*);

AC UINT32 GetSysTime(void);
AC void   DEF_DeallocVDStatsMemory(VDD*);
AC void   DEF_VdiskLastHrStats(VDD*);
AC void   DEF_iSNSUpdateFE(void);
AC void   DEF_ChgRAIDNotMirroringState_2(COR*);
AC UINT32 apool_put(UINT32, ILT *);
AC UINT16 apool_expand(UINT64, UINT16);
AC UINT16 apool_can_expand(UINT16);
AC UINT16    find_owning_dcn(UINT16);
AC UINT32    update_oger_nv(OGER *, OGER *);
AC UINT32    update_ssms_nv(SSMS *, OGER *);
AC UINT32    update_header_nv(SS_HEADER_NV *, OGER *);

AC UINT32 isp_registerFc4(UINT8, UINT32, void*);

#-----------------------------------------------------------------------------
# Follow are "c" routines that are referenced in i960 via either a "goto"
# or by the forking process.  They need to have an i960 "call" stub routine
# that then calls the Assembler to "c" glue routines.

LC void ISP_monitor_async(UINT32, UINT32, UINT8);
LC void ISP_monitor_atio(UINT32, UINT32, UINT8);
LC void isp_monitorFwhb(void);
LC void isp_pciConfigError(void);
LC void isp_portFailureHandler(void);
LC void f_discovery(void);
LC void PHY_Setup4Retry(UINT32 , UINT32, struct DEV *);
LC void PHY_escalate(void);
LC void f_portMonitor(UINT32, UINT32, UINT8);
LC void FAB_PathMonitor(void);
LC void isp_loopEventHandler(UINT32, UINT32, UINT8);
LC void isp_portOnlineHandler(void);
LC void isp_registerVports(UINT32, UINT32, UINT8);
LC void ON_InitializeDrive(UINT32, UINT32, PDD *, UINT32, void *, UINT8);
LC void ON_Inquire(UINT32, UINT32, PDD *, UINT32, void* , UINT8 );
LC void PHY_InitDrive(UINT32 , UINT32, PDD*);
LC void SES_BackGroundProcess(void);
?MODEL_3000 LC void SES_UpdatePages(void);
?MODEL_7400 LC void SES_UpdatePages(void);

# "c" routines that are TaskCreate or TaskCreatePerm started.
# TaskCreate and TaskCreatePerm must have #define's to change the name of the routine
# to have CT_LC_ put in front of it, and extern to that routine.

?MODEL_3000  LC void SES_PollDriveForEnclosure(UINT32, UINT32, UINT32*, UINT32*);
?MODEL_7400  LC void SES_PollDriveForEnclosure(UINT32, UINT32, UINT32*, UINT32*);
LC void SES_GetDirectEnclosure(UINT32, UINT32, UINT32*, UINT32*, UINT32);
?MODEL_3000 LC void ses_SendBypass(UINT32, UINT32, UINT32*, UINT32*, UINT32*, UINT32, UINT32);
?MODEL_7400 LC void ses_SendBypass(UINT32, UINT32, UINT32*, UINT32*, UINT32*, UINT32, UINT32);
?MODEL_3000 LC void ses_BypassDoubleCheck(UINT32, UINT32, UINT32*, UINT32, UINT32);
?MODEL_7400 LC void ses_BypassDoubleCheck(UINT32, UINT32, UINT32*, UINT32, UINT32);
?MODEL_3000 LC void SES_GetSlotWithInq(UINT32, UINT32, UINT32*, UINT32*);
?MODEL_7400 LC void SES_GetSlotWithInq(UINT32, UINT32, UINT32*, UINT32*);
LC void RB_UpdateRebuildWriteStateTask(UINT32, UINT32, bool, bool);
LC void RB_ClearRebuildWaitStateTask(UINT32, UINT32);
LC void DF_VerifyLastRspCompleter(UINT32, UINT32);
LC void DF_VerifyLastRspTask(UINT32, UINT32, void*);

# SERVICEABILITY42 Following is for serviceability feature 4.2
LC void RB_pdiskAutoFailBackTask(UINT32, UINT32, UINT32, UINT32);

# GEO_Raid Related Timer tasks
LC void GR_AutoSwapBackWaitTimer(UINT32, UINT32, void*);
LC void GR_AutoSwapHysteresisTimer(UINT32, UINT32, void*);
LC void GR_AutoSwapTask(UINT32, UINT32, UINT32, UINT32);
LC void GR_VdiskErrorHandlerTask(void);
LC void CM_ImConfigChangeNvSaveTask(void);
LC void cm_rd_comp(UINT32, UINT32);
LC void cm_wr_comp(UINT32, UINT32);
LC void cm_exec(UINT32, UINT32);

#CQT 13112_FIX
LC void LL_QueFullReqHandlingTask(UINT32);

# Following are in the new Link Layer, TaskCreate or TaskCreatePerm.
LC void LL_InitiatorTask(void*);
LC void LL_CompletionTask(void*);
LC void LL_TargetTask(void*);
LC void apool_put_cr(UINT32, ILT *);
LC void q2_snapshot_completer(UINT32, ILT *);
LC void ss_splcomp(UINT32, ILT *);
LC void ss_srccomp(UINT32, ILT *);
LC void ss_splsrccomp(UINT32, ILT *);
LC void apool_data_read_cr(UINT32, ILT*);
LC void apool_valink_data_write_cr(UINT32, ILT*);
LC void mover_task(UINT32, UINT32);
LC void mover_stats_task(UINT32, UINT32);
LC void apool_kill_task(UINT16);
LC void AR_ApoolOwnershipTask(UINT32, UINT32, UINT32, UINT32);
LC void AR_NVUpdateTask(void);
LC void restore_ss_nv_task(void);
LC void ss$comp_worker(UINT32, UINT32, int);
LC void ss_read_ssms(UINT32, UINT32, UINT32, OGER *, UINT32, void *);
LC void ss_disown_snappool(UINT32, UINT32, UINT32);
LC void Task_read_r_oger_from_nv(UINT32, UINT32, int, OGER **, OGER *, int, int, SSMS*);
LC void cow_q_task(void);
LC void PHY_InitDrivePart2(UINT32,ILT *);

# Marshall Midden found this 2008-03-12
?FLIGHTRECORDER LC void flightrecorder_task(void*);

LC void r_exec(void);

#-----------------------------------------------------------------------------
# Routines in assembler that are referenced from "c".  Put a asm label on it.
# This is only useful if the assembler code actually jumps to it, as per
# a TaskCreate or TaskCreatePerm.


LA DEF_RmtWait
LA RB_HotspareWaitTask
LA QWComp
# CA void RB_RAIDErrorComp(void*);
LA RB_RAIDErrorComp

LA isp$AbortIocbTask
LA CM_pexec
LA CM_wp2_null
LA CM_wp2_suspend
LA CM_wp2_copy
LA CM_wp2_mirror
LA CM_wp2_inactive
LA CM$rc_que
LA CM$wc_que
LA cm$up1comp
LA V_que
LA ON_WriteFailedLabel

LA V_updFEStatus

LA v$vmcomp
LA v$vscomp
LA r$stdcomp
LA r$r0comp
LA r$r1wrcomp
LA r$r1rdcomp
LA r$r10concomp
LA r$r10wrcomp
LA r$r10rdcomp

LA r$r5a6rcomp
LA r$r5fdwcomp
LA r$r5fpdwcomp
LA r$r5fpwcomp
LA r$r5sdpr4comp
LA r$r5sdr3comp
LA r$r5srrcomp
LA r$r5frrcomp
LA r$r5drcomp
LA r$r5prrcomp
#-----------------------------------------------------------------------------
# Variables defined in "c".
Variable UINT8 NV_scsi_whql
Variable ulong Shared_memory_with_CCB
Variable ulong Shared_memory_with_BE
Variable ulong Shared_memory_with_FE
Variable ulong CT_fork_tmp

Variable ulong ispInterrupt
Variable ulong ispLid
Variable ulong ispOnline
Variable ulong ispSysErr
Variable ulong ispofflfail
Variable ulong isppfpcb
Variable ulong ispprc
Variable ulong isprev
Variable ulong mpn
Variable ulong portdb
Variable ulong tar
Variable ulong ispLastLIP
Variable ulong S_bgppcb
Variable ulong N_defragdebug
Variable UINT8 D_p2writefail_flag
Variable void* gRLLocalImageIPCheckPCB;
Variable ulong BATTERY_BACKUP
Variable ulong** lidUsed
Variable void* CCtbl;
Variable UINT8 ispPortAssignment;
Variable void* gDFDebug;
Variable COR* CM_cor_act_que;
Variable void p6UpdhndTbl;
Variable APOOL_NV_IMAGE gApoolnvImage;
Variable APOOL_NV_IMAGE gTempImage;
Variable QU SS_cow_qu;
Variable void* syg_ssms;
Variable void* bldsgi_ssms;
Variable void* V_primap;
#-----------------------------------------------------------------------------
# End of file be_proto
