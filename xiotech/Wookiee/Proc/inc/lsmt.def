# $Id: lsmt.def 89177 2009-06-15 14:14:22Z m4 $
#*****************************************************************************
#
#  NAME: lsmt.def  (Link-level Session Management Table)
#
#  DESCRIPTION:
#       The LSMT structure contains information associated with managing
#       a session with a target.  A session refers to establishing one
#       path, on one channel, to one target, to establish a portion of a
#       Vlink.  When a single Vlink is established, multiple Open Sessions
#       could occur, one for each possible FC path.
#
#  Copyright (c) 1999 - 2009 XIOtech Corporation.   All rights reserved.
#
#*****************************************************************************

                                @#ifndef _LSMT_H_
                                @#define _LSMT_H_
                                @#include "XIO_Types.h"
                                @struct LTMT;
                                @struct TPMT;
                                @struct ILT;
                                @struct ISMT;
#
# --- LSMT event handler routine table routine definitions (lsmt_ehand)
#
.def lsmt_eh_state 0            @#define lsmt_eh_state          @ State code
.def lsmt_eh_term 4             @#define lsmt_eh_term           @ Terminate session event handler
.def lsmt_eh_smsg 8             @#define lsmt_eh_smsg           @ Send message event handler
.def lsmt_eh_vrp 12             @#define lsmt_eh_vrp            @ Process VRP event handler
#
# --- Data structure --------------------------------------------------------
#
                                @                       @ Link-level Session Management Table
.struct                         @typedef struct LSMT
                                @{
# An LSMT will exist for each session that is open to a target. This LSMT
# Link field links multiple LSMTs together for a given target on this channel.
# Note that multiple sessions may be open to the same target on the same
# channel, one for each Vlink to the target. If multiple sessions (paths) are
# used for the same Vlink to a target, these will be on different channels
# (and not linked by this field).
.w lsmt_link                    @   struct LSMT *link;  @ Pointer to next LSMT

# The field contains the Target LUN number that will be used for this session.
.s lsmt_lun                     @   UINT16 lun;         @ Target LUN number (VDISK).
.b lsmt_rsrvd1 2                @   UINT8  rsrvd1[2];   @ Reserved 2 bytes

# An LTMT will exist for each target that is discovered on each channel. This
# field points to the LTMT for the target that is associated with this session.
.w lsmt_ltmt                    @   struct LTMT *pLTMT; @ assoc. LTMT address

# This field contains the DLM session ID or zero if a session does not
# currently exist. The DLM session ID is a pointer to the DLM's TPMT
# structure (i.e. The DLMs Path Management Table).
.w lsmt_dlmid                   @   struct TPMT *pTPMT; @ assoc. DLM session ID

.w rsrvd2 4                     @   UINT32 rsrvd2[4];   @ 16 reserved bytes.

# This field contains a pointer to an ILT used by the LLD code when sending an
# open session request or requesting the information INQUIRY page data from
# another device.
.w lsmt_ilt                     @   struct ILT  *pILT;  @ assoc. ILT address

# This field is set to point to one of two different jump tables, either:
#       lsmt_etbl1a - for a Magnitude target type, or
#       lsmt_etbl2a - for a Foreign target type.
#
# The constants defined below are used as an index into these jump tables.
# Each index is associated with a function in the two tables as as follows:
#
#                       ltmt_etbl1a     ltmt_etbl2a
#                       -----------     -----------
#   lsmt_eh_state       0,0,0,0         0,0,0,0     (State code, not used??)
#   lsmt_eh_term        s1a_term        s1a_term    (Terminate session event)
#   lsmt_eh_smsg        s1a_smsg        s2a_smsg    (Send msg event handler, not used??)
#   lsmt_eh_vrp         s1a_vrp         s1a_vrp     (Process VRP even, not used??)
.w lsmt_ehand                   @   void *eventHandlerTbl; @ Event handler table

# This field contains a pointer to the ISMT structure associated with this
# session. The ISMT is used by the Initiator Drive code (Idriver and Apldrvr).
.w lsmt_psid                    @   struct ISMT *pISMT; @ Initiator driver (provider) ID
#
# --- End LSMT data structure ------------------------------------------------
.f lsmt_size 0 # Size of LSMTs  @} LSMT;
                                @#endif /* _LSMT_H_ */
#******************************************************************************
#
####
## Modelines:
## Local Variables:
## tab-width: 4
## indent-tabs-mode: nil
## End:
## vi:sw=4 ts=4 expandtab
