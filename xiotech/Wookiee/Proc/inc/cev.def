CEVId$
#**********************************************************************
#
#  NAME: cev.def (Create / Expand Virtual Device)
#
#  DESCRIPTION:
#       To provide a common means of tracking the allocation of space
#       on a number of devices for a expand, create, or test operation.
#
#  Copyright (c) 1997-2009 XIOtech Corporation.  All rights reserved.
#
#**********************************************************************

                                @#ifndef _CEV_H_
                                @#define _CEV_H_
                                @#include "XIO_Types.h"
                                @struct RDD;
                                @struct DAML;
#
# Constants
.def cemaxraid 8                @#define CE_MAXRAIDS            @ Max RAIDs for create/expand operation
# NOTE: ce_rdd below is this size (8 words).
# See def.inc for mcr_flags definitions.

                                @                               @ Bits 5 thru 7 are unused.
                                @#define CE_FLAGS_SETSIZE 0x10  @ Set vdisk size (on create).
                                @#define CE_FLAGS_7000MIN 0x08  @ MinPD, up to 16 looping till works.
                                @#define CE_FLAGS_GEO     0x04  @ Geo RAID enabled
                                @#define CE_FLAGS_REDUN   0x02  @ Enforce strict order (equal weight)
                                @#define CE_FLAGS_MINPD   0x01  @ Enforce exact min PD
#
# --- Begin structure -------------------------------------------------
.struct                         @typedef struct CEV
                                @{
.l ce_devcap                    @   UINT64  devCap;             @ Cumulative device capacity
.l ce_reqdevcap                 @   UINT64  reqDevCap;          @ Requested device capacity
.w ce_rptr                      @   void   *rPtr;               @ Return block pointer
.s ce_thresh                    @   UINT16  thresh;             @ Min allocation units per drive
.s ce_maxraids                  @   UINT16  maxRaids;           @ Max RAIDs to try
.w ce_rda                       @   void   *rda;                @ Pointer to RDA for create
.s ce_rdadrives                 @   UINT16  rdaDrives;          @ Number of entries in RDA
.b ce_flags                     @   UINT8   flags;              @ Flags from create MRP
.b ce_minpd                     @   UINT8   minPD;              @ Min PD from create MRP
.b ce_numraids                  @   UINT8   numRaids;           @ Number of RAIDs so far
.b ce_depth                     @   UINT8   depth;              @ Validated depth
.b ce_rtype                     @   UINT8   rType;              @ Validated type
.b ce_op                        @   UINT8   op;                 @ Validated operation code
.s ce_sps                       @   UINT16  sps;                @ Validates sec/stripe
.s ce_vid                       @   UINT16  vid;                @ VID to create/expand
.s ce_numdaml                   @   UINT16  numDAML;            @ Number of DAMLs to create
.s ce_mindrives                 @   UINT16  minDrives;          @ Min drives req for type
.w ce_dmap                      @   UINT16 *dMap;               @ Pointer to input d map
.f ce_rdd cemaxraid*4           @   struct RDD *rdd[CE_MAXRAIDS]; @ RDD pointers created
.f ce_daml 0                    @   struct DAML *daml[1];       @ DAML ptrs created follow - here
# --- End structure ---------------------------------------------------
.f cevsiz 0 # Size of CEV       @} CEV;

# Function prototypes
                                @extern void DEF_SortPDisks(UINT16 *, UINT16);

                                @#endif /* _CEV_H_ */
#******************************************************************************
#
####
## Modelines:
## Local Variables:
## tab-width: 4
## indent-tabs-mode: nil
## End:
## vi:sw=4 ts=4 expandtab
