# $Id: vlop.inc 88783 2009-06-11 16:30:31Z m4 $
#**********************************************************************
#
#   @file   vlop.def
#
#   @brief  VLink operation management table definitions
#
#   This file contains the data structure and definitions used
#   to manage a VLink open, swap or other process.
#
#   Copyright (c) 2000,2003-2010 XIOtech Corporation. All rights reserved.
#
#**********************************************************************

            @#ifndef _VLOP_H_
            @#define _VLOP_H_

            @#include "ilt.h"
            @#include "pcb.h"
            @#include "RL_RDD.h"
            @#include "XIO_Types.h"

#*
#*****************************************************************************
#* Public defines - constants
#*****************************************************************************
#/

#**
#*  @name   Process state code (vlop_state) definitions
#*/
#*@{*/
.def vlop_st_op     0   @#define VLOP_STATE_OPERATIONAL @ Operational
.def vlop_st_term   1   @#define VLOP_STATE_TERMINATED  @ Terminated
#*@}*/

#**
#*  @name   Process event handler table definitions
#*/
#*@{*/
                        @#define VLOP_EVENT_NUM_ENTRIES 2   @ Number of entries

### The following 2 definitions are offsets in assembly, and indexes in C

.set vlop_eh_abort,0    @#define VLOP_EVENT_ABORT   0   @ Abort event handler
.set vlop_eh_move,4     @#define VLOP_EVENT_MOVE    1   @ Move event handler
#*@}*/

#*
#*****************************************************************************
#* Public defines - data structures
#*****************************************************************************
#/

#**
#* VLOP Event Table definition
#/
                        @typedef struct VLOP_ET
                        @{
                        @    void    (*func[VLOP_EVENT_NUM_ENTRIES])(void);
                        @} VLOP_ET;

#**
#* VLink operation management table
#*/
.struct                 @typedef struct VLOP
                        @{
.w vlop_pcb             @   PCB     *pPCB;      @ Assoc. task PCB address
.w vlop_dgilt           @   ILT     *pILT;      @ Datagram ILT address
#                                                       ******0x10*****
.w vlop_rdd             @   RDD     *pRDD;      @ Assoc. RDD address
.w vlop_ehand           @   VLOP_ET *pEventTable;   @ Event handler table
.b vlop_state           @   UINT8   state;      @ Process state code

### !!! BEWARE !!! r[0-6] are accessed from assembly with varying sizes !!!

.b vlop_r0              @   UINT8   r0;         @ Register r0
.b vlop_r1              @   UINT8   r1;         @ Register r1
.b vlop_r2              @   UINT8   r2;         @ Register r2
.b vlop_r3              @   UINT8   r3;         @ Register r3
.b vlop_r4              @   UINT8   r4;         @ Register r4
.b vlop_r5              @   UINT8   r5;         @ Register r5
.b vlop_r6              @   UINT8   r6;         @ Register r6
#                                                       ******0x20*****
.w vlop_g0              @   UINT32  g0;         @ Register g0
.w vlop_g1              @   UINT32  g1;         @ Register g1
.w vlop_g2              @   UINT32  g2;         @ Register g2
.w vlop_g3              @   UINT32  g3;         @ Register g3

# --- End basic structure ----------------------------------------------

.f vlopsiz 0            @} VLOP;                @ Size of vlop

                        @#endif /* _VLOP_H_ */

####
## Modelines:
## Local Variables:
## tab-width: 4
## indent-tabs-mode: nil
## End:
## vi:sw=4 ts=4 expandtab
