# $Id: tmt.def 96119 2009-08-17 21:12:55Z m4 $
#******************************************************************************
#
#  NAME: tmt.def (Target Management Table)
#
#  DESCRIPTION:
#       The TMT structure cantains information for each Target device that is
#       discovered by the Initiator code (IDriver). There is one TMT per Target
#       device, per FC Channel. These Targets are other Thunderbolt Controllers,
#       Magnitudes, or Foreign Targets which are candidates for a possible SAN
#       Links connection. The TMT structure is primarily accessed by the Idriver
#       and Apldrvr components. The LLD also accesses the TMT a fair amount (see
#       also the LTMT structure). All TMTs for a channel are chained together in a
#       linked list. The TMT also includes links back to the ICIMT for the channel
#       this target was discovered on.
#
#  Copyright (c) 1996 - 2009 XIOtech Corporation.  All rights reserved.
#
#******************************************************************************

                                @#ifndef _TMT_H_
                                @#define _TMT_H_
                                @#include "XIO_Types.h"
                                @struct TMT;
                                @struct ICIMT;
                                @struct TLMT;
                                @struct ILT;
#
# --- Equates ----------------------------------------------------------------
#
.set MAXLID,2048                @                               @ maximum loop IDs
.set MAXLUN,LUNMAX              @                               @ Max number LUNs per host
#
# --- TMT discovery source
#
.set tmdsrc_arb,0               @                               @ loop arbitration
.set tmdsrc_SNS,1               @                               @ simple name server
#
# --- TMT states
#
                                @typedef enum tmt_state
                                @{
.set tmstate_inactive,0         @   tmstate_inactive = 0,       @ tmt is inactive
.set tmstate_discovery,1        @   tmstate_discovery,          @ tmt is in discovery process
.set tmstate_active,2           @   tmstate_active,             @ tmt is active
.set tmstate_server,3           @   tmstate_server,             @ tmt is a server
.set tmstate_undiscovered,4     @   tmstate_undiscovered,       @ tmt is undiscovered
                                @                               @ device did not enter 2nd pass of GAN
                                @                               @ loop before new GAN scan
.set tmstate_deltar,5           @   tmstate_deltar,             @ delete target
                                @                               @ Target alpa has changed, delete the
                                @                               @ current target.
.set tmstate_retry_plogi,6      @   tmstate_retry_plogi         @ fabric re-plogi active
                                @} tmt_state;
#
# --- Loop Types
#
.set tmlptyp_N,  0x01           @                               @ n-port
.set tmlptyp_NL, 0x02           @                               @ nl-port
.set tmlptyp_FNL,0x03           @                               @ f/nl-port
.set tmpptyp_F,  0x81           @                               @ f-port
.set tmlptyp_FL, 0x82           @                               @ fl-port
.set tmtptyp_E,  0x84           @                               @ e-port tm_tm_lidt
#
# --- TMT flag bits
#
.set tmflg_dactive,0            @#define TMFLG_DISC     0       @ 0x01 LIDT is being used by discovery
.set tmflg_badboy,1             @#define TMFLG_BADBOY   1       @ 0x02 fabric port permanently
                                @                               @      discovered as childtask
.set tmflg_SLDC,6               @                               @ 0x40 Suppress LUN discovery clear
.set tmflg_lundisc,7            @                               @ 0x80 lun discovery request
#
# --- Fabric DiscoverTMT completion codes
#
.set dTMT_continue,0            @                               @ continue with next TMT
.set dTMT_pend,1                @                               @ end process without release of
                                @                               @   resources
.set dTMT_DiscEnd,2             @                               @ end process with release of
                                @                               @   resources
.set dTMT_restart,3             @                               @ switch redid everything, stop
#
# --- Begin structure ------------------------------------------------
#
.struct                         @typedef struct TMT             @ Target Management Table
                                @{
#       This area is for use by the initiator only!
.w tm_link                      @   struct TMT   *tmtLink;      @ Forward thread
.w tm_icimt                     @   struct ICIMT *icimtPtr;     @ pointer to ICIMT
.s tm_tmr0                      @   UINT16 tmr0;                @ timer 0
.s tm_tmr1                      @   UINT16 tmr1;                @ timer 1
.b tm_dsrc                      @   UINT8  dsrc;                @ discovery source
.b tm_state                     @   UINT8  state;               @ TMT state byte
.b tm_flag                      @   UINT8  flag;                @ flag byte
.b tm_retry_plogi_count         @   UINT8  retry_plogi_count;   @ number of times to retry PLOGI
.w tm_NEWalpa                   @   struct ILT *pILT;           @ new alpa / discovery ILT in new code
#       This area is for use by the Link Manager only!
.w tm_ltmt                      @   struct LTMT  *ltmt;         @ assoc. LTMT address
#       This area is common but should only be updated by the initiator.
.s tm_lid                       @   UINT16 lid;                 @ LID of this target
.b tm_chipID                    @   UINT8  chipID;              @ chip instance
.b tm_pdt                       @   UINT8  pdt;                 @ peripheral device type
.w tm_alpa                      @   UINT32 alpa;                @ AL-PA  (port ID)
.l tm_N_name                    @   UINT64 N_name;              @ Node name
.l tm_P_name                    @   UINT64 P_name;              @ Port name (world wide ID)
.b tm_venid 8                   @   char   venid[8];            @ vendor ID
.b tm_proid 16                  @   char   proid[16];           @ product id
.b tm_version 4                 @   char   version[4];          @ product revision number
.b tm_sn 16                     @   char   sn[16];              @ device serial number
.f tm_tlmtdir MAXLUN*4          @   struct TLMT *tlmtDir[MAX_LUNS]; @ tlmt dirctory
# --- End structure ---------------------------------------------------
.f tmtsize 0 # Size of TMTs     @} TMT;
                        @#endif /* _TMT_H_ */
#******************************************************************************
#
####
## Modelines:
## Local Variables:
## tab-width: 4
## indent-tabs-mode: nil
## End:
## vi:sw=4 ts=4 expandtab
