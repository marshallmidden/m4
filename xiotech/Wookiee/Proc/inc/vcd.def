# $Id: vcd.def 158876 2012-01-17 18:21:14Z m4 $
#**********************************************************************
#
#  NAME: vcd.def (Virtual Cache Definition)
#
#  Copyright (c) 1998-2010 XIOtech Corporation. All rights reserved.
#
#**********************************************************************


                                @#ifndef _VCD_H_
                                @#define _VCD_H_
                                @#include "ilt.h"
                                @#include "rb.h"
                                @#include "XIO_Types.h"
#
# --- Equates for VCX -------------------------------------------------
# -- NOTE This is named incorrectly. Since it is zero, it doesn't not matter.
# -- It is because the count of vcdIndex is at -4, and the array is at 0.
.set vx_vcd,0                   @                               @ Entry offset

#
# Status - bit defined
#
.def vc_cached            0     @#define VC_CACHED              @ x01 bit 0 = 0 VID not cached
                                @                               @           = 1 VID Cached
.def vc_disable_ip        1     @#define VC_DISABLE_IP          @ x02 bit 1 = 0 Disable not in progress
                                @                               @           = 1 Disable cache in progress
.def vc_error             2     @#define VC_ERROR               @ x04 bit 2 = 0 Not in error state
                                @                               @           = 1 Error occurred during flush
.def vc_mirror_write_info 3     @#define VC_MIRROR_WRITE_INFO   @ x08 bit 3 = 0 Do not mirror Write Info
                                @                               @           = 1 Mirror Write Info to partner
.def vc_copy_dest_ip      4     @#define VC_COPY_DEST_IP        @ x10 bit 4 = 0 No copy to this VDisk
                                @                               @           = 1 Copy to this VDisk in progr
.def vc_rebuild_required  5     @#define VC_REBUILD_REQUIRED    @ x20 bit 5 = 0 No Rebuild rqd before Mirror
                                @                               @           = 1 Rebuild rqd before Mirror
.def vc_temp_disable      6     @#define VC_TEMP_DISABLE        @ x40 bit 6 = 0 No Temporary Cache disable
                                @                               @           = 1 Write Cache Temp disabled
.def vc_ise_busy          7     @#define VC_ISE_BUSY            @ x80 bit 7 = 0 ISE not in BUSY
                                @                               @           = 1 ISE not in BUSY state

#
# Status - value defined
#
.def VC_NO_MORE_DATA   0x46     @#define VC_NO_MORE_DATA        @ Bits = 6, 2, and 1 should not allow more
                                @                               @   data to come into cache for the VID

#
# --- Begin structure -------------------------------------------------
#
.struct                         @typedef struct VCD
                                @{
.s vc_vid                       @   UINT16 vid;                 @ Virtual ID
.b vc_tdis_cnt                  @   UINT8  tDisCnt;             @ Temporary Disable Count
.b vc_stat                      @   UINT8  stat;                @ Status
.b vc_flags                     @   UINT8  flags;               @
.b vc_rsvd1 3                   @   UINT8  rsvd1[3];            @ Reserved 3 bytes.
.w vc_cache                     @   struct RB *pCache;          @ Data in Cache Tree Ptr
.w vc_dirty                     @   struct RB *pDirty;          @ Dirty data Tree Pointer
.w vc_io                        @   struct RB *pIO;             @ Interval I/O Tree pointer
.w vc_write_count               @   UINT32 writeCount;          @ # outstanding host cached write cmds
.l vc_flushLBA                  @   UINT64 flushLBA;            @ Flush LBA
.l vc_rdhits                    @   UINT64 rdHits;              @ Cache read hits
.l vc_rdpart                    @   UINT64 rdPart;              @ Cache partial read hits
.l vc_rdmiss                    @   UINT64 rdMiss;              @ Cache read misses
.l vc_wrhits                    @   UINT64 wrHits;              @ Cache write hits
.l vc_wrpart                    @   UINT64 wrPart;              @ Cache partial write hits
.l vc_wrmiss                    @   UINT64 wrMiss;              @ Cache write misses
.l vc_wrtbyres                  @   UINT64 wrtByRes;            @ Bypassed writes - resources
.l vc_wrtbylen                  @   UINT64 wrtByLen;            @ Bypass writes - length
.l vc_capacity                  @   UINT64 capacity;            @ VDisk Capacity
.b vc_rsvd2 4                   @   UINT8  rsvd2[4];            @ Reserved 4 bytes.
.w vc_vtv                       @   UINT32 vtv;                 @ VDisk Throttle Value
.w vc_thead                     @   struct ILT *pTHead;         @ Throttle Head of Queue
.w vc_ttail                     @   struct ILT *pTTail;         @ Throttle Tail of Queue
.w vc_fwd_wait                  @   struct VCD *pFwdWait;       @ VCD Wait que Forward ptr
.w vc_bwd_wait                  @   struct VCD *pBwdWait;       @ VCD Wait que Bckwrd ptr
# --- End structure ---------------------------------------------------
.f vcdsiz 0 # Size of vcd       @} VCD;
                                @#endif /* _VCD_H_ */
#
# CAUTION *** CAUTION *** CAUTION *** CAUTION *** CAUTION *** CAUTION *** CAUTION
# Keep these values quad aligned in order for the statistic collection to function correctly.
.set vcdstatstart,vc_vid        @                               @ Starting stats location
.set vcdstatsize,vcdsiz         @                               @ Size of stats

#**********************************************************************
####
## Modelines:
## Local Variables:
## tab-width: 4
## indent-tabs-mode: nil
## End:
## vi:sw=4 ts=4 expandtab
