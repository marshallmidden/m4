# $Id: ccsm.def 144582 2010-07-23 19:53:49Z mdr $
#**********************************************************************
#
#  NAME: ccsm.def (Copy Configuration and Status Manager Definitions)
#
#  DESCRIPTION:
#       This file defines the data structures and definitions to support
#       the copy configuration and status manager operations.
#
#  Copyright (c) 2004-2009 XIOtech Corporation.  All rights reserved.
#
#**********************************************************************

                                @#ifndef _CCSM_H_
                                @#define _CCSM_H_
                                @#include "XIO_Types.h"
                                @struct ILT;
                                @struct PCB;
                                @struct COR;
# ccsm state definitions
.def ccsm_st_master 1           @#define CCSM_ST_MASTER         @ Master CCSM
.def ccsm_st_notmaster 0        @#define CCSM_ST_NOTMASTER      @ Slave ccsm

# CCSM Event Definitions
#       CCSM events will be generated using ILTs which are built up
#       with the event data and queued to the CCSM task for processing.
#       Two event types/queues are defined by the CCSM:
#           1). Define events
#           2). CCBGram received events
#
#       Define events take precedence over client events in that
#       define events will be processed before client events. Both
#       types of events will be built up using ILTs. The basic ILT
#       data structure is defined below:
#           il_fthd = field used to thread event onto queue
#           il_bthd = field used to thread event onto queue
#           il_cr = requestor's completion routine
#           il_pcb = requestor's task PCB address
#
#       Following these fields, each event contains a basic event/ILT
#       data structure as defined below.
#
# Basic event/ILT data structure
.struct                         @typedef struct CCSM_E
                                @{
                                @   struct ILT *fthd;           @ Forward thread
                                @   struct ILT *bthd;           @ Backward thread
                                @   UINT32 misc;                @ Misc param 1
                                @   struct PCB *pcb;            @ Pointer to PCB structure
.f ccsm_e_resvd1 il_w0          @                               @ Position to il_w0 of ILT.
.f CCSM_E_OFFSET 0              @                               @ message offset into ILT structure
.w ccsm_e_len                   @   UINT32  len;                @ event length
.b ccsm_e_type                  @   UINT8   type;               @ event type code
.b ccsm_e_fc                    @   UINT8   fc;                 @ vent function code
.s ccsm_e_seq                   @   UINT16  seq;                @ sequence number
.w ccsm_e_sendsn                @   UINT32  sendsn;             @ sender's serial number
.w ccsm_e_ext                   @                               @ extended event data area
                                @} CCSM_E;

# Event type code definitions
.def ccsm_et_define 0           @#define CCSM_ET_DEFINE         @ define event type
.def ccsm_et_client 1           @#define CCSM_ET_CLIENT         @ client interface event type
.def ccsm_et_ccbg 5             @#define CCSM_ET_CCBG           @ CCBGram event type
.def ccsm_et_grs 6              @#define CCSM_ET_GRS            @ GeoRaid swap event type

# ccsm Georaid event function codes
.def ccsm_grs_swap 0x30         @#define CCSM_GRS_SWAP          @ 1 swap raids
.def ccsm_grs_swap_comp 0x31    @#define CCSM_GRS_SWAP_COMP     @ 2 swap raids completed
.def ccsm_grs_nvram 0x32        @#define CCSM_GRS_NVRAM         @ Save to Master NVRAM

# Define Event Function Code Definitions
.def ccsm_de_newm 0             @#define CCSM_DE_NEWM           @ new master CCSM
.def ccsm_de_nom 1              @#define CCSM_DE_NOM            @ no longer master CCSM
.def ccsm_de_start 2            @#define CCSM_DE_START          @ start copy
.def ccsm_de_term 3             @#define CCSM_DE_TERM           @ terminate copy
.def ccsm_de_pause 4            @#define CCSM_DE_PAUSE          @ pause copy
.def ccsm_de_resume 5           @#define CCSM_DE_RESUME         @ resume copy
.def ccsm_de_swap 6             @#define CCSM_DE_SWAP           @ swap RAIDs
.def ccsm_de_cco 7              @#define CCSM_DE_CCOM           @ configuration change occurred
.def ccsm_de_cosc 8             @#define CCSM_DE_COSC           @ copy operational state changed
.def ccsm_de_timer 9            @#define CCSM_DE_TIMER          @ 1 second timer event

# Start Copy Extended Data
.struct                         @typedef struct DE_START
                                @{
.f ccsm_de_start_resvd0 ccsm_e_ext @                            @ Position to ccsm_e_ext area of ILT.
.w ccsm_de_start_cor            @   struct COR *cor;            @ Pointer to COR structure.
                                @} DE_START;

# Terminate Copy Extended Data
.struct                         @typedef struct DE_TERM
                                @{
.f ccsm_de_term_resvd0 ccsm_e_ext @                             @ Position to ccsm_e_ext area of ILT.
.w ccsm_de_term_reg             @   UINT32  id;                 @ registration ID
.w ccsm_de_term_cmsn            @   UINT32  cmsn;               @ CM serial number
                                @} DE_TERM;

# Pause Copy Extended Data
.struct                         @typedef struct DE_PAUSE
                                @{
.f ccsn_de_pause_resvd0 ccsm_e_ext @                            @ Position to ccsm_e_ext area of ILT.
.w ccsm_de_pause_reg            @   UINT32  id;                 @ registration ID
.w ccsm_de_pause_cmsn           @   UINT32  cmsn;               @ CM serial number
                                @} DE_PAUSE;

# Resume Copy Extended Data
.struct                         @typedef struct DE_RESUME
                                @{
.f ccsm_de_resume_resvd0 ccsm_e_ext @                           @ Position to ccsm_e_ext area of ILT.
.w ccsm_de_resume_reg            @  UINT32  id;                 @ registration ID
.w ccsm_de_resume_cmsn          @   UINT32  cmsn;               @ CM serial number
                                @} DE_RESUME;

# Swap RAIDs Extended Data
.struct                         @typedef struct DE_SWAP
                                @{
.f ccsm_de_swap_resvd0 ccsm_e_ext @                             @ Position to ccsm_e_ext area of ILT.
.w ccsm_de_swap_reg             @   UINT32  id;                 @ registration ID
.w ccsm_de_swap_cmsn            @   UINT32  cmsn;               @ CM serial number
.w ccsm_de_swap_rid             @   UINT32  rid;                @ new source copy device RAID id
.b ccsm_de_swap_type            @   UINT8   type;               @ swap type code
                                @                               @   0 = swap and mirror
                                @                               @   1 = swap and break
.b ccsm_de_swap_rty             @   UINT8   rty;                @ swap retry count
.b ccsm_de_swap_flag            @   UINT8   flag;               @ flag byte
                                @                               @    Bit 7 =>
                                @                               @        6 =>
                                @                               @        5 =>
                                @                               @        4 =>
                                @                               @        3 =>
                                @                               @        2 =>
                                @                               @        1 => 1=owner done
                                @                               @        0 => 1=master done
.b ccsm_de_swap_rsvd1 2         @   UINT8   rsvd1[2];           @ Reserved 2 bytes
                                @} DE_SWAP;

# Copy Operational State Changed Extended Data
.struct                         @typedef struct GR_COSC
                                @{
.f ccsm_de_cosc_resvd0 ccsm_e_ext @                             @ Position to ccsm_e_ext area of ILT.
.w ccsm_de_cosc_reg             @   UINT32  id;                 @ registration ID
.w ccsm_de_cosc_cmsn            @   UINT32  cmsn;               @ CM serial number
.b ccsm_de_cosc_crstate         @   UINT8   crstate;            @ current cor_crstate being invoked
.b ccsm_de_cosc_rsvd1 3         @   UINT8   rsvd1[3];           @ Reserved 3 bytes
                                @} GR_COSC;

# CCBGram Extended Data
#       Note: All data received in the CCBGram is copied into the
#               ccsm_e_ext area.

# CCBGram Message Function Code Definitions
#       Function Code Range Definitions:
#       00-3f = Normal CCBGram messages
#       40-7f = Swap RAIDs associated CCBGram messages
#       80-bf = Immediate CCBGram messages
#       c0-ff = not defined
#
# Normal CCBGram Message Definitions
.def ccsm_gr_start 0            @#define CCSM_GR_START          @ start copy
.def ccsm_gr_process 1          @#define CCSM_GR_PROCESS        @ process
.def ccsm_gr_update 2           @#define CCSM_GR_UPDATE         @ update
.def ccsm_gr_force 3            @#define CCSM_GR_FORCE          @ force ownership change
.def ccsm_gr_define 4           @#define CCSM_GR_DEFINE         @ define ownership
.def ccsm_gr_owner 5            @#define CCSM_GR_OWNER          @ you are owner
.def ccsm_gr_trans 6            @#define CCSM_GR_TRANS          @ transfer ownership
.def ccsm_gr_change 7           @#define CCSM_GR_CHANGE         @ change ownership
.def ccsm_gr_susp 8             @#define CCSM_GR_SUSPT          @ suspend ownership
.def ccsm_gr_sdone 9            @#define CCSM_GR_SDONE          @ ownership suspended
.def ccsm_gr_cdone 0x0a         @#define CCSM_GR_CDONE          @ ownership changed
.def ccsm_gr_term 0x0b          @#define CCSM_GR_TERMT          @ terminate ownership
.def ccsm_gr_tdone 0x0c         @#define CCSM_GR_TDONE          @ ownership terminated
.def ccsm_gr_readrm 0x0d        @#define CCSM_GR_READRM         @ read dirty region map
.def ccsm_gr_rm 0x0e            @#define CCSM_GR_RM             @ dirty region map
.def ccsm_gr_readsm 0x0f        @#define CCSM_GR_READSM         @ read segment map
.def ccsm_gr_smdata 0x10        @#define CCSM_GR_SMDATA         @ segment map data
.def ccsm_gr_reg 0x11           @#define CCSM_GR_REG            @ copy registered
.def ccsm_gr_swap 0x12          @#define CCSM_GR_SWAP           @ swap RAIDs
.def ccsm_gr_cdmove 0x13        @#define CCSM_GR_CDMOVE         @ copy devices moved
.def ccsm_gr_csc 0x14           @#define CCSM_GR_CSC            @ copy state changed
.def ccsm_gr_info 0x15          @#define CCSM_GR_INFO           @ copy general info. changed

# Swap RAIDs Associated CCBGram Message Definitions
.def ccsm_gr_swapdone 0x40      @#define CCSM_GR_SWAPDONE       @ swap RAIDs completed

# Immediate CCBGram Message Definitions
.def ccsm_gr_disvlchk 0x80      @#define CSM_GR_DISVLCHK        @ disable VLink check
.def ccsm_gr_disfresh 0x81      @#define CCSM_GR_DISFRESH       @ disable refresh NVRAM
.def ccsm_gr_envlchk 0x82       @#define CCSM_GR_ENVLCHK        @ enable VLink check
.def ccsm_gr_enfresh 0x83       @#define CCSM_GR_ENFRESH        @ enable refresh NVRAM
.def ccsm_gr_cdmack 0x84        @#define CCSM_GR_CDMACK         @ copy devices moved acknowledgement
.def ccsm_gr_cscack 0x85        @#define CCSM_GR_CSCACK         @ copy state changed acknowledgement
.def ccsm_gr_infoack 0x86       @#define CCSM_GR_INFOACK        @ copy info. changed acknowledgement
# Instant Mirror feature related datagram
.def ccsm_gr_imcupdt 0x87       @#define CCSM_GR_IMCUPDT        @ Instant Mirror config update datagram

# Start Copy CCBGram Extended Data
.struct                         @typedef struct GR_START
                                @{
.f ccsm_gr_start_resvd0 ccsm_e_ext @                            @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_start_id             @   UINT32  id;                 @ registration ID
.w ccsm_gr_start_cmsn           @   UINT32  cmsn;               @ CM serial number
.b ccsm_gr_start_cmsc           @   UINT8   cmsc;               @ CM source cluster
.b ccsm_gr_start_cmsv           @   UINT8   cmsv;               @ CM source VID
.b ccsm_gr_start_cmdc           @   UINT8   cmdc;               @ CM dest. cluster
.b ccsm_gr_start_cmdv           @   UINT8   cmdv;               @ CM dest. VID
.w ccsm_gr_start_ssn            @   UINT32  ssn;                @ source node serial number
.w ccsm_gr_start_dsn            @   UINT32  dsn;                @ dest. node serial number
.b ccsm_gr_start_sc             @   UINT8   sc;                 @ source node cluster
.b ccsm_gr_start_sv             @   UINT8   sv;                 @ source node VID
.b ccsm_gr_start_dc             @   UINT8   dc;                 @ dest. node cluster
.b ccsm_gr_start_dv             @   UINT8   dv;                 @ dest. node VID
.b ccsm_gr_start_type           @   UINT8   type;               @ copy type code
.b ccsm_gr_start_rsvd1 3        @   UINT8   rsvd[3];            @ Reserved 3 bytes
.f ccsm_gr_start_size 0         @} GR_START;                    @ size of start copy
                                @#define GR_START_SIZE sizeof(CCSM_E) + sizeof(GR_START)

# Process CCBGram Extended Data
# Start Copy CCBGram Extended Data
.struct                         @typedef struct GR_PROCESS
                                @{
.f ccsm_gr_process_resvd0 ccsm_e_ext @                          @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_process_id           @   UINT32  id;                 @ registration ID
.w ccsm_gr_process_cmsn         @   UINT32  cmsn;               @ CM serial number
.b ccsm_gr_process_code         @   UINT8   code;               @ process code
                                @                               @    00 = pause copy
                                @                               @    01 = resume copy
                                @                               @    02 = terminate copy
.b ccsm_gr_process_rsvd1 3      @   UINT8   rsvd1[3];           @ Reserved 3 bytes.
.f ccsm_gr_process_size 0       @} GR_PROCESS;                  @ size of process copy
                                @#define GR_PROCESS_SIZE sizeof(CCSM_E) + sizeof(GR_PROCESS)

# Update
.struct                         @typedef struct GR_UPDATE
                                @{
.f ccsm_gr_update_resvd0 ccsm_e_ext @                           @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_update_id            @   UINT32  id;                 @ registration ID
.w ccsm_gr_update_cmsn          @   UINT32  cmsn;               @ CM serial number
.b ccsm_gr_update_type          @   UINT8   type;               @ update type code
                                @                               @    00 = % complete
                                @                               @    01 = mirrored
                                @                               @    02 = paused
                                @                               @    03 = resumed
                                @                               @    04 = auto-paused
.b ccsm_gr_update_rsvd1 3       @   UINT8   rsvd1[3];           @ reserved bytes (3)
.w ccsm_gr_update_g0            @   UINT32  g0_reg;             @ g0 register
.w ccsm_gr_update_g1            @   UINT32  g1_reg;             @ g1 register
.f ccsm_gr_update_size 0        @} GR_UPDATE;                   @ size of update copy
                                @#define GR_UPDATE_SIZE sizeof(CCSM_E) + sizeof(GR_UPDATE)

# Force Ownership Change Extended Data
.struct                         @typedef struct GR_FORCE
                                @{
.f ccsm_gr_force_resvd0 ccsm_e_ext @                            @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_force_id             @   UINT32  id;                 @ registration ID
.w ccsm_gr_force_cmsn           @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_force_ppo            @   UINT32  ppo;                @ previous pri. owner
.w ccsm_gr_force_pso            @   UINT32  pso;                @ previous sec. owner
.w ccsm_gr_force_npo            @   UINT32  npo;                @ new pri. owner
.w ccsm_gr_force_nso            @   UINT32  nso;                @ new sec. owner
.f ccsm_gr_force_size 0         @} GR_FORCE;                    @ size of force copy
                                @#define GR_FORCE_SIZE sizeof(CCSM_E) + sizeof(GR_FORCE)

# Define Ownership Extended Data
.struct                         @typedef struct GR_DEFINE
                                @{
.f ccsm_gr_define_resvd0 ccsm_e_ext @                           @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_define_id            @   UINT32  id;                 @ registration ID
.w ccsm_gr_define_cmsn          @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_define_npo           @   UINT32  npo;                @ new pri. owner
.w ccsm_gr_define_nso           @   UINT32  nso;                @ new sec. owner
.f ccsm_gr_define_size 0        @} GR_DEFINE;                   @ size of define ownership
                                @#define GR_DEFINE_SIZE sizeof(CCSM_E) + sizeof(GR_DEFINE)

# You Are Owner Extended Data
.struct                         @typedef struct GR_OWNER
                                @{
.f ccsm_gr_owner_resvd0 ccsm_e_ext @                            @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_owner_id             @   UINT32  id;                 @ registration ID
.w ccsm_gr_owner_cmsn           @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_owner_po             @   UINT32  po;                 @ primary owner
.w ccsm_gr_owner_so             @   UINT32  so;                 @ secondary owner
.b ccsm_gr_owner_crstate        @   UINT8   crstate;            @ current cor_crstate value
.b ccsm_gr_owner_rsvd1 3        @   UINT8   rsvd1[3];           @ Reserved 3 bytes.
.f ccsm_gr_owner_size 0         @} GR_OWNER;                    @ Size of you are the owner
                                @#define GR_OWNER_SIZE sizeof(CCSM_E) + sizeof(GR_OWNER)

# Transfer Ownership Extended Data
.struct                         @typedef struct GR_TRANS
                                @{
.f ccsm_gr_trans_resvd0 ccsm_e_ext @                            @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_trans_id             @   UINT32  id;                 @ registration ID
.w ccsm_gr_trans_cmsn           @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_trans_cpo            @   UINT32  cpo;                @ current pri. owner
.w ccsm_gr_trans_cso            @   UINT32  cso;                @ current sec. owner
.f ccsm_gr_trans_size 0         @} GR_TRANS;                    @ Size of transfer ownership
                                @#define GR_TRANS_SIZE sizeof(CCSM_E) + sizeof(GR_TRANS)

# Change Ownership Extended data
.struct                         @typedef struct GR_CHANGE
                                @{
.f ccsm_gr_change_resvd0 ccsm_e_ext @                           @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_change_id            @   UINT32  id;                 @ registration ID
.w ccsm_gr_change_cmsn          @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_change_cpo           @   UINT32  cpo;                @ current pri. owner
.w ccsm_gr_change_cso           @   UINT32  cso;                @ current sec. owner
.w ccsm_gr_change_npo           @   UINT32  npo;                @ new pri. owner
.w ccsm_gr_change_nso           @   UINT32  nso;                @ new sec. owner
.f ccsm_gr_change_size 0        @} GR_CHANGE;                   @ Size of change ownership
                                @#define GR_CHANGE_SIZE sizeof(CCSM_E) + sizeof(GR_CHANGE)

# Suspend Ownership Extended Data
.struct                         @typedef struct GR_SUSP
                                @{
.f ccsm_gr_susp_resvd0 ccsm_e_ext @                             @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_susp_id              @   UINT32  id;                 @ registration ID
.w ccsm_gr_susp_cmsn            @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_susp_npo             @   UINT32  npo;                @ new pri. owner
.w ccsm_gr_susp_nso             @   UINT32  nso;                @ new sec. owner
.f ccsm_gr_susp_size 0          @} GR_SUSP;                     @ Size of change ownership
                                @#define GR_SUSP_SIZE sizeof(CCSM_E) + sizeof(GR_SUSP)

# Ownership Suspended Extended Data
.struct                         @typedef struct GR_SDONE
                                @{
.f ccsm_gr_sdone_resvd0 ccsm_e_ext @                            @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_sdone_id             @   UINT32  id;                 @ registration ID
.w ccsm_gr_sdone_cmsn           @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_sdone_cpo            @   UINT32  cpo;                @ current pri. owner
.w ccsm_gr_sdone_cso            @   UINT32  cso;                @ current sec. owner
.f ccsm_gr_sdone_size 0         @} GR_SDONE;                    @ Size of ownership suspended
                                @#define GR_SDONE_SIZE sizeof(CCSM_E) + sizeof(GR_SDONE)

# Ownership Changed Extended Data
.struct                         @typedef struct GR_CDONE
                                @{
.f ccsm_gr_cdone_resvd0 ccsm_e_ext @                            @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_cdone_id             @   UINT32  id;                 @ registration ID
.w ccsm_gr_cdone_cmsn           @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_cdone_npo            @   UINT32  npo;                @ new pri. owner
.w ccsm_gr_cdone_nso            @   UINT32  nso;                @ new sec. owner
.f ccsm_gr_cdone_size 0         @} GR_CDONE;                    @ Size of ownership suspended
                                @#define GR_CDONE_SIZE sizeof(CCSM_E) + sizeof(GR_CDONE)

# Terminate Ownership Extended Data
.struct                         @typedef struct GR_TERM
                                @{
.f ccsm_gr_term_resvd0 ccsm_e_ext @                             @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_term_id              @   UINT32  id;                 @ registration ID
.w ccsm_gr_term_cmsn            @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_term_npo             @   UINT32  npo;                @ new pri. owner
.w ccsm_gr_term_nso             @   UINT32  nso;                @ new sec. owner
.f ccsm_gr_term_size 0          @} GR_TERM;                     @ Size of terminate suspended
                                @#define GR_TERM_SIZE sizeof(CCSM_E) + sizeof(GR_TERM)

# Ownership Terminated Extended Data
.struct                         @typedef struct GR_TDONE
                                @{
.f ccsm_gr_tdone_resvd0 ccsm_e_ext @                            @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_tdone_id             @   UINT32  id;                 @ registration ID
.w ccsm_gr_tdone_cmsn           @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_tdone_npo            @   UINT32  npo;                @ new pri. owner
.w ccsm_gr_tdone_nso            @   UINT32  nso;                @ new sec. owner
.f ccsm_gr_tdone_size 0         @} GR_TDONE;                    @ Size of ownership terminated
                                @#define GR_TDONE_SIZE sizeof(CCSM_E) + sizeof(GR_TDONE)

# Read Dirty Region Map Extended Data
.struct                         @typedef struct GR_READRM
                                @{
.f ccsm_gr_readrm_resvd0 ccsm_e_ext @                           @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_readrm_id            @   UINT32  id;                 @ registration ID
.w ccsm_gr_readrm_cmsn          @   UINT32  cmsn;               @ CM serial number
.f ccsm_gr_readrm_size 0        @} GR_READRM;                   @ Size of read dirty region map
                                @#define GR_READRM_SIZE sizeof(CCSM_E) + sizeof(GR_READRM)

# Dirty Region Map Extended Data
.struct                         @typedef struct GR_RM
                                @{
.f ccsm_gr_rm_resvd0 ccsm_e_ext @                               @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_rm_id                @   UINT32  id;                 @ registration ID
.w ccsm_gr_rm_cmsn              @   UINT32  cmsn;               @ CM serial number
.b ccsm_gr_rm_map 32            @   UINT8   map[32];            @ dirty region map
.f ccsm_gr_rm_size 0            @} GR_RM;                       @ Size of dirty region map
                                @#define GR_RM_SIZE sizeof(CCSM_E) + sizeof(GR_RM)

# Read Dirty Segment Map Extended Data
.struct                         @typedef struct GR_READSM
                                @{
.f ccsm_gr_readsm_resvd0 ccsm_e_ext @                           @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_readsm_id            @   UINT32  id;                 @ registration ID
.w ccsm_gr_readsm_cmsn          @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_readsm_regnum        @   UINT32  regnum;             @ region number to read
.f ccsm_gr_readsm_size 0        @} GR_READSM;                   @ Size of read dirty segment map
                                @#define GR_READSM_SIZE sizeof(CCSM_E) + sizeof(GR_READSM)

# Dirty Segment Map Extended Data
.struct                         @typedef struct GR_SM
                                @{
.f ccsm_gr_sm_resvd0 ccsm_e_ext @                               @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_sm_id                @   UINT32  id;                 @ registration ID
.w ccsm_gr_sm_cmsn              @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_sm_regnum            @   UINT32  regnum;             @ region number to read
.b ccsm_gr_sm_spare 8           @   UINT32  rsvd[8];            @ Reserved 8 bytes
.b ccsm_gr_sm_map 1024          @   UINT8   map[1024];          @ dirty segment map
.f ccsm_gr_sm_size 0            @} GR_SM;                       @ Size of dirty segment map
                                @#define GR_SM_SIZE sizeof(CCSM_E) + sizeof(GR_SM)

# Copy Registered Extended Data
.struct                         @typedef struct GR_REG
                                @{
.f ccsm_gr_reg_resvd0 ccsm_e_ext @                              @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_reg_id               @   UINT32  id;                 @ registration ID
.w ccsm_gr_reg_cmsn             @   UINT32  cmsn;               @ CM serial number
.f ccsm_gr_reg_size 0           @} GR_REG;                      @ Size of copy registered
                                @#define GR_REG_SIZE sizeof(CCSM_E) + sizeof(GR_REG)

# Copy Devices Moved Extended Data
.struct                         @typedef struct GR_CDM
                                @{
.f ccsm_gr_cdm_resvd0 ccsm_e_ext @                              @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_cdm_id               @   UINT32  id;                 @ registration ID
.w ccsm_gr_cdm_cmsn             @   UINT32  cmsn;               @ CM serial number
.b ccsm_gr_cdm_rcscl            @   UINT8   rcscl;              @ copy reg. copy MAG source cl num
.b ccsm_gr_cdm_rcsvd            @   UINT8   rcsvd;              @ copy reg. copy MAG source VD num
.b ccsm_gr_cdm_rcdcl            @   UINT8   rcdcl;              @ copy reg. copy MAG dest. cl num
.b ccsm_gr_cdm_rcdvd            @   UINT8   rcdvd;              @ copy reg. copy MAG dest. VD num
.w ccsm_gr_cdm_rssn             @   UINT32  rssn;               @ copy reg. source MAG serial num
.w ccsm_gr_cdm_rdsn             @   UINT32  rdsn;               @ copy reg. dest. MAG serial num
.b ccsm_gr_cdm_rscl             @   UINT8   rscl;               @ copy reg. source MAG cluster num
.b ccsm_gr_cdm_rsvd             @   UINT8   rsvd;               @ copy reg. source MAG VDisk num
.b ccsm_gr_cdm_rdcl             @   UINT8   rdcl;               @ copy reg. dest. MAG cluster num
.b ccsm_gr_cdm_rdvd             @   UINT8   rdvd;               @ copy reg. dest. MAG VDisk num
.f ccsm_gr_cdm_size 0           @} GR_CDM;                      @ Size of copy devices moved
                                @#define GR_CDM_SIZE sizeof(CCSM_E) + sizeof(GR_CDM)

# Copy State Changed Extended Data
.struct                         @typedef struct GR_CSC
                                @{
.f ccsm_gr_csc_resvd0 ccsm_e_ext @                              @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_csc_id               @   UINT32  id;                 @ registration ID
.w ccsm_gr_csc_cmsn             @   UINT32  cmsn;               @ CM serial number
.b ccsm_gr_csc_cstate           @   UINT8   cstate;             @ cor_cstate value
.b ccsm_gr_csc_crstate          @   UINT8   crstate;            @ cor_crstate value
.b ccsm_gr_csc_mstate           @   UINT8   mstate;             @ cor_mstate value
.b ccsm_gr_csc_rsvd             @   UINT8   rsvd;               @ Reserved 1 byte
.f ccsm_gr_csc_size 0           @} GR_CSC;                      @ Size of copy state changed
                                @#define GR_CSC_SIZE sizeof(CCSM_E) + sizeof(GR_CSC)

# Copy General Information Changed Extended Data
.struct                         @typedef struct GR_INFO
                                @{
.f ccsm_gr_info_resvd0 ccsm_e_ext @                             @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_info_id              @   UINT32  id;                 @ registration ID
.w ccsm_gr_info_cmsn            @   UINT32  cmsn;               @ CM serial number
.b ccsm_gr_info_label 16        @   UINT8   label[16];          @ cor->label value
.b ccsm_gr_info_gid             @   UINT8   gid;                @ cor->gid value
.b ccsm_gr_info_rsvd 3          @   UINT8   rsvd[3];            @ Reserved 3 bytes
.f ccsm_gr_info_size 0          @} GR_INFO;                     @ Size of copy general info. changed
                                @#define GR_INFO_SIZE sizeof(CCSM_E) + sizeof(GR_INFO)

# Swap RAIDs Extended Data
.struct                         @typedef struct GR_SWAP
                                @{
.f ccsm_gr_swap_resvd0 ccsm_e_ext @                             @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_swap_id              @   UINT32  id;                 @ registration ID
.w ccsm_gr_swap_cmsn            @   UINT32  cmsn;               @ CM serial number
.w ccsm_gr_swap_rid             @   UINT32  rid;                @ new source RAID id
.f ccsm_gr_swap_size 0          @} GR_SWAP;                     @ Size of swap RAIDs
                                @#define GR_SWAP_SIZE sizeof(CCSM_E) + sizeof(GR_SWAP)

# Swap RAIDs Done Extended Data
.struct                         @typedef struct GR_SWAPDONE
                                @{
.f ccsm_gr_swapdone_resvd0 ccsm_e_ext @                         @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_swapdone_id          @   UINT32  id;                 @ registration ID
.w ccsm_gr_swapdone_cmsn        @   UINT32  cmsn;               @ CM serial number
.f ccsm_gr_swapdone_size 0      @} GR_SWAPDONE;                 @ Size of swap RAIDs done
                                @#define GR_SWAPDONE_SIZE sizeof(CCSM_E) + sizeof(GR_SWAPDONE)

# Disable VLink Check Extended Data
.set ccsm_gr_disvlchk_size,ccsm_e_ext @#define GR_DISVLCHK_SIZE sizeof(CCSM_E) @ size of disable VLink check
#
# Disable Refresh NVRAM Extended Data
.struct                         @typedef struct GR_DISFRESH
                                @{
.f ccsm_gr_disfresh_resvd0 ccsm_e_ext @                         @ Position to ccsm_e_ext area of ILT.
.b ccsm_gr_disfresh_usrswap     @   UINT8   usrswap;            @ Userswap Flag GEORAID
.f ccsm_gr_disfresh_size 0      @} GR_DISFRESH;                 @ Size of disable refresh NVRAM
                                @#define GR_DISFRESH_SIZE sizeof(CCSM_E) + sizeof(GR_DISFRESH)

# Enable VLink Check Extended Data
.set ccsm_gr_envlchk_size,ccsm_e_ext @#define GR_ENVLCHK_SIZE sizeof(CCSM_E) @ size of enable VLink check

# Enable Refresh NVRAM Extended Data
.struct                         @typedef struct GR_enFRESH
                                @{
.f ccsm_gr_enfresh_resvd0 ccsm_e_ext @                          @ Position to ccsm_e_ext area of ILT.
.b ccsm_gr_enfresh_usrswap      @   UINT8   usrswap;            @ Userswap Flag GEORAID
.f ccsm_gr_enfresh_size 0       @} GR_ENFRESH;                  @ Size of enable refresh NVRAM
                                @#define GR_ENFRESH_SIZE sizeof(CCSM_E) + sizeof(GR_ENFRESH)

# Copy Devices Moved Acknowledgement Extended Data
.struct                         @typedef struct GR_CDMACK
                                @{
.f ccsm_gr_cdmack_resvd0 ccsm_e_ext @                           @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_cdmack_id            @   UINT32  id;                 @ registration ID
.w ccsm_gr_cdmack_cmsn          @   UINT32  cmsn;               @ CM serial number
.b ccsm_gr_cdmack_rcscl         @   UINT8   rcscl;              @ copy reg. copy MAG source cl num
.b ccsm_gr_cdmack_rcsvd         @   UINT8   rcsvd;              @ copy reg. copy MAG source VD num
.b ccsm_gr_cdmack_rcdcl         @   UINT8   rcdcl;              @ copy reg. copy MAG dest. cl num
.b ccsm_gr_cdmack_rcdvd         @   UINT8   rcdvd;              @ copy reg. copy MAG rcdvd VD num
.w ccsm_gr_cdmack_rssn          @   UINT32  rssn;               @ copy reg. source MAG serial num
.w ccsm_gr_cdmack_rdsn          @   UINT32  rdsn;               @ copy reg. dest. MAG serial num
.b ccsm_gr_cdmack_rscl          @   UINT8   rscl;               @ copy reg. source MAG cluster num
.b ccsm_gr_cdmack_rsvd          @   UINT8   rsvd;               @ copy reg. source MAG VDisk num
.b ccsm_gr_cdmack_rdcl          @   UINT8   rdcl;               @ copy reg. dest. MAG cluster num
.b ccsm_gr_cdmack_rdvd          @   UINT8   rdvd;               @ copy reg. dest. MAG VDisk num
.f ccsm_gr_cdmack_size 0        @} GR_CDMACK;                   @ Size of copy devices moved acknowledgement
                                @#define GR_CDMACK_SIZE sizeof(CCSM_E) + sizeof(GR_CDMACK)

# Copy State Changed Acknowledgement Extended Data
.struct                         @typedef struct GR_CSCACK
                                @{
.f ccsm_gr_cscack_resvd0 ccsm_e_ext @                           @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_cscack_id            @   UINT32  id;                 @ registration ID
.w ccsm_gr_cscack_cmsn          @   UINT32  cmsn;               @ CM serial number
.b ccsm_gr_cscack_cstate        @   UINT8   cstate;             @ cor_cstate value
.b ccsm_gr_cscack_crstate       @   UINT8   crstate;            @ cor_crstate value
.b ccsm_gr_cscack_mstate        @   UINT8   mstate;             @ cor_mstate value
.b ccsm_gr_cscack_rsvd1         @   UINT8   rsvd1;              @ Reserved 1 byte
.f ccsm_gr_cscack_size 0        @} GR_CSCACK;                   @ Size of copy state changed acknowledgement
                                @#define GR_CSCACK_SIZE sizeof(CCSM_E) + sizeof(GR_CSCACK)

# Copy General Information Changed Acknowledgement Extended Data
.struct                         @typedef struct GR_INFOACK
                                @{
.f ccsm_gr_infoack_resvd0 ccsm_e_ext @                          @ Position to ccsm_e_ext area of ILT.
.w ccsm_gr_infoack_id           @   UINT32  id;                 @ registration ID
.w ccsm_gr_infoack_cmsn         @   UINT32  cmsn;               @ CM serial number
.b ccsm_gr_infoack_label 16     @   UINT8   label[16];          @ cor_label value
.b ccsm_gr_infoack_gid          @   UINT8   gid;                @ cor_gid value
.b ccsm_gr_infoack_rsvd1 3      @   UINT8   rsvd1[3];           @ Reserved 3 bytes
.f ccsm_gr_infoack_size 0       @} GR_INFOACK;                  @ Size of copy general info. changed acknowledgement
                                @#define GR_INFOACK_SIZE sizeof(CCSM_E) + sizeof(GR_INFOACK)

# Message Union Structures
                                @typedef struct CCSM_DE
                                @{
                                @    CCSM_E  e;
                                @    union
                                @    {
                                @        DE_START    start;      @ Start Copy Extended Data
                                @        DE_TERM     term;       @ Terminate Copy Extended Data
                                @        DE_PAUSE    pause;      @ Pause Copy Extended Data
                                @        DE_RESUME   resume;     @ Resume Copy Extended Data
                                @        DE_SWAP     swap;       @ Swap RAIDs Extended Data
                                @    } de;
                                @} CCSM_DE;
                                @
                                @typedef struct CCSM_GR
                                @{
                                @    CCSM_E  e;
                                @    union
                                @    {
                                @        GR_START    start;      @ Start Copy CCBGram Extended Data
                                @        GR_PROCESS  process;    @ Process CCBGram Extended Data
                                @        GR_UPDATE   update;     @ Update
                                @        GR_FORCE    force;      @ Force Ownership Change Extended Data
                                @        GR_DEFINE   define;     @ Define Ownership Extended Data
                                @        GR_OWNER    owner;      @ You Are Owner Extended Data
                                @        GR_TRANS    trans;      @ Transfer Ownership Extended Data
                                @        GR_CHANGE   change;     @ Change Ownership Extended data
                                @        GR_SUSP     susp;       @ Suspend Ownership Extended Data
                                @        GR_SDONE    sdone;      @ Ownership Suspended Extended Data
                                @        GR_CDONE    cdone;      @ Ownership Changed Extended Data
                                @        GR_TERM     term;       @ Terminate Ownership Extended Data
                                @        GR_TDONE    tdone;      @ Ownership Terminated Extended Data
                                @        GR_READRM   readrm;     @ Read Dirty Region Map Extended Data
                                @        GR_RM       rm;         @ Dirty Region Map Extended Data
                                @        GR_READSM   readsm;     @ Read Dirty Segment Map Extended Data
                                @        GR_SM       sm;         @ Dirty Segment Map Extended Data
                                @        GR_REG      reg;        @ Copy Registered Extended Data
                                @        GR_CDM      cdm;        @ Copy Devices Moved Extended Data
                                @        GR_CSC      csc;        @ Copy State Changed Extended Data
                                @        GR_INFO     info;       @ Copy General Info Changed Extended Data
                                @        GR_SWAP     swap;       @ Swap RAIDs Extended Data
                                @        GR_SWAPDONE swapdone;   @ Swap RAIDs Done Extended Data
                                @        GR_CDMACK   cdmack;     @ Copy Devices Moved Ack Extended Data
                                @        GR_CSCACK   cscack;     @ Copy State Changed Ack Extended Data
                                @        GR_INFOACK  infoack;    @ Copy General Info Changed Ack Extended Data
                                @    } gr;
                                @} CCSM_GR;

# CCSM Client Interface Definitions --------------------------------------
#
# The CCSM Client Interface consists of a set of routines that the client
# CM task can call when a CCSM client service is required. The CCSM client
# interface consist of the following event/service routines:
#       1) CM task initialized
#       2) Update copy (% complete)
#       3) Copy user paused
#       4) Copy auto-paused
#       5) Copy resumed
#       6) Copy mirrored
#       7) Copy terminated
#       8) Copy registered
#      10) RAIDs swapped
#      11) Ownership suspended
#      12) Ownership terminated
#      13) Region synchronized
#      14) Region dirty
#      15) Get CWIP record
#      16) Put CWIP record
#      17) Initiate modify COR
#      18) Modify COR completed

                        @#endif /* _CCSM_H_ */
#******************************************************************************
#
####
## Modelines:
## Local Variables:
## tab-width: 4
## indent-tabs-mode: nil
## End:
## vi:sw=4 ts=4 expandtab
