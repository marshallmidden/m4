# $Id: cm.def 143007 2010-06-22 14:48:58Z m4 $
#**********************************************************************
#
#  NAME: cm.def (Copy Manager Table)
#
#  DESCRIPTION:
#       This file defines the data structures and definitions to support
#       the copy manager component of a copy operation.
#
#  Copyright (c) 2001-2009 XIOtech Corporation.  All rights reserved.
#
#**********************************************************************

                                @#ifndef _CM_H_
                                @#define _CM_H_
                                @#include "XIO_Types.h"
                                @#include "qu.h"
                                @struct COR;
                                @struct PCB;
                                @struct RRP;
                                @struct VDD;
#
# --- Copy Manager copy state code (cm_cstate) definitions
#     These states are bit mapped as follows:
#               bit     function
#               ---     --------
#                0      restart copy
#                1      copy active
#                2      device mirrored
#                3      copy operation stop request
#                4      copy/mirror paused
#                5      auto feature active
#                6      abort copy/mirror
.def cmcst_b_restart 0          @#define CSTB_RESTART           @ restart copy
.def cmcst_b_copy 1             @#define CSTB_COPY              @ copy active
.def cmcst_b_mirrored 2         @#define CSTB_MIRRORED          @ device mirrored
.def cmcst_b_stop 3             @#define CSTB_STOP              @ copy/mirror suspend pending
.def cmcst_b_pause 4            @#define CSTB_PAUSE             @ copy/mirror suspended
.def cmcst_b_auto 5             @#define CSTB_AUTO              @ auto activated
.def cmcst_b_abort 6            @#define CSTB_ABORT             @ abort copy/mirror
.def cmcst_b_NRS 7              @#define CSTB_NRS               @ no resources suspension
#
.def cmcst_uni 0                @#define CSTO_UNI               @ uninitialized
.def cmcst_restart 1            @#define CSTO_RESTART           @ restart copy
.def cmcst_copy 2               @#define CSTO_COPY              @ copy data
.def cmcst_mirror 4             @#define CSTO_MIRROR            @ mirrored (synchronized)
.def cmcst_resync 6             @#define CSTO_RESYNC            @ resynchronizing
.def cmcst_userpaused 0x10      @#define CSTO_USERPAUSE         @ copy user paused
.def cmcst_up_restart 0x11      @#define CSTO_UP_RESTART        @ user paused but must restart
.def cmcst_autopaused 0x30      @#define CSTO_AUTOPAUSET        @ copy auto paused
.def cmcst_ap_restart 0x31      @#define CSTO_AP_RESTART        @ auto paused but must restart
.def cmcst_NRS 0x80             @#define CSTO_NRS               @ CM suspended - no resources
#
# --- Copy Manager copy priority code (cm_pri) definitions
#   The upper nibble is the copy priority, the lower nibble is the copy
#   strategy and is defined in vrp.inc.
#
.def cmp_low 1                  @#define CMP_LOW                @ low priority
.def cmp_norm 2                 @#define CMP_NORM               @ normal priority
.def cmp_high 3                 @#define CMP_HIGH               @ high priority
#
# --- Copy Manager copy completion status to MMC code (cm_compstat) definition
#
.def cmcc_ok 0                  @#define CC_OK                  @ successful

.def cmcc_MirrorEnd 0x11        @#define CC_MIRROREND           @ Mirror Ended
.def cmcc_UsrTerm 0x12          @#define CC_USRTERM             @ Copy Terminated by User
.def cmcc_AutoTerm 0x13         @#define CC_AUTOTERM            @ Copy Terminated by CM
.def cmcc_CpyStart 0x14         @#define CC_CPYSTART            @ Copy Started
.def cmcc_CpyMirror 0x15        @#define CC_CPYMIRROR           @ Copy Mirrored
.def cmcc_RAIDSwap 0x16         @#define CC_RAIDSWAP            @ RAIDs Swapped
.def cmcc_UsrSpnd 0x17          @#define CC_USRSPND             @ User Suspended
.def cmcc_UsrRsm 0x18           @#define CC_USRRSM              @ User Resume
.def cmcc_AutoSpnd 0x19         @#define CC_AUTOSPND            @ Auto Suspend
.def cmcc_CpyRsm 0x1a           @#define CC_CPYRSM              @ Copy Resume
.def cmcc_CMSpnd 0x1b           @#define CC_CMSPND              @ Mirror Suspendes by Swap Operation
.def cmcc_RSD_2vl 0x1c          @#define CC_RSD_2VL             @ RAID Swap Denied - 2 vlinks to same
                                @                               @   MAGNITUDE
.def cmcc_RSD_noDV 0x1d         @#define CC_RSD_NODV            @ RAID Swap Denied - Device not defined
.def cmcc_RSD_vl2vl 0x1e        @#define CC_RSD_VL2VL           @ RAID Swap Denied - Vlink to Vlink
.def cmcc_AqrdOwnrshp 0x20      @#define CC_AQRDOWNRSHP         @ Ownership of copy acquired
.def cmcc_OwnrshpTerm 0x21      @#define CC_OWNRSHPTERM         @ Ownership of copy terminated
.def cmcc_ForceOwnrshp 0x22     @#define CC_FORCEOWNRSHP        @ Force Ownership of copy
#
# --- Copy Manager mirror type code (cm_mtype) definitions
#
.def cmmt_sync 0                @#define MT_SYNC                @ synchronous type mirror
.def cmmt_async 1               @#define MT_ASYNC               @ asynchronous type mirror
#
# --- Copy Manager copy type code (cm_type) definitions
#
.def cmty_mirror 0              @#define TY_MIRROR              @ copy and mirror (continuous copy)
.def cmty_copybreak 1           @#define TY_COPYBREAK           @ copy and break type
.def cmty_copyswap 2            @#define TY_COPYSWAP            @ copy, swap, and break type
.def cmty_mirrorswap 3          @#define TY_MIRRORSWAP          @ copy, swap, and mirror type
#
#       Copy Manager Table (CM) Definition
#       ----------------------------------
# --- Begin CM main structure ------------------------------------------------
#
                                @           @ Initiator Request Packet structure
.struct                         @typedef struct CM
                                @{
.w cm_link                      @   struct CM   *link;          @ link list for completion queuing
.w cm_scr                       @   void        *scr;           @ Active SCR list
.w cm_cor                       @   struct COR  *cor;           @ assoc. COR address
.w cm_pcb                       @   struct PCB  *pcb;           @ copy process PCB address
.b cm_cstate                    @   UINT8        copystate;     @ copy state
.b cm_type                      @   UINT8        copytype;      @ copy type code
.b cm_pri                       @   UINT8        priority;      @ copy priority/strategy
.b cm_compstat                  @   UINT8        compstat;      @ copy completion status to MMC
.w cm_totalsegs                 @   UINT32       totalsegs;     @ total # segments to copy
.w cm_remsegs                   @   UINT32       remsegs;       @ remaining # segments to copy
.b cm_flags                     @   UINT8        flags;         @ flags
                                @                               @ Bit 7 = pending break-off
                                @                               @     6 = pending stop
                                @                               @     5 = pending terminate
                                @                               @     4 = orig. VDD raids moved
                                @                               @     3 =
                                @                               @     2 =
                                @                               @     1 =
                                @                               @     0 = on v$seccopy work queue
.b cm_mtype                     @   UINT8        mirrortype;    @ mirror type code
.b cm_PIC                       @   UINT8        PIC;           @ poll inhibit counter
.b cm_rsvd1                     @   UINT8        rsvd1;         @ Reserved 1 byte
.w cm_scmts                     @   struct SCMT *scmts;         @ Segment Copy Mngmnt Tbl list
.w cm_pctlrqst                  @   void        *pctlrqst;      @ pending control request
.b cm_lastpct                   @   UINT8        lastpct;       @ last percentage indicated
.b cmrsvd2 3                    @   UINT8        rsvd2[3];      @ Reserved 3 bytes
.w cm_lasttime                  @   UINT32       lasttime;      @ last time percent was sent
.q cm_cmpltq                    @   struct QU    cmpltq;        @ SCR completion queue
.q cm_ctlrqstq                  @   struct QU    ctlrqstq;      @ control request queue
.q cm_uderrq                    @   struct QU    uderrq;        @ update error queue
# --- End structure ---------------------------------------------------
.f cmsize 0 # Size of CMs       @} CM;

#
# --- Following structures are for Instant Mirror configuration saving in both DCNs
#

            @typedef struct CM_CONFUPDT_EVENT {
            @   UINT32      len;                @ event length
            @   UINT8       type;               @ event type code
            @   UINT8       fc;                 @ event function code
            @   UINT16      seq;                @ sequence
            @   UINT32      sendsn;             @ sender's serial
            @} CM_CONFUPDT_EVENT;

            @typedef struct CM_CONFUPDT_DATAGRAM {
            @   CM_CONFUPDT_EVENT dgmEvent;
            @   union   {                       @ different types of data can be passed
#           ---- (a)  config change related to instant mirror
            @     struct {
            @        UINT16 vid;
            @        UINT8  imEnableFlag;
            @        UINT8  requireNvSave;
            @        } instMirror;
#           ---- (b) any new data can be added in future
            @   } data;
            @} CM_CONFUPDT_DATAGRAM;

#
# --- Function prototypes   -------------------------------------------
#

            @void        CM_VdiskEnableInstantMirror (struct VDD* pVDD);
            @void        CM_VdiskDisableInstantMirror(struct VDD* pVDD);
            @UINT32      CM_VdiskInstantMirrorAllowed(struct VDD* pVDD);
            @void        CM_InstantMirror (struct COR* pCOR, CM* pCM);
            @extern void V_updFEStatus(void);
            @void        CM_ImConfigChangeUpdate (struct VDD* pVDD ,UINT8 imEnableFlag);
            @void        CM_ImConfigChangeDgmRecv (CM_CONFUPDT_DATAGRAM* pConfigDgm);
            @void        CM_ResetInstantMirrorFlags(struct VDD* pVDD, struct RRP* pRRP);

                        @#endif /* _CM_H_ */
#******************************************************************************
#
####
## Modelines:
## Local Variables:
## tab-width: 4
## indent-tabs-mode: nil
## End:
## vi:sw=4 ts=4 expandtab
