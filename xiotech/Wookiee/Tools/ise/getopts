# getopts  -- like the library routine
#  sets flags based on the options available


proc getopts {opts Argv Options} {
    upvar $Argv argv $Options options
    catch {unset options}

    set errflag 0

    while {[string match "-*" $argv]} {
	regexp "^-(\[^ ]+)( +(.*)?)?$" $argv junk block junk newargv
	set argv $newargv
	if {[string match "-" $block]} break

	for {set index 0} {$index < [string length $block]} {incr index} {
	    set char [string range $block $index $index]
	    set junk [string first $char $opts]
	    if {$junk < 0} {
		puts stderr "getopt: unknown option '$char'\n"
		incr errflag
	    } else {
		set options($char) 1
		incr junk
		if {! [string match ":" [string range $opts $junk $junk]]} {
		    continue
		}
#
#  here is the case where we expect a mandatory argument to the option
#
#   if there is anything left in the block, that is the argument
#   otherwise, we take the next argument in the line
#   otherwise, it is an error

                if {[incr index] < [string length $block]} {
		    set options($char) [string range $block $index end]
		} else {
		    set pos [string first " " $argv]
		    if {$pos < 0} { 
			if {[string length $argv] < 1} {  
			    puts stderr "getopt: missing argument for '$char' option\n"
			    incr errflag
			} else {
			    set options($char) $argv
			    set argv ""
			}
		    } else {
			set options($char) [string range $argv 0 [expr $pos - 1]]
			set argv [string range $argv [incr pos] end]
		    }
		}
		break
	    }
	}
    }	
    return $errflag
} 
