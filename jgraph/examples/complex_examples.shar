# To unbundle, "sed '1,/^# To unbundle/d' < thisfile | sh"
# Wed Jul 15 15:10:02 EDT 1992
echo README 1>&2
sed 's/^-//' >'README' <<'End of README'
-This directory contains a few examples of using jgraph to draw figures.
-They range from relatively simple to quite complex.
-
-I can't claim that jgraph is a better way to draw pictures than normal
-WYSIWYG editors like MacDraw or xfig or idraw.  However, it has a few
-advantages.  First, because of jgraph's string justification and rotation
-commands, jgraph plots text more reliably than other tools.  Since you
-must specify exact points with jgraph, arrows are guaranteed to go to
-the right places and so on.  Although it's more cumbersome, it is also
-more precise.
-
-Second, because jgraph is essentially a programming language, it makes
-it easier to use tools like awk and nawk and sed to draw pictures which
-have iterative structure.  This is a failing of most WYSIWYG editors.
-Drawing a picture like those in tree.awk would be quite difficult and
-tedious in your standard WYSIWYG editor.
-
-The files are: from simplest to most complex:
-
-
-
----- Straight jgraph files
-
-mlti.jgr -- A graph plotting a simple multicomputer incterconnection
-timeline.jgr -- A graph plotting a time line of three computers
-                sending messages to one another
-wedmap.jgr -- A map made with jgraph
-
-
-
----- Jgraph mixed with awk/nawk/sh
-
-tree.awk -- This is an nawk file which will create a jgraph for any
-            m-level n-ary tree, where m and n are specified in the
-            command line arguments
-
-grtoj.sh -- This is a shell script mixed with nawk written by Adam 
-            Buchsbaum at Princeton which is a jgraph preprocessor
-            for drawing graphs (the kind with nodes and edges, not
-            the kind with points and hash marks).  He hasn't written
-            up a man page for it, but you can see how much of it works
-            with the example file grex.gtj.
-
-diskarray.jgr -- This is a jgraph file which shows a very neat mixture
-                 of jgraph and awk.  First, there is the file convert.awk,
-                 which takes a jgraph file, and converts it into an awk
-                 file.  This awk file takes as input a pair of x and y 
-                 coordinates on the command line arguments, and then 
-                 produces the jgraph to plot the original jgraph file 
-                 at those coordinates in the new jgraph file.  In this
-                 file, disk.jgr is plotted 6 times to make a disk array.
-
-ckpov.jgr -- This is a similar jgraph file, which uses the more complex
-             file srm.jgr, depicting a computer screen to make a nice
-             picture.
-
-seq.jgr
-conc.jgr
-cow.jgr
-cll.jgr 
-alg.jgr -- These are all files which comprise alg.jgr.  Note that
-           they are standalone pictures.  Alg.jgr simply plots all
-           of them together.  Thus they show a neat way that jgraph
-           makes it easy to not duplicate work when duplicating pictures.
-
End of README
echo alg.jgr 1>&2
sed 's/^-//' >'alg.jgr' <<'End of alg.jgr'
-(* This is a very complex jgraph picture used in a paper on checkpointing.
-   Basically, it is a graphic representation of four checkpointing algorithms.
-
-   The four algorithms are in the files seq.jgr, conc.jgr, cow.jgr, and 
-   cll.jgr.  This file lays those four algorithms out on the page, gives
-   them titles, and then draws a legend at the bottom.  It ends up calling
-   the shell construct 24 times, forking off 72 processes, which might seem
-   like a lot, but it only takes 9 seconds to produce the output on a
-   DECstation 5000.
-
-   Note that in this file, the y-axis if the drawings is shrunk, so that
-   they all fit better on the page.
-*)
-
-include seq.jgr
-yaxis size 1.5
-title y -.5 : Sequential Algorithm
-x_translate -1.5
-y_translate 2.5
-
-include conc.jgr
-yaxis size 1.5
-x_translate 1.5
-y_translate 2.5
-title y -.5 : Main Memory Algorithm
-
-include cow.jgr
-yaxis size 1.5
-title y -.5 : Copy-on-write Algorithm
-x_translate -1.5
-
-include cll.jgr
-yaxis size 1.5
-title y -.5 : CLL Algorithm
-x_translate 1.5
-
-newgraph
-y_translate -1.9 
-x_translate -1
-xaxis max 2 min 0 size 2 nodraw
-yaxis max 2 min 0 size 2 nodraw
-
-newline linetype solid rarrow asize .07 .04  label fontsize 10
-  : Bytes copied / written when all processors are frozen
-newline linetype dotted rarrow asize .07 .04  label fontsize 10
-  : Bytes copied / written after the processors are restarted
-newline linetype longdash rarrow asize .07 .04  label fontsize 10
-  : Bytes written after the main memory checkpoint is complete
-
-legend on x 0 y 1
-  linelength 1
End of alg.jgr
echo ckpov.jgr 1>&2
sed 's/^-//' >'ckpov.jgr' <<'End of ckpov.jgr'
-(* This is a pretty ugly file, which prints an overview of checkpointing.
-   It's interesting because like diskarray.jgr, it makes use of convert.awk
-   to plot disk drives, and computer screens (from srm.awk)
-*)
-
-
-(* Draw the top time line *)
-
-newgraph
-xaxis min 0 max 13 size 6 nodraw
-yaxis min 0 max 4 size 2.5 nodraw
-
-shell : echo "0 1.5" | awk -f srm.awk
-newcurve marktype box fill .8 marksize .8 .7 pts 0.9 3.15
-
-newline linethickness 3 
-  pts 2.5 2.5   3.0 3.0   3.5 3.0   4.0 3.2   4.5 3.0   5.0 3.5
-      5.5 3.2   6.0 2.7   6.5 2.8   7.0 2.5   7.5 2.8   8.0 3.2
-      8.5 2.9   9.0 3.1   9.5 2.8   10.0 2.7
-newline linethickness 3 rarrows asize .3 .2 pts 10.0 2.7   10.5 2.5
-
-shell : echo "11 1.5" | awk -f srm.awk
-
-
-(* Draw the middle time line, with checkpoints and a failure *)
-
-copygraph
-y_translate -2.2
-
-shell : echo "0 1.5" | awk -f srm.awk
-newcurve marktype box fill .8 marksize .8 .7 pts 0.9 3.15
-
-newline linethickness 3 
-  pts 2.5 2.5   3.0 3.0   3.5 3.0   4.0 3.2   4.5 3.0   5.0 3.5
-      5.5 3.2   6.0 2.7   6.5 2.8   7.0 2.5   7.5 2.8   8.0 3.2
-newline linethickness 3 rarrows asize .3 .2 pts 8.0 3.2   8.5 2.9
-newstring x 8.8 y 2.9 hjl vjc fontsize 14 : Failure
-
-newline rarrows pts 3.5 3.0  3.4 1.6
-shell : echo "3.2 1.1" | awk -f disk.awk
-
-newline rarrows pts 5.5 3.2  5.4 1.6
-shell : echo "5.2 1.1" | awk -f disk.awk
-
-newline rarrows pts 7.5 2.8  7.4 1.6
-shell : echo "7.2 1.1" | awk -f disk.awk
-
-newstring x 5.5 y 4.5 fontsize 12 hjc vjb : Checkpoints
-newline rarrows pts 5.5 4.3 3.6 3.2
-newline rarrows pts 5.5 4.3 5.5 3.4
-newline rarrows pts 5.5 4.3 7.4 3.0
-
-
-(* Draw the bottom time line, which recovers from the checkpoint *)
-
-copygraph
-y_translate -4.4
-
-newline linethickness 3 
-  pts 7.5 2.8   8.0 3.2   8.5 2.9   9.0 3.1   9.5 2.8   10.0 2.7
-newline linethickness 3 rarrows asize .3 .2 pts 10.0 2.7   10.5 2.5
-
-shell : echo "11 1.5" | awk -f srm.awk
-
-newline larrows pts 7.5 2.7  7.4 1.6
-shell : echo "7.2 1.2" | awk -f disk.awk
-
-newstring fontsize 12 hjr vjc x 7.3 y 2.8 : Recover
-
End of ckpov.jgr
echo cll.jgr 1>&2
sed 's/^-//' >'cll.jgr' <<'End of cll.jgr'
-(* This is a picture of the Concurrent, low-latency checkpointing algorithm. *)
-
-newgraph
-xaxis min 0 max 3 size 2.5 nodraw
-yaxis min 0 max 2.0 size 2.0 nodraw
-
-(* Draw the address space *)
-newstring fontsize 9 hjc vjt x 0.25 y -0.07 : Address\
-Space
-
-newcurve marktype ellipse marksize 0.1 .14 fill 1 pts
-shell : echo "" | awk '{ for (i = 0.67; i < 1.37; i += 0.14) printf("0.5 %f\n", i, i);}'
-
-newcurve marktype box fill 1 marksize 0.5 0.6 pts 0.25 0.3
-newcurve marktype box fill 0.5 marksize 0.5 0.14 pts 
-
-
-shell : echo "" | awk '{ for (i = 0.67; i < 1.37; i += 0.14) printf("0.25 %f\n", i);}'
-copycurve fill 1 pts
-shell : echo "" | awk '{ for (i = 1.37; i < 2.00; i += 0.14) printf("0.25 %f\n", i);}'
-
-(* Draw the registers *)
-newline pts 0.0 0.6    0.5 0.6
-shell : echo "0.7 0" | awk -f regs.awk
-newstring hjc vjc fontsize 7 x 1.3 y 0.3 : . . .
-newstring fontsize 9 hjc vjt x 1.05 y -0.07 : CPU\
-States
-
-(* Draw the pool of page buffers *)
-
-newcurve marktype ellipse fill 1 marksize 0.1 0.14 pts
-shell : echo "" | awk '{ for (i = 0.67; i < 1.09; i += 0.14) printf("2.2 %f\n", i);}'
-newcurve marktype box marksize 0.5 0.14 fill 1 pts
-shell : echo "" | awk '{ for (i = 0.67; i < 1.09; i += 0.14) printf("1.95 %f\n", i);}'
-shell : echo "" | awk '{ for (i = 1.51; i < 1.79; i += 0.14) printf("1.95 %f\n", i);}'
-copycurve fill .5 pts
-shell : echo "" | awk '{ for (i = 1.09; i < 1.51; i += 0.14) printf("1.95 %f\n", i);}'
-newstring fontsize 9 hjc vjt x 1.95 y 0.53 : Page\
-Pool
-
-
-(* Draw arrows *)
-newcurve marktype text hjl vjc x 0 y 0 rotate 90 fontsize 7 : . . . 
-  pts 0.9 1.35   2.5 1.05
-shell : echo "" | awk '{ for (i = 0.67; i < 1.37; i += 0.14) printf("newline linetype dotted rarrow asize .07 .04  pts 0.55 %f 1.6 %f\n", i, i+.14);}'
-
-newline pts 1.3 0.635   1.22  0.4
-newline pts 1.3 0.635   1.3  0.4
-newline pts 1.3 0.635   1.38  0.4
-newline rarrow asize .07 .04  pts 1.0 0.6   1.3 0.635   1.6 0.67
-
-(* Draw the bezier to disk *)
-
-newline linetype dotted 
-shell : echo "" | awk '{ for (i = 0.67; i < 1.09; i += 0.14) printf("copycurve bezier pts 2.25 %f 2.6 %f 2.7 %f 2.7 %f\n", i, i+.1, i, i-.1);}' 
-copycurve nobezier rarrow asize .07 .04  pts 2.7 0.85 2.7 0.45
-
-(* Draw the disk *)
-shell : echo "2.5 0.0" | awk -f disk.awk
End of cll.jgr
echo conc.jgr 1>&2
sed 's/^-//' >'conc.jgr' <<'End of conc.jgr'
-(* This is a picture of the concurrent checkpointing algorithm. *)
-
-newgraph
-xaxis min 0 max 3 size 2.5 nodraw
-yaxis min 0 max 2.0 size 2 nodraw
-
-(* Draw the address space *)
-
-newstring fontsize 9 hjc vjt x 0.25 y -0.07 : Address\
-Space
-
-newcurve fill 1 marktype ellipse marksize 0.2 1.4 pts 0.5 1.3
-newcurve marktype box fill 1 marksize 0.5 2.0 pts 0.25 1
-newline pts 0.0 0.6    0.5 0.6
-
-(* Draw the registers *)
-shell : echo "0.7 0" | awk -f regs.awk
-newstring hjc vjc fontsize 7 x 1.3 y 0.3 : . . .
-newstring fontsize 9 hjc vjt x 1.05 y -0.07 : CPU\
-States
-
-(* Draw the second address space *)
-newcurve fill 1 marktype ellipse marksize 0.2 1.5 pts 2.2 1.25
-newcurve marktype box marksize 0.5 2.0 fill 1 pts 1.95 1
-copycurve marksize 0.5 1.4 fill .5 pts 1.95 1.3
-copycurve marksize 0.5 0.1 pts 1.95 0.55
-newstring fontsize 9 hjc vjt x 1.95 y -0.07 : New Address\
-Space
-
-(* Draw all the arrows *)
-newline rarrow asize .07 .04  pts 0.6 1.3   1.60 1.3
-newline pts 1.3 0.575   1.22  0.4
-newline pts 1.3 0.575   1.3  0.4
-newline pts 1.3 0.575   1.38  0.4
-newline rarrow asize .07 .04  pts 1.0 0.6   1.3 0.575   1.6 0.55
-
-newline linetype longdash rarrow asize .07 .04  pts 2.3 1.25 2.6 0.45
-
-(* Draw the disk *)
-shell : echo "2.5 0.0" | awk -f disk.awk
End of conc.jgr
echo convert.awk 1>&2
sed 's/^-//' >'convert.awk' <<'End of convert.awk'
-BEGIN	{ printf("{ x = $1; y = $2; \\\n"); }
-	{ inpts = 0; instr = 0; npts = 0; inx = 0; \
-          iny = 0;\
-          printf("  printf(\"");\
-          for (i = 1; i <= NF; i++) {\
-            if (instr) { \
-              printf(" %s", $i); \
-            } else if (inpts > 0) {\
-              printf(" %%f");\
-              pts[npts] = $i;\
-              if (inpts % 2) x[npts] = "x"; else x[npts] = "y";\
-              inpts++;\
-              npts++;\
-            } else if (inx) {\
-              printf(" %%f");\
-              pts[npts] = $i;\
-              x[npts] = "x";\
-              npts++;\
-              inx = 0;\
-            } else if (iny) {\
-              printf(" %%f");\
-              pts[npts] = $i;\
-              x[npts] = "y";\
-              npts++;\
-              iny = 0;\
-            } else {\
-              printf(" %s", $i);\
-              if ($i == ":") instr = 1;\
-              if ($i == "x") inx = 1;\
-              if ($i == "y") iny = 1;\
-              if ($i == "pts") inpts = 1; \
-            }\
-          }\
-          printf("\\n\"");\
-          if (npts > 0) {\
-            for (i = 0; i < npts; i++) {\
-              printf(", %s + %f", x[i], pts[i]);\
-            }\
-          }\
-          printf(");\\\n");\
-        }
-END	{ printf("}\n"); }
End of convert.awk
echo cow.jgr 1>&2
sed 's/^-//' >'cow.jgr' <<'End of cow.jgr'
-(* This is a picture of the Copy-on-write checkpointing algorithm. *)
-
-newgraph
-xaxis min 0 max 3 size 2.5 nodraw
-yaxis min 0 max 2.0 size 2 nodraw
-
-(* Draw the address space *)
-newstring fontsize 9 hjc vjt x 0.25 y -0.07 : Address\
-Space
-
-(* Draw the page boundaries with awk *)
-
-newcurve marktype ellipse marksize 0.1 .14 fill 1 pts
-shell : echo "" | awk '{ for (i = 0.67; i < 2.0; i += 0.14) printf("0.5 %f\n", i, i);}'
-newcurve marktype box fill 1 marksize 0.5 2.0 pts 0.25 1
-shell : echo "" | awk '{ for (i = 0.6; i < 2.0; i += 0.14) printf("newline pts 0 %f 0.5 %f\n", i, i);}'
-
-(* Draw the registers *)
-newline pts 0.0 0.6    0.5 0.6
-shell : echo "0.7 0" | awk -f regs.awk
-newstring hjc vjc fontsize 7 x 1.3 y 0.3 : . . .
-newstring fontsize 9 hjc vjt x 1.05 y -0.07 : CPU\
-States
-
-(* Draw the second address space *)
-newcurve fill 1 marktype ellipse marksize 0.2 1.5 pts 2.2 1.25
-newcurve marktype box marksize 0.5 2.0 fill 1 pts 1.95 1
-copycurve marksize 0.5 1.4 fill .5 pts 1.95 1.3
-copycurve marksize 0.5 0.1 pts 1.95 0.55
-
-(* Draw the second address space's page boundaries *)
-
-shell : echo "" | awk '{ for (i = 0.6; i < 2.0; i += 0.14) printf("newline pts 1.7 %f 2.2 %f\n", i, i);}'
-shell : echo "" | awk '{ for (i = 0.67; i < 2.0; i += 0.14) printf("newline linetype dotted rarrow asize .07 .04  pts 0.55 %f 1.65 %f\n", i, i);}'
-
-newstring fontsize 9 hjc vjt x 1.95 y -0.07 : New Address\
-Space
-
-(* Draw the arrows *)
-newline pts 1.3 0.575   1.22  0.4
-newline pts 1.3 0.575   1.3  0.4
-newline pts 1.3 0.575   1.38  0.4
-newline rarrow asize .07 .04  pts 1.0 0.6   1.3 0.575   1.6 0.55
-
-newline linetype longdash rarrow asize .07 .04  pts 2.3 1.25 2.6 0.45
-
-(* Draw the disk *)
-shell : echo "2.5 0.0" | awk -f disk.awk
End of cow.jgr
echo disk.jgr 1>&2
sed 's/^-//' >'disk.jgr' <<'End of disk.jgr'
-(* Picture of a disk:
-   0 0 to 0.4 0.4 *)
-
-newcurve marktype ellipse fill .5 marksize 0.4 0.2 pts 0.2 0.1
-newcurve marktype box fill .5 gray .5 marksize 0.4 0.2 pts 0.2 0.2
-newline pts 0.0 0.1   0.0 0.3
-newline pts 0.4 0.1   0.4 0.3
-newcurve marktype ellipse fill 1 marksize 0.4 0.2 pts 0.2 0.3
-
End of disk.jgr
echo diskarray.jgr 1>&2
sed 's/^-//' >'diskarray.jgr' <<'End of diskarray.jgr'
-(* This is an example of using convert.awk to convert a jgraph file to
-   an awk script and then use that awk script to plot several instances 
-   of the original jgraph file.  Here, disk.awk is used to plot a disk
-   drive 6 times.
-*)
-
-newgraph
-xaxis size 4 min 0 max 5.4 nodraw
-yaxis size 2 min 0 max 2 nodraw
-
-newcurve marktype box marksize 2 .5 fill 1 pts 2.75 1.5
-
-shell : echo "0 0" | awk -f disk.awk
-shell : echo "1 0" | awk -f disk.awk
-shell : echo "2 0" | awk -f disk.awk
-shell : echo "3 0" | awk -f disk.awk
-shell : echo "4 0" | awk -f disk.awk
-shell : echo "5 0" | awk -f disk.awk
-
-shell : echo "" | \
-        awk ' {for (i = 0; i < 6; i++) { \
-                 printf("newline rarrows pts 2.75 1.25 %d.2 .4\n", i) }} '
-
-newstring hjc vjc fontsize 12 x 2.75 y 1.5 : Controller
-
-title fontsize 16 : Disk Array
End of diskarray.jgr
echo grex.gtj 1>&2
sed 's/^-//' >'grex.gtj' <<'End of grex.gtj'
-lab 0
-marksize .05 .05
-fill 0
-xs 1.25
-ys 1.25
-
-3.4 3
-3.1 2.7
-3.4 2.7
-3.7 2.7
-2.9 2.4
-3.1 2.4
-3.3 2.4
-3.5 2.4
-3.7 2.4
-3.9 2.4
-3 2.1
-3.2 2.1
-3.6 2.1
-3.8 2.1
-
-4.95 3
-4.5 2.7
-4.8 2.7
-5.1 2.7
-5.4 2.7
-4.7 2.4
-4.9 2.4
-5.2 2.4
-5.4 2.4
-5.6 2.4
-4.6 2.1
-4.8 2.1
-5.3 2.1
-5.5 2.1
-
-6.8 3
-6.2 2.7
-6.5 2.7
-6.8 2.7
-7.1 2.7
-7.4 2.7
-6.4 2.4
-6.6 2.4
-7.2 2.4
-7.4 2.4
-7.6 2.4
-7.3 2.1
-7.5 2.1
-
-edges
-
-0 1
-0 2
-0 3
-1 4
-1 5
-1 6
-5 10
-5 11
-3 7
-3 8
-3 9
-8 12
-8 13
-
-14 15
-14 16
-14 17
-14 18
-16 19
-16 20
-19 24
-19 25
-18 21
-18 22
-18 23
-22 26
-22 27
-
-28 29
-28 30
-28 31
-28 32
-28 33
-30 34
-30 35
-33 36
-33 37
-33 38
-37 39
-37 40
-
-raw
-
-yaxis min 2 max 3 size 1.25 nodraw
-
-newstring x 2.9 y 2.3 vjc hjc fontsize 10 : a
-copystring x 3 y 2 : b
-copystring x 3.2 y 2 : c
-copystring x 3.3 y 2.3 : d
-copystring x 3.4 y 2.6 : e
-copystring x 3.5 y 2.3 : f
-copystring x 3.6 y 2 : g
-copystring x 3.8 y 2 : h
-copystring x 3.9 y 2.3 : i
-
-copystring x 4.5 y 2.6 : a
-copystring x 4.6 y 2 : b
-copystring x 4.8 y 2 : c
-copystring x 4.9 y 2.3 : d
-copystring x 5.1 y 2.6 : e
-copystring x 5.2 y 2.3 : f
-copystring x 5.3 y 2 : g
-copystring x 5.5 y 2 : h
-copystring x 5.6 y 2.3 : i
-
-copystring x 6.2 y 2.6 : a
-copystring x 6.4 y 2.3 : b
-copystring x 6.6 y 2.3 : c
-copystring x 6.8 y 2.6 : d
-copystring x 7.1 y 2.6 : e
-copystring x 7.2 y 2.3 : f
-copystring x 7.3 y 2 : g
-copystring x 7.5 y 2 : h
-copystring x 7.6 y 2.3 : i
-
-newline marktype none rarrows asize .1 .05 pts 4 2.55 4.4 2.55
-copycurve pts 5.7 2.55 6.1 2.55
-newstring x 4.2 y 2.65 vjc hjc fontsize 10 : pull
-copystring x 5.9
-
End of grex.gtj
echo grtoj.sh 1>&2
sed 's/^-//' >'grtoj.sh' <<'End of grtoj.sh'
-#!/bin/sh
-
-nawk '
-
-BEGIN {
-	xmarksize = ymarksize = .3
-	marktype = "circle"
-	vfont = "Times-Roman"
-	vfontsize = 8
-	efont = "Times-Roman"
-	efontsize = 8
-	fill = 1.
-	xs = ys = 1.
-	xmin = ymin = 999999.
-	xmax = ymax = -999999.
-	n = 0
-	m = 0
-	mode = 0
-	NOLABEL = "_NOLABEL"
-	pi = 3.141593
-	deg90 = pi / 2.
-	elabdist = .1
-	vlab = elab = 1
-	larrows = rarrows = 0
-}
-
-NF == 0 || substr($1, 1, 1) == "#" { next }
-
-$1 == "xmarksize" { xmarksize = $2 ; next }
-$1 == "ymarksize" { ymarksize = $2 ; next }
-$1 == "marksize" { xmarksize = ymarksize = $2 ; next }
-$1 == "marktype" { marktype = $2 ; next }
-$1 == "vfont" { vfont = $2 ; next }
-$1 == "vfontsize" { vfontsize = $2 ; next }
-$1 == "efont" { efont = $2 ; next }
-$1 == "efontsize" { efontsize = $2 ; next }
-$1 == "font" { vfont = efont = $2 ; next }
-$1 == "fontsize" { vfontsize = efontsize = $2 ; next }
-$1 == "fill" { fill = $2 ; next }
-$1 == "xs" { xs = $2 ; next }
-$1 == "ys" { ys = $2 ; next }
-$1 == "scale" { xs = ys = $2 ; next }
-$1 == "elabdist" { elabdist = $2 ; next }
-$1 == "vlab" { vlab = $2 ; next }
-$1 == "elab" { elab = $2 ; next }
-$1 == "lab" { vlab = elab = $2 ; next }
-$1 == "larrows" { larrows = $2 ; next }
-$1 == "rarrows" { rarrows = $2 ; next }
-$1 == "arrows" { larrows = rarrows = $2 ; next }
-
-$1 == "edges" {
-	mode = 1
-	printf "newgraph\n"
-	printf "xaxis min %f max %f size %f nodraw\n", xmin, xmax, (xmax - xmin) * xs
-	printf "yaxis min %f max %f size %f nodraw\n\n", ymin, ymax, (ymax - ymin) * ys
-	next
-}
-
-$1 == "raw" { mode = 2 ; next }
-
-{
-	if (!mode) {
-		x[n] = $1
-		y[n] = $2
-		vlabel[n] = (NF == 3 ? $3 : n)
-		if (x[n] < xmin) xmin = x[n]
-		else if (x[n] > xmax) xmax = x[n]
-		if (y[n] < ymin) ymin = y[n]
-		else if (y[n] > ymax) ymax = y[n]
-		n++
-	}
-	else if (mode == 1) {
-		src[m] = label_to_node($1)
-		dst[m] = label_to_node($2)
-		elabel[m] = (NF == 3 ? $3 : NOLABEL)
-		m++
-	}
-	else
-		print $0
-}
-
-END {
-	printf "\n"
-	for (i = 0; i < n; i++) {
-		printf "newline marktype %s marksize %f %f fill %f pts %f %f\n", marktype, xmarksize, ymarksize, fill, x[i], y[i]
-		if (vlab)
-			printf "newstring x %f y %f vjc hjc font %s fontsize %d : %s\n", x[i], y[i], vfont, vfontsize, vlabel[i]
-	}
-	printf "\n"
-	for (i = 0; i < m; i++) {
-		printf "newline marktype %s marksize %f %f fill %f pts %f %f %f %f ", marktype, xmarksize, ymarksize, fill, x[src[i]], y[src[i]], x[dst[i]], y[dst[i]]
-		if (larrows) printf "larrows "
-		if (rarrows) printf "rarrows "
-		printf "\n"
-		if (elab && elabel[i] != NOLABEL) {
-			midx = (x[src[i]] + x[dst[i]]) / 2.
-			midy = (y[src[i]] + y[dst[i]]) / 2.
-			ang = atan2(y[dst[i]] - y[src[i]], x[dst[i]] - x[src[i]])
-			nang = ang - deg90
-			px = midx + elabdist * cos(nang)
-			py = midy + elabdist * sin(nang)
-			rot = ang * 180. / pi
-			rot = (rot < 0. ? rot + 360. : rot)
-			rot = (rot >= 90. && rot <= 270. ? rot + 180. : rot);
-			printf "newstring x %f y %f vjc hjc rotate %f font %s fontsize %d : %s\n", px, py, rot, efont, efontsize, elabel[i]
-		}
-	}
-}
-
-function label_to_node(label) {
-	for (i = 0; i < n; i++)
-		if (vlabel[i] == label)
-			return(i)
-	return(-1)
-}
-
-'
End of grtoj.sh
echo makefile 1>&2
sed 's/^-//' >'makefile' <<'End of makefile'
-ALL = 	\
-	seq.jps		\
-	conc.jps	\
-	cow.jps		\
-	cll.jps		\
-	alg.jps		\
-	tree1.jps	\
-	tree2.jps	\
-	wedmap.jps	\
-	diskarray.jps	\
-	mlti.jps	\
-	ckpov.jps	\
-	timeline.jps	\
-	grex.jps
-
-TMPFILES = \
-	regs.awk 	\
-	srm.awk 	\
-	disk.awk
-
-all: $(ALL)
-
-clean:
-	rm -f $(ALL) $(TMPFILES)
-
-
-seq.jps:  regs.awk convert.awk disk.awk
-conc.jps: regs.awk convert.awk disk.awk
-cow.jps:  regs.awk convert.awk disk.awk
-cll.jps:  regs.awk convert.awk disk.awk
-
-alg.jps: convert.awk regs.awk cow.jgr cll.jgr seq.jgr conc.jgr disk.awk
-
-diskarray.jps: disk.awk convert.awk
-
-ckpov.jps: srm.awk disk.awk convert.awk
-
-tree1.jps: tree.awk
-	( echo "4 3" | nawk -f tree.awk ; echo "xaxis size 5.4" ) |\
-		jgraph -P > tree1.jps
-	( echo "5 2" | nawk -f tree.awk ; echo "xaxis size 5" ) |\
-		jgraph -P > tree2.jps
-
-.SUFFIXES: .gtj .jgr .jps .awk
-
-.jgr.jps:
-	jgraph -P < $*.jgr > $*.jps
-
-.jgr.awk:
-	sed 's/\\/\\\\/g' $*.jgr | awk -f convert.awk > $*.awk
-
-.gtj.jps:
-	sh grtoj.sh < $*.gtj | jgraph -P > $*.jps
End of makefile
echo mlti.jgr 1>&2
sed 's/^-//' >'mlti.jgr' <<'End of mlti.jgr'
-(* 
-
-  Jgraph file for the simple multicomputer picture:
-
-  Pc--P1--P2
-
- *)
-
-newgraph
-  xaxis size 1.5 min 0 max 2 nodraw
-  yaxis size 0.4 min 0 max 1 nodraw
-
-(* Draw the lines connecting the processors *)
-
-newcurve
-  marktype none
-  linetype solid
-  pts
-    0 0   1 0   2 0
-
-(* Draw circles for the processors on top of the lines *)
-
-newcurve 
-  marktype circle
-  marksize .3
-  linetype none
-  fill 1
-  pts
-    0 0   1 0   2 0
-
-(* Draw the labels for the processors *)
-
-newstring fontsize 9 x 0   y 0 hjc vjc : Pc
-newstring fontsize 9 x 1   y 0 hjc vjc : P1
-newstring fontsize 9 x 2   y 0 hjc vjc : P2
End of mlti.jgr
echo regs.jgr 1>&2
sed 's/^-//' >'regs.jgr' <<'End of regs.jgr'
-(* Picture of process state: 0 0.0 to 0.3 0.6 *)
-
-newcurve marktype box fill 1 marksize 0.3 0.6 pts 0.15 0.3
-newline pts 0.0 0.15   0.3 0.15
-newline pts 0.0 0.30   0.3 0.30
-newline pts 0.0 0.45   0.3 0.45
-newstring fontsize 7 hjc vjc x 0.15 y 0.075 : PC
-copystring y 0.225 : . . .
-copystring y 0.375 : R1
-copystring y 0.525 : R0
-
End of regs.jgr
echo seq.jgr 1>&2
sed 's/^-//' >'seq.jgr' <<'End of seq.jgr'
-(* This is a picture of the sequential checkpointing algorithm. *)
-   
-newgraph 
-xaxis min 0 max 3 size 2.5 nodraw
-yaxis min 0 max 2.0 size 2 nodraw
-
-
-newstring fontsize 7 hjc vjc x 0.25 y 0.3 : Code
-copystring y 1.3 : Globals,\
-Heap\
-&\
-Stack
-newstring fontsize 9 hjc vjt x 0.25 y -0.07 : Address\
-Space
-
-(* Draw the address space *)
-newcurve fill 1 marktype ellipse marksize 0.2 1.4 pts 0.5 1.3
-newcurve marktype box fill 1 marksize 0.5 2.0 pts 0.25 1
-newline pts 0.0 0.6    0.5 0.6
-
-(* Draw the registers *)
-shell : echo "0.7 0" | awk -f regs.awk
-shell : echo "1.1 0" | awk -f regs.awk
-shell : echo "1.5 0" | awk -f regs.awk
-shell : echo "2.1 0" | awk -f regs.awk
-newstring hjc vjc fontsize 7 x 1.95 y 0.3 : . . .
-newstring fontsize 9 hjc vjt x 1.55 y -0.07 : CPU\
-States
-
-(* Draw the disk *)
-shell : echo "2.1 1.6" | awk -f disk.awk
-
-(* Draw the arrows to the disk *)
-
-newline rarrow asize .07 .04  pts 0.6 1.3   2.0 1.8
-
-newline rarrow asize .07 .04 pts 1.45 0.9   2.15 1.57
-newline pts 1.0 0.6   1.45 0.9
-newline pts 1.4 0.6   1.45 0.9
-newline pts 1.5 0.6   1.45 0.9
-newline pts 2.1 0.6   1.45 0.9
End of seq.jgr
echo srm.jgr 1>&2
sed 's/^-//' >'srm.jgr' <<'End of srm.jgr'
-(* newgraph *)
-(* xaxis min 0 max 2 size 2 nodraw *)
-(* yaxis min 0 max 2.5 size 2.5 nodraw *)
-
-(* This is a picture of the SRM for the hypercube *)
-
-newcurve linetype solid linethickness .7 marktype none
-  pts 0.00 0.95   0.00 0.50   1.75 0.50   1.75 0.95   0.00 0.95
- pts 0.25 1.45   0.40 1.45
-newcurve linetype solid linethickness .7 marktype none
-  pts 1.55 1.45   2.00 1.45   2.00 1.00   1.75 0.50   1.75 0.95
- pts 2.00 1.45
-
-(* Knobs *)
-newcurve marktype circle fill 0 marksize .07 linetype none
-  pts 0.15 0.60   0.25 0.60   0.35 0.60
-
-newcurve marktype box fill 0 marksize .5 .45 pts .80 0.725
-newcurve marktype circle fill 1 marksize .07 linetype none
-  pts 0.95 0.85
-
-newcurve marktype box fill 0 marksize .4 .025 linetype none 
-  pts 1.40 0.80   1.40 0.70
-
-(* Terminal *)
-newcurve marktype box fill 1 marksize 1 1 pts .9 1.6
-newcurve marktype box fill .8 marksize .8 .7 pts .9 1.65
-newline pts 0.60 1.90  1.20 1.90
-newline pts 0.60 1.85  1.00 1.85
-newline pts 0.60 1.80  0.70 1.80
-newline pts 0.60 1.75  1.00 1.75
-newline pts 0.60 1.70  0.80 1.70
-newline pts 0.60 1.65  1.20 1.65
-newline pts 0.60 1.60  0.60 1.60
-newline pts 0.60 1.55  0.80 1.55
-newline pts 0.60 1.50  0.80 1.50
-newline pts 0.60 1.45  1.10 1.45
-newline pts 0.60 1.40  1.10 1.40
-newcurve linetype solid linethickness .7 marktype none
-  pts 0.40 2.10   0.55 2.30   1.55 2.30   1.55 1.30  1.40 1.10 
- pts 1.40 2.10   1.55 2.30
-
-newcurve marktype circle fill 0 marksize .07 linetype none
-  pts 1.00 1.20   1.10 1.20   1.20 1.20
-
-(* Keyboard *)
-      
-newcurve linetype solid linethickness .7 marktype none
-  pts 0.20 0.05   0.20 0.00   1.30 0.00   1.30 0.05   0.20 0.05
- pts 0.35 0.35   1.45 0.35   1.45 0.30   1.30 0.00   1.30 0.05
- pts 1.45 0.35
-
-newcurve linetype solid linethickness .7 marktype none
-  pts 0.30 0.12   0.38 0.28   1.28 0.28   1.20 0.12  0.30 0.12
-newcurve linetype solid linethickness .7 marktype none 
-   pts 0.3267 0.1733   1.2267 0.1733 
-newcurve linetype solid linethickness .7 marktype none 
-   pts 0.3533 0.2267   1.2533 0.2267
-newcurve linetype solid linethickness .7 marktype none 
-   pts 0.40 0.12  0.48 0.28   0.58 0.28   0.50 0.12
- pts 0.60 0.12  0.68 0.28   0.78 0.28   0.70 0.12
- pts 0.80 0.12  0.88 0.28   0.98 0.28   0.90 0.12
- pts 1.00 0.12  1.08 0.28   1.18 0.28   1.10 0.12
-
-newcurve linetype solid linethickness .7 marktype none 
-  pts 0.31 0.27   0.01 0.30   0.00 0.31 -0.10 0.60  0.00 0.90
-
-
End of srm.jgr
echo timeline.jgr 1>&2
sed 's/^-//' >'timeline.jgr' <<'End of timeline.jgr'
-(* This is a jgraph of the sending of messages in a multicomputer over
-   a period of time.  It is a good mixture of picture drawing and graph-
-   drawing:  Note that hash marks and a legend is employed, as is the drawing
-   of multiple arrowed lines, and some text.
- *)
-newgraph
-
-(* Draw the three time lines with hash ticks.  Only draw hash labels on
-   the bottom-most one *)
-
-yaxis size 1.6 min 0 max 2 nodraw
-xaxis size 4.5 min 0.5 max 10.5 nodraw 
-   draw_hash_marks draw_hash_labels draw_axis_label
-   hash 1 mhash 0 shash 0 hash_scale -.4
-   label : Time
-copygraph xaxis draw_at 1 nodraw draw_hash_marks
-copygraph xaxis draw_at 2
-
-(* Reset the axes to draw the picture *)
-
-copygraph
-xaxis size 4.5 min 99.5 max 109.5 nodraw
-
-(* Define the legend entries *)
-
-newline linethickness .5 linetype dashed 
-         rarrows asize 0.19 0.04 label font Times-Italic : mCL Marker
-copycurve linetype dotdash label : mNSmarker
-copycurve linetype dotted label : mS Message
-copycurve linetype solid label : Normal Message
-legend linelength 1
-
-(* Draw each process's time line arrow *)
-
-newline linethickness .5 rarrows 
-  pts 99.5 0 109.5 0
-copycurve pts 99.5 1 109.5 1
-copycurve pts 99.5 2 109.5 2
-
-(* Draw the time line processor labels *)
-
-newstring fontsize 9 hjl vjc x 99 y 2 : Pc
-copystring y 1 : P1
-copystring y 0 : P2
-
-(* Draw the initial broadcast of mcl messages *)
-
-newline linethickness .5 linetype dashed 
-         rarrows asize 0.19 0.04 pts 100 2 102 1
-copycurve pts 100 2 102 0
-
-(* Draw Message from p2 -> p1 *)
-
-copycurve linetype solid pts 101 0 103 1
-
-(* Draw mns messages to p1 *)
-
-copycurve linetype dotdash pts 100 2 104 1
-copycurve pts 102 0 104 1
-
-(* Draw Message from p2 -> pc *)
-
-copycurve linetype dashed pts 105 0 106 2
-copycurve linetype solid pts 105.1 0 106.1 2
-
-(* Draw mns messages from p1 *)
-
-copycurve linetype dotdash pts 104 1 107 0
-copycurve pts 104 1 107 2
-
-(* Draw mc's -> pc *)
-
-copycurve linetype dotted pts 104 1 108 2
-copycurve pts 107 0 108 2
-
-(* Draw mc from pc *)
-
-copycurve pts 108 2 109 1
-copycurve pts 108 2 109 0
-
-(* Draw labels for m and m' *)
-
-newstring fontsize 9 font Times-Italic x 102.05 y .5 hjl vjt : m
-copystring x 105.6 y .75 hjl vjc : m'
-
-copystring x 105.6 y 2.15 hjr vjc : Pc doesn't log m'
-copystring x 103.4 y 1.35 hjl vjb : P1 logs m
-
-copycurve linetype solid pts 105.7 2.15 106.1 2
-copycurve pts 103.38 1.32 103 1
End of timeline.jgr
echo tree.awk 1>&2
sed 's/^-//' >'tree.awk' <<'End of tree.awk'
-# This is an nawk script for plotting m-level n-ary trees in jgraph.
-# For each line of input, it will produce a new jgraph.  The line must
-# contain two numbers: m and n, separated by white-space.
-#
-# Two nice outputs of this are: 
-#
-# ( echo "4 3" | nawk -f tree.awk ; echo "xaxis size 5.4" ) | jgraph -P
-#
-# and
-# ( echo "5 2" | nawk -f tree.awk ; echo "xaxis size 5" ) | jgraph -P
-#
-
-{ m = $1
-  n = $2
-
-  printf("newgraph xaxis nodraw yaxis nodraw\n")
-  k = 0
-  for (j = 0; j < m; j++) {
-
-# Calculate node locations
-
-    if (j == 0) {
-      numleaves = n ^ (m - 1)
-      for (i = 0; i < numleaves; i++) newleafloc[i] = i
-    } else {
-      numleaves = numleaves / n
-      for (i = 0; i < numleaves; i++) {
-        newleafloc[i] =  (oldleafloc[i*n] + oldleafloc[i*n+n-1]) / 2.0
-      }
-    }
-
-# Print the nodes and labels 
-
-    for (i = 0; i < numleaves; i++) {
-      printf("newcurve marktype box marksize 0.6 0.4 fill 1 pts %f %f\n",
-              newleafloc[i], j)
-      printf("newstring x %f y %f hjc vjc fontsize 6 : %d\n",
-              newleafloc[i], j, ++k)
-
-# Print the arcs to children nodes
-
-      if (j > 0) {
-        for (l = 0; l < n; l++) {
-          printf("newcurve marktype none linetype solid pts %f %f  %f %f\n",
-              newleafloc[i], j-.2, oldleafloc[i*n+l], j-.8)
-        }
-      }
-    }
-    for (i = 0; i < numleaves; i++) {
-      oldleafloc[i] = newleafloc[i]
-    }
-  }
-}
End of tree.awk
echo wedmap.jgr 1>&2
sed 's/^-//' >'wedmap.jgr' <<'End of wedmap.jgr'
-(* This is a jgraph file which draws a map to some major places in New
-   Jersey (the Princeton Quaker Meeting House and the Griggstown Fire House).
-   I can't say that this would have been harder to draw with a WYSIWYG 
-   editor, but the result is very nice.   I drew this by plotting it first
-   on graph paper, and then transferring it to jgraph.  The whole process
-   took a bit more than an hour.
-*)
-
-newgraph
-
-xaxis size 7 min 0 max 7 hash .5 mhash 4 nodraw
-yaxis size 9 min 0 max 9 hash .5 mhash 4 nodraw
-
-(* 
-(*  If this portion is uncommented,  it will print a grid, to help lay
-    out points *)
-
-newgraph inherit_axes
-xaxis hash .5 mhash 4 draw 
-  grid_lines grid_gray .5 mgrid_lines mgrid_gray .8
-yaxis hash .5 mhash 4 draw 
-  grid_lines grid_gray .5 mgrid_lines mgrid_gray .8
-
-copygraph 
-xaxis hash_scale 1 no_grid_lines no_mgrid_lines
-yaxis hash_scale 1 no_grid_lines no_mgrid_lines
-*)
-
-(* I-95 *)
-newcurve marktype none linetype solid larrows linethickness 2.2
-  pts 1.72 1.00   1.86 1.30
-newcurve marktype none linetype solid linethickness 2.2
-  pts 1.86 1.30   2.05 1.50   2.25 1.65 
-      2.67 1.74   3.10 1.70   3.50 1.55
-      3.75 1.25   3.90 1.00
-newcurve marktype none linetype solid rarrows linethickness 2.2
-  pts 3.90 1.00   3.95 0.75
-
-(* Route 206 *)
-newcurve marktype none linetype solid
-  pts 2.67 1.74   2.82 2.70
-newcurve marktype none linetype dotted
-  pts 2.82 2.70   3.20 3.50
-newcurve marktype none linetype solid
-  pts 3.20 3.50   3.40 3.80   3.72 4.22
-      4.18 4.65   4.00 4.92
-newcurve marktype none linetype dotted
-  pts 4.00 4.92   3.77 5.30
-newcurve marktype none linetype solid
-  pts 3.77 5.30   3.45 5.80   3.08 6.35
-
-(* Route 27 *)
-newcurve marktype none linetype solid
-  pts 4.18 4.65   4.24 4.70   5.30 5.69
-
-(* Route 1 *)
-newcurve marktype none linetype solid linethickness 1.5
-  pts 3.50 1.55   3.77 1.90
-newcurve marktype none linetype dotted linethickness 1.5
-  pts 3.77 1.90   4.05 2.30
-newcurve marktype none linetype solid linethickness 1.5
-  pts 4.05 2.30   4.47 2.87   4.70 3.15   5.25 3.90
-newcurve rarrows marktype none linetype solid linethickness 1.5
-  pts 5.25 3.90   5.48 4.20
-
-(* Mercer Road/Princeton Pike *)
-newcurve marktype none linetype solid
-  pts 3.10 1.70   3.20 2.08
-newcurve marktype none linetype dotted
-  pts 3.20 2.08   3.33 2.60
-newcurve marktype none linetype solid
-  pts 3.33 2.60   3.55 3.45   3.65 3.55   3.78 3.55   3.85 3.60
-      3.87 3.67   4.00 4.08   4.22 4.60   4.24 4.70
-
-(* Lover's Lane *)
-newcurve marktype none linetype solid
-  pts 3.72 4.22   4.00 4.08
-
-(* Quakerbridge Road, etc *)
-newcurve marktype none linetype solid linethickness 0.6
-  pts 3.85 3.60   3.92 3.60   3.90 3.65   3.87 3.68
-newcurve marktype none linetype solid
-  pts 3.92 3.60   4.00 3.60   4.40 3.32   4.47 3.17   
-      4.30 2.95   4.10 2.70
-newcurve marktype none linetype solid
-  pts 4.30 2.95   4.47 2.87   4.90 2.70
-
-(* The Bridge *)
-newcurve marktype none linetype solid linethickness 0.4
-  pts 3.65 3.59   3.66 3.57   3.77 3.57 3.78 3.59
-newcurve marktype none linetype solid linethickness 0.4
-  pts 3.65 3.51   3.66 3.53   3.77 3.53 3.78 3.51
-
-(* The Meeting House *)
-newcurve marktype none linetype solid linethickness 0.6
-  pts 3.90 3.65   4.0 3.72
-newcurve marktype box fill 1 linetype none marksize .1 .1
-  pts 4.05 3.78
-
-(* D&R Canal, minus Lake Carnegie *)
-newcurve marktype none linetype dotted linethickness 0.6
-  pts 4.60 7.82   4.90 6.40   4.90 6.28
-newcurve marktype none linetype dotted linethickness 0.6
-  pts 4.90 6.22   4.90 6.10   4.93 5.95
-
-(* D&R Bridge *)
-newcurve marktype none linetype solid linethickness 0.5
-  pts 4.75 6.19   4.77 6.22   5.03 6.22   5.05 6.19
-newcurve marktype none linetype solid linethickness 0.5
-  pts 4.75 6.31   4.77 6.28   5.03 6.28   5.05 6.31
-
-(* Route 518 *)
-newcurve marktype none linetype solid
-  pts 2.95 5.68   3.45 5.80   4.00 6.00
-newcurve marktype none linetype dotted
-  pts 4.00 6.00   4.50 6.20
-newcurve marktype none linetype solid
-  pts 4.50 6.20   4.70 6.25   5.10 6.25   5.20 6.27
-      5.50 6.40
-
-(* Canal Road *)
-newcurve marktype none linetype solid
-  pts 5.20 6.27   5.00 7.50   4.95 7.80
-newcurve marktype none linetype solid
-  pts 4.85 7.50   5.00 7.50
-
-(* Fire House *)
-newcurve marktype box fill 1 linetype none marksize .15 .1
-  pts 5.12 7.70
-
-(* Alexander Road *)
-newcurve marktype none linetype solid
-  pts 4.22 4.60   5.25 3.90
-
-(* Exits *)
-
-newcurve marktype box linetype none fill 1 
-  pts 5.25 3.90 (* Alexander Road / Rt 1 *)
-      4.47 2.87 (* Quakerbridge / Rt 1 *)
-      2.67 1.74 (* 206 / I95 *)
-      3.10 1.70 (* Princeton Pike / I95 *)
-      3.50 1.55 (* Rt 1 / I95 *)
-
-(* Traffic Lights *)
-newcurve marktype box linetype none fill 1 marksize .1 .2
-  pts 3.10 6.00   3.80 4.60
-newcurve marktype circle linetype none fill 0 marksize .03
-  pts 3.10 6.00   3.80 4.60
-      3.10 6.06   3.80 4.66
-      3.10 5.94   3.80 4.54
-newcurve marktype none linetype solid rarrows linethickness .04
-  pts 3.17 5.97   3.40 5.83
-newcurve marktype none linetype solid rarrows linethickness .04
-  pts 3.87 4.60   4.14 4.65
-
-(* Labels *)
-
-newstring hjc vjb fontsize 9 rotate 64 x 2.97 y 3.1 : US Rt. 206
-copystring rotate -57 x 3.82 y 5.3 : US Rt. 206
-copystring font Times-Italic rotate -57 vjt x 3.75 y 5.27 : 3-4 miles
-copystring font Times-Bold fontsize 10 vjb rotate  37 x 2.02 y 1.52 : I-95
-copystring rotate -52 x 3.70 y 1.39 : I-295
-copystring rotate  55 x 3.88 y 2.13 : US Rt. 1
-copystring font Times-Roman fontsize 9 rotate  76 x 3.31 y 2.68 
-  : Princeton Pike / Mercer Rd.
-copystring font Times-Italic vjt rotate  76 x 3.38 y 2.63 : 3-4 miles
-copystring font Times-Roman vjb rotate  21 x 4.10 y 6.07 : Rt. 518
-copystring font Times-Italic vjt x 4.12 y 6.0 : 2-4 miles
-copystring font Times-Roman vjb rotate -34 x 4.7 y 4.31 : Alexander Rd.
-copystring hjl rotate 43 x 4.22 y 4.72 : Rt. 27 / Nassau Street
-copystring font Times-Italic hjc vjt rotate  -78 x 4.71 y 7.0
-  : D & R Canal
-copystring font Times-Roman vjb rotate  -80 x 5.13 y 7.0 : Canal Rd.
-copystring font Times-Italic vjt rotate  -80 x 5.04 y 7.0 : 3.5 miles
-copystring font Times-Roman rotate 0 fontsize 12 
-           linesep 7 x 4.17 y 3.80 hjl vjc : Meeting\
-House
-copystring x 5.25 y 7.70 : Griggstown\
-Fire\
-House
-
-copystring fontsize 9 x 4.90 y 3.00 hjl vjc : Quakerbridge Rd.
-newcurve marktype none linetype solid rarrows linethickness .04
-  pts 4.86 3.00   4.50 3.18
-newcurve marktype none linetype solid rarrows linethickness .04
-  pts 4.86 3.00   4.70 2.80
-copystring x 3.40 y 4.10 hjr : Lovers Lane
-newcurve marktype none linetype solid rarrows linethickness .04
-  pts 3.44 4.10   3.82 4.15
-
-copystring font Times-Italic x 3.45 y 6.2 hjc vjb : Wawa
-newcurve marktype none linetype solid rarrows linethickness .04
-  pts 3.45 6.16   3.43 5.85
-
-newstring fontsize 9 x 1.70 y 0.84 hjc vjc linesep 5 : Philadelphia\
-~30 miles
-
-copystring x 3.95 y 0.58 : Trenton\
-~5 miles
-
-copystring hjl vjc x 5.60 y 4.37 linesep : NJ Turnpike\
-Exit 9\
-~20 miles
-
-newstring font Times-Italic fontsize 10 x 4.45 y 4.75 hjl vjc : PRINCETON
-
-newstring font Times-Italic fontsize 10 x 5.50 y 1.80 hjc vjb : N
-newcurve marktype none linetype solid rarrows linethickness .04
-  pts 5.50 1.14   5.50 1.76
-
End of wedmap.jgr
