diff -Nrp -U 7 --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' '--exclude=objtool' '--exclude=cpupower' a/fs/cifs/cifs_ioctl.h b/fs/cifs/cifs_ioctl.h
--- a/fs/cifs/cifs_ioctl.h	2019-09-15 16:19:32.000000000 -0500
+++ b/fs/cifs/cifs_ioctl.h	2020-05-11 17:26:41.543179243 -0500
@@ -53,28 +53,38 @@ struct smb_query_info {
 	__u32   additional_information;
 	__u32   flags;
 	__u32	input_buffer_length;
 	__u32	output_buffer_length;
 	/* char buffer[]; */
 } __packed;
 
+
+struct ioctl_smb_query_attrs {
+	__u32 out_attrs;
+	__u32 out_didset;
+	char in_filename[1024];
+} __packed;
+
+
 struct smb3_key_debug_info {
 	__u64	Suid;
 	__u16	cipher_type;
 	__u8	auth_key[16]; /* SMB2_NTLMV2_SESSKEY_SIZE */
 	__u8	smb3encryptionkey[SMB3_SIGN_KEY_SIZE];
 	__u8	smb3decryptionkey[SMB3_SIGN_KEY_SIZE];
 } __packed;
 
 struct smb3_notify {
 	__u32	completion_filter;
 	bool	watch_tree;
 } __packed;
 
 #define CIFS_IOCTL_MAGIC	0xCF
 #define CIFS_IOC_COPYCHUNK_FILE	_IOW(CIFS_IOCTL_MAGIC, 3, int)
 #define CIFS_IOC_SET_INTEGRITY  _IO(CIFS_IOCTL_MAGIC, 4)
 #define CIFS_IOC_GET_MNT_INFO _IOR(CIFS_IOCTL_MAGIC, 5, struct smb_mnt_fs_info)
 #define CIFS_ENUMERATE_SNAPSHOTS _IOR(CIFS_IOCTL_MAGIC, 6, struct smb_snapshot_array)
 #define CIFS_QUERY_INFO _IOWR(CIFS_IOCTL_MAGIC, 7, struct smb_query_info)
 #define CIFS_DUMP_KEY _IOWR(CIFS_IOCTL_MAGIC, 8, struct smb3_key_debug_info)
 #define CIFS_IOC_NOTIFY _IOW(CIFS_IOCTL_MAGIC, 9, struct smb3_notify)
+#define CIFS_GET_ATTRS _IOWR(CIFS_IOCTL_MAGIC, 8, struct ioctl_smb_query_attrs)
+
diff -Nrp -U 7 --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' '--exclude=objtool' '--exclude=cpupower' a/fs/cifs/cifsglob.h b/fs/cifs/cifsglob.h
--- a/fs/cifs/cifsglob.h	2020-05-12 10:34:40.068363462 -0500
+++ b/fs/cifs/cifsglob.h	2020-05-12 10:19:17.868297217 -0500
@@ -498,18 +498,21 @@ struct smb_version_operations {
 			 umode_t mode,
 			 dev_t device_number);
 	/* version specific fiemap implementation */
 	int (*fiemap)(struct cifs_tcon *tcon, struct cifsFileInfo *,
 		      struct fiemap_extent_info *, u64, u64);
 	/* version specific llseek implementation */
 	loff_t (*llseek)(struct file *, struct cifs_tcon *, loff_t, int);
+
+        int (*get_reparse_attrs)(unsigned xid, struct cifs_tcon *tcon, struct cifs_sb_info *cifs_sb, const char *full_path, __u32 *out_attrs);
 	/* Check for STATUS_IO_TIMEOUT */
 	bool (*is_status_io_timeout)(char *buf);
 };
 
+
 struct smb_version_values {
 	char		*version_string;
 	__u16		protocol_id;
 	__u32		req_capabilities;
 	__u32		large_lock_type;
 	__u32		exclusive_lock_type;
 	__u32		shared_lock_type;
diff -Nrp -U 7 --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' '--exclude=objtool' '--exclude=cpupower' a/fs/cifs/ioctl.c b/fs/cifs/ioctl.c
--- a/fs/cifs/ioctl.c	2019-09-15 16:19:32.000000000 -0500
+++ b/fs/cifs/ioctl.c	2020-05-12 10:23:16.516876150 -0500
@@ -73,14 +73,90 @@ static long cifs_ioctl_query_info(unsign
  ici_exit:
 	if (utf16_path != &root_path)
 		kfree(utf16_path);
 	kfree(path);
 	return rc;
 }
 
+
+static long cifs_ioctl_query_reparse_attrs(unsigned int xid, struct file *filep, void __user *arg)
+{
+	struct inode *inode = file_inode(filep);
+	struct cifs_sb_info *cifs_sb = CIFS_SB(inode->i_sb);
+	struct cifs_tcon *tcon = cifs_sb_master_tcon(cifs_sb);
+	struct dentry *dentry = filep->f_path.dentry;
+
+	unsigned char *dirpath = NULL;
+	unsigned char *targetpath = NULL;
+	struct ioctl_smb_query_attrs *qap = NULL;
+
+	int rc = 0;
+	int dirlen, inlen, tlen;
+
+	qap = kzalloc(sizeof(struct ioctl_smb_query_attrs), GFP_KERNEL);
+	if (qap == NULL) {
+		rc = -ENOMEM;
+		goto done;
+	}
+        if (copy_from_user(qap, arg, sizeof(*qap))) {
+                rc = -EFAULT;
+                goto done;
+        }
+	dirpath = build_path_from_dentry(dentry);
+	if (dirpath == NULL) {
+		rc = -ENOMEM;
+		goto done;
+	}
+	dirlen = strlen(dirpath);
+
+	if (!*qap->in_filename) {
+		rc = -EINVAL;
+		goto done;
+	}
+	qap->in_filename[sizeof(qap->in_filename)-1] = 0;
+	inlen = strlen(qap->in_filename);
+
+	tlen = dirlen + inlen;
+	targetpath = kzalloc(tlen+2, GFP_KERNEL);	// room for 0 byte + possible backslash
+	if (targetpath == NULL) {
+		rc = -ENOMEM;
+		goto done;
+	}
+
+	if (dirlen) {
+		strcpy(targetpath, dirpath);
+		*(targetpath+dirlen) = '\\';
+		dirlen++;
+	}
+	strcpy(targetpath+dirlen, qap->in_filename);
+
+	/*pr_info("GETATTRS PATH %s", targetpath);*/
+
+	if (tcon->ses->server->ops->get_reparse_attrs)
+		rc = tcon->ses->server->ops->get_reparse_attrs(xid, tcon, cifs_sb, targetpath, &qap->out_attrs);
+	else
+		rc = -EOPNOTSUPP;
+	if (rc)
+		goto done;
+
+	qap->out_didset= 1;
+
+	if (copy_to_user(arg, qap, sizeof(*qap))) {
+		rc = -EFAULT;
+		goto done;
+	}
+
+done:
+	if (qap)	kfree(qap);
+	if (dirpath)	kfree(dirpath);
+	if (targetpath) kfree(targetpath);
+	return rc;
+}
+
+
 static long cifs_ioctl_copychunk(unsigned int xid, struct file *dst_file,
 			unsigned long srcfd)
 {
 	int rc;
 	struct fd src_file;
 	struct inode *src_inode;
 
@@ -174,14 +250,20 @@ long cifs_ioctl(struct file *filep, unsi
 	__u64	ExtAttrBits = 0;
 	__u64   caps;
 
 	xid = get_xid();
 
 	cifs_dbg(FYI, "cifs ioctl 0x%x\n", command);
 	switch (command) {
+
+		case CIFS_GET_ATTRS:
+			rc = cifs_ioctl_query_reparse_attrs(xid, filep, (void __user *)arg);
+			/*pr_info("GETATTRS, %d", rc);*/
+			break;
+
 		case FS_IOC_GETFLAGS:
 			if (pSMBFile == NULL)
 				break;
 			tcon = tlink_tcon(pSMBFile->tlink);
 			caps = le64_to_cpu(tcon->fsUnixInfo.Capability);
 #ifdef CONFIG_CIFS_POSIX
 			if (CIFS_UNIX_EXTATTR_CAP & caps) {
@@ -255,14 +337,15 @@ long cifs_ioctl(struct file *filep, unsi
 			break;
 		case CIFS_IOC_GET_MNT_INFO:
 			if (pSMBFile == NULL)
 				break;
 			tcon = tlink_tcon(pSMBFile->tlink);
 			rc = smb_mnt_get_fsinfo(xid, tcon, (void __user *)arg);
 			break;
+
 		case CIFS_ENUMERATE_SNAPSHOTS:
 			if (pSMBFile == NULL)
 				break;
 			if (arg == 0) {
 				rc = -EINVAL;
 				goto cifs_ioc_exit;
 			}
diff -Nrp -U 7 --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' '--exclude=objtool' '--exclude=cpupower' a/fs/cifs/smb1ops.c b/fs/cifs/smb1ops.c
--- a/fs/cifs/smb1ops.c	2019-09-15 16:19:32.000000000 -0500
+++ b/fs/cifs/smb1ops.c	2020-05-12 10:19:17.948297076 -0500
@@ -579,14 +579,33 @@ cifs_query_path_info(const unsigned int
 		else if (tmprc == 0)
 			CIFSSMBClose(xid, tcon, fid.netfid);
 	}
 
 	return rc;
 }
 
+
+static int
+cifs_get_reparse_attrs(unsigned xid, struct cifs_tcon *tcon, struct cifs_sb_info *cifs_sb, const char *full_path, __u32 *out_attrs)
+{
+	int rc;
+
+	FILE_ALL_INFO *data = kmalloc(sizeof(FILE_ALL_INFO), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	rc = CIFSSMBQPathInfo(xid, tcon, full_path, data, 0 /* not legacy */, cifs_sb->local_nls, cifs_remap(cifs_sb));
+
+	*out_attrs = le32_to_cpu(data->Attributes);
+
+	kfree(data);
+	return rc;
+}
+
+
 static int
 cifs_get_srv_inum(const unsigned int xid, struct cifs_tcon *tcon,
 		  struct cifs_sb_info *cifs_sb, const char *full_path,
 		  u64 *uniqueid, FILE_ALL_INFO *data)
 {
 	/*
 	 * We can not use the IndexNumber field by default from Windows or
@@ -1223,14 +1242,15 @@ struct smb_version_operations smb1_opera
 	.query_all_EAs = CIFSSMBQAllEAs,
 	.set_EA = CIFSSMBSetEA,
 #endif /* CIFS_XATTR */
 	.get_acl = get_cifs_acl,
 	.get_acl_by_fid = get_cifs_acl_by_fid,
 	.set_acl = set_cifs_acl,
 	.make_node = cifs_make_node,
+	.get_reparse_attrs = cifs_get_reparse_attrs,
 };
 
 struct smb_version_values smb1_values = {
 	.version_string = SMB1_VERSION_STRING,
 	.protocol_id = SMB10_PROT_ID,
 	.large_lock_type = LOCKING_ANDX_LARGE_FILES,
 	.exclusive_lock_type = 0,
diff -Nrp -U 7 --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' '--exclude=objtool' '--exclude=cpupower' a/fs/cifs/smb2inode.c b/fs/cifs/smb2inode.c
--- a/fs/cifs/smb2inode.c	2020-05-12 10:34:40.068363462 -0500
+++ b/fs/cifs/smb2inode.c	2020-05-12 10:19:17.948297076 -0500
@@ -1081,22 +1081,64 @@ smb202_query_path_info(const unsigned in
 		goto out;

 	move_smb2_info_to_cifs(data, smb2_data);
 out:
 	kfree(smb2_data);
 	return rc;
 }
+ 
+
+static int
+common_smb_get_reparse_attrs(bool do202, unsigned xid, struct cifs_tcon *tcon, struct cifs_sb_info *cifs_sb, const char *full_path, __u32 *out_attrs)
+{
+	int rc;
+	struct smb2_file_all_info *smb2_data;
+	__u32 create_options = 0;
+
+	smb2_data = kzalloc(sizeof(struct smb2_file_all_info) + PATH_MAX * 2, GFP_KERNEL);
+	if (smb2_data == NULL)
+		return -ENOMEM;
+
+	if (backup_cred(cifs_sb))
+		create_options |= CREATE_OPEN_BACKUP_INTENT;
+	create_options |= OPEN_REPARSE_POINT;
+
+	if (do202)
+		rc = smb202_compound_op(xid, tcon, cifs_sb, full_path, FILE_READ_ATTRIBUTES, FILE_OPEN, create_options, smb2_data, SMB2_OP_QUERY_INFO);
+	else
+		rc =   smb2_compound_op(xid, tcon, cifs_sb, full_path, FILE_READ_ATTRIBUTES, FILE_OPEN, create_options, ACL_NO_MODE, smb2_data, SMB2_OP_QUERY_INFO, NULL);
+
+	if (rc)
+		goto out;
+
+	*out_attrs = smb2_data->Attributes;
+
+out:
+	kfree(smb2_data);
+	return rc;
+}
+
+int
+smb202_get_reparse_attrs(unsigned xid, struct cifs_tcon *tcon, struct cifs_sb_info *cifs_sb, const char *full_path, __u32 *out_attrs)
+{
+	return common_smb_get_reparse_attrs(1, xid, tcon, cifs_sb, full_path, out_attrs);
+}
+
+int
+smb2_get_reparse_attrs(unsigned xid, struct cifs_tcon *tcon, struct cifs_sb_info *cifs_sb, const char *full_path, __u32 *out_attrs)
+{
+	return common_smb_get_reparse_attrs(0, xid, tcon, cifs_sb, full_path, out_attrs);
+}
 
 
 /* ****************************** */
 /* ****************************** */
 
 
-
 int
 smb2_mkdir(const unsigned int xid, struct inode *parent_inode, umode_t mode,
 	   struct cifs_tcon *tcon, const char *name,
 	   struct cifs_sb_info *cifs_sb)
 {
 	return smb2_compound_op(xid, tcon, cifs_sb, name,
 				FILE_WRITE_ATTRIBUTES, FILE_CREATE,
 				CREATE_NOT_FILE, mode, NULL, SMB2_OP_MKDIR,
diff -Nrp -U 7 --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' '--exclude=objtool' '--exclude=cpupower' a/fs/cifs/smb2ops.c b/fs/cifs/smb2ops.c
--- a/fs/cifs/smb2ops.c	2020-05-12 10:34:40.069363459 -0500
+++ b/fs/cifs/smb2ops.c	2020-05-12 10:19:17.869297216 -0500
@@ -5153,14 +5153,17 @@ struct smb_version_operations smb20_oper
 	.tree_connect = SMB2_tcon,
 	.tree_disconnect = SMB2_tdis,
 	.qfs_tcon = smb2_qfs_tcon,
 	.is_path_accessible = smb2_is_path_accessible,
 	.can_echo = smb2_can_echo,
 	.echo = SMB2_echo,
 	.query_path_info = smb202_query_path_info,
+
+	.get_reparse_attrs = smb202_get_reparse_attrs,
+
 	.get_srv_inum = smb2_get_srv_inum,
 	.query_file_info = smb2_query_file_info,
 	.set_path_size = smb2_set_path_size,
 	.set_file_size = smb2_set_file_size,
 	.set_file_info = smb2_set_file_info,
 	.set_compression = smb2_set_compression,
 	.mkdir = smb2_mkdir,
@@ -5252,14 +5255,17 @@ struct smb_version_operations smb21_oper
 	.tree_connect = SMB2_tcon,
 	.tree_disconnect = SMB2_tdis,
 	.qfs_tcon = smb2_qfs_tcon,
 	.is_path_accessible = smb2_is_path_accessible,
 	.can_echo = smb2_can_echo,
 	.echo = SMB2_echo,
 	.query_path_info = smb2_query_path_info,
+
+	.get_reparse_attrs = smb2_get_reparse_attrs,
+
 	.get_srv_inum = smb2_get_srv_inum,
 	.query_file_info = smb2_query_file_info,
 	.set_path_size = smb2_set_path_size,
 	.set_file_size = smb2_set_file_size,
 	.set_file_info = smb2_set_file_info,
 	.set_compression = smb2_set_compression,
 	.mkdir = smb2_mkdir,
@@ -5354,14 +5360,17 @@ struct smb_version_operations smb30_oper
 	.tree_connect = SMB2_tcon,
 	.tree_disconnect = SMB2_tdis,
 	.qfs_tcon = smb3_qfs_tcon,
 	.is_path_accessible = smb2_is_path_accessible,
 	.can_echo = smb2_can_echo,
 	.echo = SMB2_echo,
 	.query_path_info = smb2_query_path_info,
+
+	.get_reparse_attrs = smb2_get_reparse_attrs,
+
 	/* WSL tags introduced long after smb2.1, enable for SMB3, 3.11 only */
 	.query_reparse_tag = smb2_query_reparse_tag,
 	.get_srv_inum = smb2_get_srv_inum,
 	.query_file_info = smb2_query_file_info,
 	.set_path_size = smb2_set_path_size,
 	.set_file_size = smb2_set_file_size,
 	.set_file_info = smb2_set_file_info,
@@ -5467,14 +5476,17 @@ struct smb_version_operations smb311_ope
 	.tree_connect = SMB2_tcon,
 	.tree_disconnect = SMB2_tdis,
 	.qfs_tcon = smb3_qfs_tcon,
 	.is_path_accessible = smb2_is_path_accessible,
 	.can_echo = smb2_can_echo,
 	.echo = SMB2_echo,
 	.query_path_info = smb2_query_path_info,
+
+	.get_reparse_attrs = smb2_get_reparse_attrs,
+
 	.query_reparse_tag = smb2_query_reparse_tag,
 	.get_srv_inum = smb2_get_srv_inum,
 	.query_file_info = smb2_query_file_info,
 	.set_path_size = smb2_set_path_size,
 	.set_file_size = smb2_set_file_size,
 	.set_file_info = smb2_set_file_info,
 	.set_compression = smb2_set_compression,
diff -Nrp -U 7 --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' '--exclude=objtool' '--exclude=cpupower' a/fs/cifs/smb2proto.h b/fs/cifs/smb2proto.h
--- a/fs/cifs/smb2proto.h	2020-05-12 10:34:40.070363457 -0500
+++ b/fs/cifs/smb2proto.h	2020-05-12 10:19:17.869297216 -0500
@@ -90,14 +90,17 @@ extern int open_shroot(unsigned int xid,
 				bool *adjust_tz, bool *symlink);
 
 extern int smb202_query_path_info(const unsigned int xid, struct cifs_tcon *tcon,
 				struct cifs_sb_info *cifs_sb,
 				const char *full_path, FILE_ALL_INFO *data,
 				bool *adjust_tz, bool *symlink);
 
+extern int smb2_get_reparse_attrs  (unsigned xid, struct cifs_tcon *tcon, struct cifs_sb_info *cifs_sb, const char *full_path, __u32 *out_attrs);
+extern int smb202_get_reparse_attrs(unsigned xid, struct cifs_tcon *tcon, struct cifs_sb_info *cifs_sb, const char *full_path, __u32 *out_attrs);
+
 extern int smb2_set_path_size(const unsigned int xid, struct cifs_tcon *tcon,
 			      const char *full_path, __u64 size,
 			      struct cifs_sb_info *cifs_sb, bool set_alloc);
 extern int smb2_set_file_info(struct inode *inode, const char *full_path,
 			      FILE_BASIC_INFO *buf, const unsigned int xid);
 extern int smb311_posix_mkdir(const unsigned int xid, struct inode *inode,
 			       umode_t mode, struct cifs_tcon *tcon,
