diff --git a/drivers/scsi/qla2xxx/qla_isr.c b/drivers/scsi/qla2xxx/qla_isr.c
--- a/drivers/scsi/qla2xxx/qla_isr.c	2019-04-26 14:22:51.943528282 -0500
+++ b/drivers/scsi/qla2xxx/qla_isr.c	2019-04-26 09:46:42.286791930 -0500
@@ -13,14 +13,17 @@
 #include <linux/t10-pi.h>
 #include <scsi/scsi_tcq.h>
 #include <scsi/scsi_bsg_fc.h>
 #include <scsi/scsi_eh.h>
 #include <scsi/fc/fc_fs.h>
 #include <linux/nvme-fc-driver.h>
 
+extern int find_slot_wwpn(struct scsi_qla_host *, u64, int, const char *);
+extern u64 get_port_name_from_nv(scsi_qla_host_t *, const char *);
+
 static void qla2x00_mbx_completion(scsi_qla_host_t *, uint16_t);
 static void qla2x00_status_entry(scsi_qla_host_t *, struct rsp_que *, void *);
 static void qla2x00_status_cont_entry(struct rsp_que *, sts_cont_entry_t *);
 static int qla2x00_error_entry(scsi_qla_host_t *, struct rsp_que *,
 	sts_entry_t *);
 
 extern char *qlini_targets;
@@ -3452,16 +3455,18 @@ qla24xx_enable_msix(struct qla_hw_data *
 	struct qla_msix_entry *qentry;
 	scsi_qla_host_t *vha = pci_get_drvdata(ha->pdev);
 	int min_vecs = QLA_BASE_VECTORS;
 	struct irq_affinity desc = {
 		.pre_vectors = QLA_BASE_VECTORS,
 	};
 
-	if (QLA_TGT_MODE_ENABLED() && (ql2xenablemsix != 0) &&
-	    IS_ATIO_MSIX_CAPABLE(ha)) {
+	if ((QLA_TGT_MODE_ENABLED() && 			// Must check if in target list.
+	    (*qlini_targets &&
+	     find_slot_wwpn(vha, swab64(get_port_name_from_nv(vha,__func__)),-1,__func__))) &&
+	    (ql2xenablemsix != 0) && IS_ATIO_MSIX_CAPABLE(ha)) {
 		desc.pre_vectors++;
 		min_vecs++;
 	}
 
 	if (USER_CTRL_IRQ(ha) || !ha->mqiobase) {
 		/* user wants to control IRQ setting for target mode */
 		ret = pci_alloc_irq_vectors(ha->pdev, min_vecs,
@@ -3482,15 +3487,17 @@ qla24xx_enable_msix(struct qla_hw_data *
 		    ha->msix_count, ret);
 		ha->msix_count = ret;
 		/* Recalculate queue values */
 		if (ha->mqiobase && (ql2xmqsupport || ql2xnvmeenable)) {
 			ha->max_req_queues = ha->msix_count - 1;
 
 			/* ATIOQ needs 1 vector. That's 1 less QPair */
-			if (QLA_TGT_MODE_ENABLED())
+			if (QLA_TGT_MODE_ENABLED() ||	// Must check if in target list.
+			    (*qlini_targets && find_slot_wwpn(vha,
+				  swab64(get_port_name_from_nv(vha,__func__)),-1,__func__)))
 				ha->max_req_queues--;
 
 			ha->max_rsp_queues = ha->max_req_queues;
 
 			ha->max_qpairs = ha->max_req_queues - 1;
 			ql_dbg_pci(ql_dbg_init, ha->pdev, 0x0190,
 			    "Adjusted Max no of queues pairs: %d.\n", ha->max_qpairs);
diff --git a/drivers/scsi/qla2xxx/qla_os.c b/drivers/scsi/qla2xxx/qla_os.c
--- a/drivers/scsi/qla2xxx/qla_os.c	2019-04-26 14:22:51.944528282 -0500
+++ b/drivers/scsi/qla2xxx/qla_os.c	2019-04-26 09:47:10.401794114 -0500
@@ -2148,15 +2148,19 @@ qla83xx_iospace_config(struct qla_hw_dat
 		 * (default & rspq)
 		 */
 		if (ql2xmqsupport || ql2xnvmeenable) {
 			/* MB interrupt uses 1 vector */
 			ha->max_req_queues = ha->msix_count - 1;
 
 			/* ATIOQ needs 1 vector. That's 1 less QPair */
+#ifndef NEW_MATCH_WWPN
 			if (QLA_TGT_MODE_ENABLED())
+#else  // NEW_MATCH_WWPN
+			if (*qlini_targets != '\0' || QLA_TGT_MODE_ENABLED())
+#endif // NEW_MATCH_WWPN
 				ha->max_req_queues--;
 
 			ha->max_rsp_queues = ha->max_req_queues;
 
 			/* Queue pairs is the max value minus
 			 * the base queue pair */
 			ha->max_qpairs = ha->max_req_queues - 1;
@@ -3389,15 +3393,21 @@ qla2x00_probe_one(struct pci_dev *pdev,
 	if (ha->mqenable) {
 		bool startit = false;
 
 		if (QLA_TGT_MODE_ENABLED())
 			startit = false;
 
 		if (ql2x_ini_mode == QLA2XXX_INI_MODE_ENABLED)
-			startit = true;
+		{
+		    if (*qlini_targets &&
+		        find_slot_wwpn(base_vha, swab64(get_port_name_from_nv(base_vha,__func__)),-1,__func__))
+			    startit = false;
+		    else
+			    startit = true;
+		}
 
 		/* Create start of day qpairs for Block MQ */
 		for (i = 0; i < ha->max_qpairs; i++)
 			qla2xxx_create_qpair(base_vha, 5, 0, startit);
 	}
 
 	if (ha->flags.running_gold_fw)
diff --git a/drivers/scsi/qla2xxx/qla_target.c b/drivers/scsi/qla2xxx/qla_target.c
--- a/drivers/scsi/qla2xxx/qla_target.c	2019-04-26 14:22:52.008528288 -0500
+++ b/drivers/scsi/qla2xxx/qla_target.c	2019-04-26 09:49:01.757802763 -0500
@@ -6811,15 +6811,18 @@ void qlt_set_mode(struct scsi_qla_host *
 		break;
 	}
 
 #else	// NEW_MATCH_WWPN
 	int a_m;
 	a_m = find_slot_wwpn(vha, 0, -1, __func__);
 	if (a_m)
+	{
 		vha->host->active_mode = MODE_TARGET;
+		vha->qlini_mode = QLA2XXX_INI_MODE_DISABLED;
+	}
 	else
 		switch (ql2x_ini_mode) {
 		case QLA2XXX_INI_MODE_DISABLED:
 		case QLA2XXX_INI_MODE_EXCLUSIVE:
 			vha->host->active_mode = MODE_TARGET;
 			break;
 		case QLA2XXX_INI_MODE_ENABLED:
@@ -6890,14 +6893,15 @@ qlt_enable_vha(struct scsi_qla_host *vha
 		ql_dbg(ql_dbg_tgt, vha, 0xe069,
 		    "Unable to locate qla_tgt pointer from"
 		    " struct qla_hw_data\n");
 		dump_stack();
 		return;
 	}
 	if (vha->qlini_mode == QLA2XXX_INI_MODE_ENABLED)
+	    if (*qlini_targets == '\0' || !find_slot_wwpn(vha, 0, -1, __func__))
 		return;
 
 	spin_lock_irqsave(&ha->hardware_lock, flags);
 	tgt->tgt_stopped = 0;
 	qlt_set_mode(vha);
 	spin_unlock_irqrestore(&ha->hardware_lock, flags);
 
@@ -7124,14 +7128,15 @@ qlt_24xx_config_rings(struct scsi_qla_ho
 void
 qlt_24xx_config_nvram_stage1(struct scsi_qla_host *vha, struct nvram_24xx *nv)
 {
 	struct qla_hw_data *ha = vha->hw;
 	u32 tmp;
 
 	if (!QLA_TGT_MODE_ENABLED())
+	    if (!find_slot_wwpn(vha, swab64(get_port_name_from_nv(vha, __func__)), -1, __func__))
 		return;
 
 	if (qla_tgt_mode_enabled(vha) || qla_dual_mode_enabled(vha)) {
 		if (!ha->tgt.saved_set) {
 			/* We save only once */
 			ha->tgt.saved_exchange_count = nv->exchange_count;
 			ha->tgt.saved_firmware_options_1 =
