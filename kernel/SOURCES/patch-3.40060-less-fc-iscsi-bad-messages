diff -Nrp -U 7 a/block/blk-core.c b/block/blk-core.c
--- a/block/blk-core.c	2019-09-15 16:19:32.000000000 -0500
+++ b/block/blk-core.c	2021-02-03 10:25:00.702803127 -0600
@@ -211,32 +211,32 @@ int blk_status_to_errno(blk_status_t sta
 
 	if (WARN_ON_ONCE(idx >= ARRAY_SIZE(blk_errors)))
 		return -EIO;
 	return blk_errors[idx].errno;
 }
 EXPORT_SYMBOL_GPL(blk_status_to_errno);
 
-static void print_req_error(struct request *req, blk_status_t status,
-		const char *caller)
-{
-	int idx = (__force int)status;
-
-	if (WARN_ON_ONCE(idx >= ARRAY_SIZE(blk_errors)))
-		return;
-
-	printk_ratelimited(KERN_ERR
-		"%s: %s error, dev %s, sector %llu op 0x%x:(%s) flags 0x%x "
-		"phys_seg %u prio class %u\n",
-		caller, blk_errors[idx].name,
-		req->rq_disk ? req->rq_disk->disk_name : "?",
-		blk_rq_pos(req), req_op(req), blk_op_str(req_op(req)),
-		req->cmd_flags & ~REQ_OP_MASK,
-		req->nr_phys_segments,
-		IOPRIO_PRIO_CLASS(req->ioprio));
-}
+// static void print_req_error(struct request *req, blk_status_t status,
+// 		const char *caller)
+// {
+// 	int idx = (__force int)status;
+// 
+// 	if (WARN_ON_ONCE(idx >= ARRAY_SIZE(blk_errors)))
+// 		return;
+// 
+// 	printk_ratelimited(KERN_ERR
+// 		"%s: %s error, dev %s, sector %llu op 0x%x:(%s) flags 0x%x "
+// 		"phys_seg %u prio class %u\n",
+// 		caller, blk_errors[idx].name,
+// 		req->rq_disk ? req->rq_disk->disk_name : "?",
+// 		blk_rq_pos(req), req_op(req), blk_op_str(req_op(req)),
+// 		req->cmd_flags & ~REQ_OP_MASK,
+// 		req->nr_phys_segments,
+// 		IOPRIO_PRIO_CLASS(req->ioprio));
+// }
 
 static void req_bio_endio(struct request *rq, struct bio *bio,
 			  unsigned int nbytes, blk_status_t error)
 {
 	if (error)
 		bio->bi_status = error;
 
@@ -1403,16 +1403,16 @@ bool blk_update_request(struct request *
 #ifdef CONFIG_BLK_DEV_INTEGRITY
 	if (blk_integrity_rq(req) && req_op(req) == REQ_OP_READ &&
 	    error == BLK_STS_OK)
 		req->q->integrity.profile->complete_fn(req, nr_bytes);
 #endif
 
-	if (unlikely(error && !blk_rq_is_passthrough(req) &&
-		     !(req->rq_flags & RQF_QUIET)))
-		print_req_error(req, error, __func__);
+//	if (unlikely(error && !blk_rq_is_passthrough(req) &&
+//		     !(req->rq_flags & RQF_QUIET)))
+//		print_req_error(req, error, __func__);
 
 	blk_account_io_completion(req, nr_bytes);
 
 	total_bytes = 0;
 	while (req->bio) {
 		struct bio *bio = req->bio;
 		unsigned bio_bytes = min(bio->bi_iter.bi_size, nr_bytes);
diff -Nrp -U 7 a/drivers/scsi/libiscsi.c b/drivers/scsi/libiscsi.c
--- a/drivers/scsi/libiscsi.c	2019-09-15 16:19:32.000000000 -0500
+++ b/drivers/scsi/libiscsi.c	2021-02-03 10:22:38.868250863 -0600
@@ -2153,19 +2153,19 @@ static void iscsi_check_transport_timeou
 	if (!recv_timeout)
 		goto done;
 
 	recv_timeout *= HZ;
 	last_recv = conn->last_recv;
 
 	if (iscsi_has_ping_timed_out(conn)) {
-		iscsi_conn_printk(KERN_ERR, conn, "ping timeout of %d secs "
-				  "expired, recv timeout %d, last rx %lu, "
-				  "last ping %lu, now %lu\n",
-				  conn->ping_timeout, conn->recv_timeout,
-				  last_recv, conn->last_ping, jiffies);
+		// iscsi_conn_printk(KERN_ERR, conn, "ping timeout of %d secs "
+		// 		  "expired, recv timeout %d, last rx %lu, "
+		// 		  "last ping %lu, now %lu\n",
+		// 		  conn->ping_timeout, conn->recv_timeout,
+		// 		  last_recv, conn->last_ping, jiffies);
 		spin_unlock(&session->frwd_lock);
 		iscsi_conn_failure(conn, ISCSI_ERR_NOP_TIMEDOUT);
 		return;
 	}
 
 	if (time_before_eq(last_recv + recv_timeout, jiffies)) {
 		/* send a ping to try to provoke some traffic */
