diff -Nrp -U 7 --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' '--exclude=objtool' '--exclude=cpupower' a/Makefile b/Makefile
--- a/Makefile	2020-05-04 20:01:51.362937327 -0500
+++ b/Makefile	2020-05-04 19:44:33.477563280 -0500
@@ -1,12 +1,12 @@
 # SPDX-License-Identifier: GPL-2.0
 VERSION = 5
 PATCHLEVEL = 3
 SUBLEVEL = 0
-EXTRAVERSION = -2020.01.31.lightspeed.x86_64
+EXTRAVERSION = -2020.04.01.lightspeed.x86_64
 NAME = Bobtail Squid
 
 # *DOCUMENTATION*
 # To see a list of typical targets execute "make help"
 # More info can be located in ./README
 # Comments in this file are targeted only to the developer, do not
 # expect to learn how to build the kernel reading this file.
diff -Nrp -U 7 --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' '--exclude=objtool' '--exclude=cpupower' a/fs/cifs/connect.c b/fs/cifs/connect.c
--- a/fs/cifs/connect.c	2020-05-04 20:01:51.322937390 -0500
+++ b/fs/cifs/connect.c	2020-05-04 19:57:02.455392694 -0500
@@ -2402,20 +2402,22 @@ cifs_parse_mount_options(const char *mou
 		pr_notice("CIFS: ignoring forceuid mount option specified with no uid= option.\n");
 
 	if (gid_specified)
 		vol->override_gid = override_gid;
 	else if (override_gid == 1)
 		pr_notice("CIFS: ignoring forcegid mount option specified with no gid= option.\n");
 
+#if 0
 	if (got_version == false)
 		pr_warn("No dialect specified on mount. Default has changed to "
 			"a more secure dialect, SMB2.1 or later (e.g. SMB3), from CIFS "
 			"(SMB1). To use the less secure SMB1 dialect to access "
 			"old servers which do not support SMB3 (or SMB2.1) specify vers=1.0"
 			" on mount.\n");
+#endif
 
 	kfree(mountdata_copy);
 	return 0;
 
 out_nomem:
 	pr_warn("Could not allocate temporary buffer\n");
 cifs_parse_mount_err:
diff -Nrp -U 7 --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' '--exclude=objtool' '--exclude=cpupower' a/fs/cifs/misc.c b/fs/cifs/misc.c
--- a/fs/cifs/misc.c	2019-09-15 16:19:32.000000000 -0500
+++ b/fs/cifs/misc.c	2020-05-04 19:57:02.458392689 -0500
@@ -536,18 +536,20 @@ cifs_autodisable_serverino(struct cifs_s
 		struct cifs_tcon *tcon = NULL;
 
 		if (cifs_sb->master_tlink)
 			tcon = cifs_sb_master_tcon(cifs_sb);
 
 		cifs_sb->mnt_cifs_flags &= ~CIFS_MOUNT_SERVER_INUM;
 		cifs_sb->mnt_cifs_serverino_autodisabled = true;
-		cifs_dbg(VFS, "Autodisabling the use of server inode numbers on %s.\n",
+		cifs_dbg(VFS, "Autodisabling the use of server inode numbers on %s\n",
 			 tcon ? tcon->treeName : "new server");
+#if 0
 		cifs_dbg(VFS, "The server doesn't seem to support them properly or the files might be on different servers (DFS).\n");
 		cifs_dbg(VFS, "Hardlinks will not be recognized on this mount. Consider mounting with the \"noserverino\" option to silence this message.\n");
+#endif
 
 	}
 }
 
 void cifs_set_oplock_level(struct cifsInodeInfo *cinode, __u32 oplock)
 {
 	oplock &= 0xF;
diff -Nrp -U 7 --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' '--exclude=objtool' '--exclude=cpupower' a/fs/cifs/xattr.c b/fs/cifs/xattr.c
--- a/fs/cifs/xattr.c	2020-05-04 20:01:51.313937404 -0500
+++ b/fs/cifs/xattr.c	2020-05-04 19:57:02.462392682 -0500
@@ -29,16 +29,21 @@
 #include "cifsproto.h"
 #include "cifs_debug.h"
 #include "cifs_fs_sb.h"
 #include "cifs_unicode.h"
 
 #define MAX_EA_VALUE_SIZE 65535
 #define CIFS_XATTR_CIFS_ACL "system.cifs_acl"
+
 #define CIFS_XATTR_ATTRIB "cifs.dosattrib"  /* full name: user.cifs.dosattrib */
 #define CIFS_XATTR_CREATETIME "cifs.creationtime"  /* user.cifs.creationtime */
+
+#define CIFS_XATTR_GETFSATTR "cifs.getfsattr"  /* user.cifs.getfsattr */
+
+
 /*
  * Although these three are just aliases for the above, need to move away from
  * confusing users and using the 20+ year old term 'cifs' when it is no longer
  * secure, replaced by SMB2 (then even more highly secure SMB3) many years ago
  */
 #define SMB3_XATTR_CIFS_ACL "system.smb3_acl"
 #define SMB3_XATTR_ATTRIB "smb3.dosattrib"  /* full name: user.smb3.dosattrib */
@@ -239,14 +244,28 @@ static int cifs_creation_time_get(struct
 	/* return dos attributes as pseudo xattr */
 	pcreatetime = (__u64 *)value;
 	*pcreatetime = CIFS_I(inode)->createtime;
 	return sizeof(__u64);
 }
 
 
+static int cifs_get_fs_attr(struct cifs_tcon *tcon, void *value, size_t size)
+{
+
+	if (!value || !size)
+		return sizeof(__u32);
+
+	if (size < sizeof(__u32))
+		return -ERANGE;
+
+	*((__u32 *)value) = le32_to_cpu(tcon->fsAttrInfo.Attributes);
+	return sizeof(__u32);
+}
+
+
 static int cifs_xattr_get(const struct xattr_handler *handler,
 			  struct dentry *dentry, struct inode *inode,
 			  const char *name, void *value, size_t size)
 {
 	ssize_t rc = -EOPNOTSUPP;
 	unsigned int xid;
 	struct super_block *sb = dentry->d_sb;
@@ -266,25 +285,31 @@ static int cifs_xattr_get(const struct x
 	if (full_path == NULL) {
 		rc = -ENOMEM;
 		goto out;
 	}
 
 	/* return alt name if available as pseudo attr */
 	switch (handler->flags) {
+
+/* GET */
 	case XATTR_USER:
 		cifs_dbg(FYI, "%s:querying user xattr %s\n", __func__, name);
 		if ((strcmp(name, CIFS_XATTR_ATTRIB) == 0) ||
 		    (strcmp(name, SMB3_XATTR_ATTRIB) == 0)) {
 			rc = cifs_attrib_get(dentry, inode, value, size);
 			break;
 		} else if ((strcmp(name, CIFS_XATTR_CREATETIME) == 0) ||
 		    (strcmp(name, SMB3_XATTR_CREATETIME) == 0)) {
 			rc = cifs_creation_time_get(dentry, inode, value, size);
 			break;
 		}
+		else if (!strcmp(name, CIFS_XATTR_GETFSATTR)) {
+			rc = cifs_get_fs_attr(pTcon, value, size);
+			break;
+		}
 
 		if (cifs_sb->mnt_cifs_flags & CIFS_MOUNT_NO_XATTR)
 			goto out;
 
 		if (pTcon->ses->server->ops->query_all_EAs)
 			rc = pTcon->ses->server->ops->query_all_EAs(xid, pTcon,
 				full_path, name, value, size, cifs_sb);
Binary files a/rheldup3.x509 and b/rheldup3.x509 differ
Binary files a/rhelkpatch1.x509 and b/rhelkpatch1.x509 differ
Binary files a/tools/power/x86/turbostat/turbostat and b/tools/power/x86/turbostat/turbostat differ
Binary files a/tools/power/x86/x86_energy_perf_policy/x86_energy_perf_policy and b/tools/power/x86/x86_energy_perf_policy/x86_energy_perf_policy differ
Binary files a/tools/thermal/tmon/tmon and b/tools/thermal/tmon/tmon differ
