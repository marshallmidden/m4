#!/bin/bash -ex
#-----------------------------------------------------------------------------
echo "Starting $0"
#-----------------------------------------------------------------------------
. 00-package-definitions
#=============================================================================
#=============================================================================
yum install -y popt-devel-1.13-16.el7.x86_64
yum install -y lua.x86_64
yum install -y gettext-devel

F="audit-libs-devel
   binutils-devel
   bzip2-devel
   dbus-devel
   elfutils-devel
   elfutils-libelf-devel
   ima-evm-utils-devel
   libacl-devel
   libcap-devel
   libdb-devel
   libselinux-devel
   libzstd-devel
   ncurses-devel
   openssl-devel
   popt-devel
   readline-devel
   xz-devel
   zlib-devel"

#--   file-devel
#--   libarchive-devel
#--   lua-devel
#--   python3-devel

for f in ${F}; do
    # echo f=${f}
    yum install -y $f
done
#=============================================================================
if [ ! -d clone ]; then
    mkdir clone
fi
#=============================================================================
#=============================================================================
if [ ! -d clone/${CRASH_DIR} ]; then
    ( cd clone ; git clone ${CRASH_CLONE} )
fi
( cd clone/${CRASH_DIR} ; ${MAKE} clean || true )
#=============================================================================
#=============================================================================
if [ ! -d clone/${READLINE_DIR} ]; then
    ( cd clone ; git clone ${READLINE_CLONE} )
fi
( cd clone/${READLINE_DIR} ; ${MAKE} clean || true ; ${MAKE} distclean || true )
#-----------------------------------------------------------------------------
if [ ! -d ${LIBGCRYPT_VERSION} ]; then
    if [ ! -f ${LIBGCRYPT_VERSION}${LIBGCRYPT_SUFFIX} ]; then
	wget -N --no-check-certificate ${LIBGCRYPT_WHERE}/${LIBGCRYPT_VERSION}${LIBGCRYPT_SUFFIX}
    fi
    tar xf ${LIBGCRYPT_VERSION}${LIBGCRYPT_SUFFIX}
fi
( cd ${LIBGCRYPT_VERSION} ; make clean || true ; make distclean || true )
#-----------------------------------------------------------------------------
if [ ! -d ${LIBGPG_ERROR_VERSION} ]; then
    if [ ! -f ${LIBGPG_ERROR_VERSION}${LIBGPG_ERROR_SUFFIX} ]; then
	wget -N --no-check-certificate ${LIBGPG_ERROR_WHERE}/${LIBGPG_ERROR_VERSION}${LIBGPG_ERROR_SUFFIX}
    fi
    tar xf ${LIBGPG_ERROR_VERSION}${LIBGPG_ERROR_SUFFIX}
fi
( cd ${LIBGPG_ERROR_VERSION} ; make clean || true ; make distclean || true )
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
if [ ! -d ${GCC_VERSION} ]; then
    if [ ! -f ${GCC_VERSION}${GCC_SUFFIX} ]; then
	wget -N --no-check-certificate ${GCC_WHERE}/${GCC_VERSION}${GCC_SUFFIX}
    fi
    tar xf ${GCC_VERSION}${GCC_SUFFIX}
fi
( cd ${GCC_VERSION} ; make clean || true ; make distclean || true )
#-----------------------------------------------------------------------------
if [ ! -d ${GMP_VERSION} ]; then
    if [ ! -f ${GMP_VERSION}${GMP_SUFFIX} ]; then
	wget -N --no-check-certificate ${GMP_WHERE}/${GMP_VERSION}${GMP_SUFFIX}
    fi
    tar xf ${GMP_VERSION}${GMP_SUFFIX}
fi
( cd ${GCC_VERSION} && ln -fs ../${GMP_VERSION} gmp )
( cd ${GMP_VERSION} ; make clean || true ; make distclean || true )
#-----------------------------------------------------------------------------
if [ ! -d ${MPFR_VERSION} ]; then
    if [ ! -f ${MPFR_VERSION}${MPFR_SUFFIX} ]; then
	wget -N --no-check-certificate ${MPFR_WHERE}/${MPFR_VERSION}${MPFR_SUFFIX}
    fi
    tar xf ${MPFR_VERSION}${MPFR_SUFFIX}
fi
( cd ${GCC_VERSION} && ln -fs ../${MPFR_VERSION} mpfr )
( cd ${MPFR_VERSION} ; make clean || true ; make distclean || true )
#-----------------------------------------------------------------------------
if [ ! -d ${MPC_VERSION} ]; then
    if [ ! -f ${MPC_VERSION}${MPC_SUFFIX} ]; then
	wget -N --no-check-certificate ${MPC_WHERE}/${MPC_VERSION}${MPC_SUFFIX}
    fi
    tar xf ${MPC_VERSION}${MPC_SUFFIX}
fi
( cd ${GCC_VERSION} && ln -fs ../${MPC_VERSION} mpc )
( cd ${MPC_VERSION} ; make clean || true ; make distclean || true )
#-----------------------------------------------------------------------------
if [ ! -d ${BINUTILS_VERSION} ]; then
    if [ ! -f ${BINUTILS_VERSION}${BINUTILS_SUFFIX} ]; then
	wget -N --no-check-certificate ${BINUTILS_WHERE}/${BINUTILS_VERSION}${BINUTILS_SUFFIX}
    fi
    tar xf ${BINUTILS_VERSION}${BINUTILS_SUFFIX}
fi
( cd ${GCC_VERSION} && ln -fs ../${BINUTILS_VERSION} binutils )
( cd ${BINUTILS_VERSION} ; make clean || true ; make distclean || true )
#=============================================================================
#=============================================================================
if [ ! -d ${HELP2MAN_VERSION} ]; then
    if [ ! -f ${HELP2MAN_VERSION}${HELP2MAN_SUFFIX} ]; then
	wget -N --no-check-certificate ${HELP2MAN_WHERE}/${HELP2MAN_VERSION}${HELP2MAN_SUFFIX}
    fi
    tar xf ${HELP2MAN_VERSION}${HELP2MAN_SUFFIX}
fi
#-----------------------------------------------------------------------------
if [ ! -d ${LIBMICROHTTPD_VERSION} ]; then
    if [ ! -f ${LIBMICROHTTPD_VERSION}${LIBMICROHTTPD_SUFFIX} ]; then
	wget -N --no-check-certificate ${LIBMICROHTTPD_WHERE}/${LIBMICROHTTPD_VERSION}${LIBMICROHTTPD_SUFFIX}
    fi
    tar xf ${LIBMICROHTTPD_VERSION}${LIBMICROHTTPD_SUFFIX}
fi
#-----------------------------------------------------------------------------
if [ ! -d ${ELFUTILS_VERSION} ]; then
    if [ ! -f ${ELFUTILS_VERSION}${ELFUTILS_SUFFIX} ]; then
	wget -N --no-check-certificate ${ELFUTILS_WHERE}/${ELFUTILS_VERSION}${ELFUTILS_SUFFIX}
    fi
    tar xf ${ELFUTILS_VERSION}${ELFUTILS_SUFFIX}
    patch -p0 < ELFUTILS.inline.patch
fi
#-----------------------------------------------------------------------------
if [ ! -d clone/${DEBUGEDIT_DIR} ]; then
    ( cd clone ; git clone ${DEBUGEDIT_CLONE} )
fi
( cd clone/${DEBUGEDIT_DIR} ; ${MAKE} clean || true ; ${MAKE} distclean || true )
#-----------------------------------------------------------------------------
if [ ! -d ${FILE_VERSION} ]; then
    if [ ! -f ${FILE_VERSION}${FILE_SUFFIX} ]; then
        wget -N --no-check-certificate ${FILE_WHERE}/${FILE_VERSION}${FILE_SUFFIX}
    fi
    tar xf ${FILE_VERSION}${FILE_SUFFIX}
fi
( cd ${FILE_VERSION} ; ${MAKE} clean || true ; ${MAKE} distclean || true )
#-----------------------------------------------------------------------------
if [ ! -d ${LIBARCHIVE_VERSION} ]; then
    if [ ! -f ${LIBARCHIVE_VERSION}${LIBARCHIVE_SUFFIX} ]; then
        wget -N --no-check-certificate ${LIBARCHIVE_WHERE}/${LIBARCHIVE_VERSION}${LIBARCHIVE_SUFFIX}
    fi
    tar xf ${LIBARCHIVE_VERSION}${LIBARCHIVE_SUFFIX}
fi
( cd ${LIBARCHIVE_VERSION} ; ${MAKE} clean || true ; ${MAKE} distclean || true )
#-----------------------------------------------------------------------------
if [ ! -d ${LUA_VERSION} ]; then
    if [ ! -f ${LUA_VERSION}${LUA_SUFFIX} ]; then
        wget -N --no-check-certificate ${LUA_WHERE}/${LUA_VERSION}${LUA_SUFFIX}
    fi
    tar xf ${LUA_VERSION}${LUA_SUFFIX}
    patch -p0 < LUA.Makefile.patch.AR
fi
( cd ${LUA_VERSION} ; ${MAKE} clean || true ; ${MAKE} distclean || true )
#-----------------------------------------------------------------------------
if [ ! -d ${RPM_VERSION} ]; then
    if [ ! -f ${RPM_VERSION}${RPM_SUFFIX} ]; then
	wget -N --no-check-certificate ${RPM_WHERE}/${RPM_VERSION}${RPM_SUFFIX}
    fi
    tar xf ${RPM_VERSION}${RPM_SUFFIX}
    patch -p0 < RPM.configure.patch
fi
#-----------------------------------------------------------------------------
if [ ! -d ${DB_VERSION} ]; then
    if [ ! -f ${DB_VERSION}${DB_SUFFIX} ]; then
	wget -N --no-check-certificate ${DB_WHERE}/${DB_VERSION}${DB_SUFFIX}
    fi
    tar xf ${DB_VERSION}${DB_SUFFIX}
fi
( cd ${RPM_VERSION}/ && ln -sf ../${DB_VERSION} db )
#-----------------------------------------------------------------------------
if [ ! -d clone/${MAKEDUMPFILE_DIR} ]; then
    ( cd clone ; git clone ${MAKEDUMPFILE_CLONE} )
fi
( cd clone/${MAKEDUMPFILE_DIR} ; ${MAKE} clean || true )
#=============================================================================
#=============================================================================
cmp -s /usr/include/bits/error.h include/error.h.original && A=0 || A=1
if [ "$A" == '0' ]; then
    echo "Error.h needs changing/fixing/modifying."
    cp /usr/include/bits/error.h /usr/include/bits/error.h.original
    cp include/error.h /usr/include/bits/error.h
else
    echo "Error.h already changed/fixed/modified."
fi
#=============================================================================
#=============================================================================
echo "Finishing $0"
exit 0
#-----------------------------------------------------------------------------
