# Makefile variables and bash variables for 01 -> 05 scripts.
#-----------------------------------------------------------------------------
# Brief guide to using.
# 1) Set OLDV and NEWV variables. 
# 2) Create directories linux and linux-middle for creating new patches.
# 3) Read and follow "Steps to use" below.
#-----------------------------------------------------------------------------
# Start with two copies un-tarred.
# Fix this first.
DIR=linux
# Used for new patch via "diff" of ${DIR}.
MIDDLE=linux-middle
# "a/" and "b/" are for the diff to have the file names matching "git diff".
# MIDDLE (linux-middle)
DIRold=a/
# DIR (linux)
DIRnew=b/
#-----------------------------------------------------------------------------
# Which architecture. Use x86_64.
ARCH="x86_64"

# Old kernel version (kernel-${OLDV}-${ARCH}.config).
#-- OLDV="5.3.0"
OLDV="5.3.0"
# New kernel version.
NEWV="6.8.0"

KDO="kernel-${OLDV}-${ARCH}.config"
KDN="kernel-${NEWV}-${ARCH}.config"
KDOD="kernel-${OLDV}-${ARCH}-debug.config"
KDND="kernel-${NEWV}-${ARCH}-debug.config"
#-----------------------------------------------------------------------------
# Steps to use:
# -----------------------------------------------------------------------------
# a) Put this PATCH directory some place unique.
# -----------------------------------------------------------------------------
# b) Start with new kernel un-tarred some place.
#	ln -s /home/m4/src/linux-repository/linux/ linux
#    Set variable DIR to "linux" symbolic link.
# -----------------------------------------------------------------------------
# c) Copy old redhat kernel configuration files to this directory.
#	A=`pwd`
#	cd WHERE_GIT_REPOSITORY_IS
#	OLD_DIRECTORY=`pwd`
#	cd ${A}
#	cp -p ${OLD_DIRECTORY}/enterprise/kernel/SOURCES/kernel-*.config ./
# -----------------------------------------------------------------------------
# d) Set variable OLDV to version previously checked in.
# -----------------------------------------------------------------------------
# e) Set variable NEWV to version moving towards. ("uname -r" if booted.)
# -----------------------------------------------------------------------------
# f) Copy in original patches
#	cp -p ${OLD_DIRECTORY}/enterprise/kernel/SOURCES/patch-3.40* ./
# -----------------------------------------------------------------------------
# g) Make a second copy of the "linux/" directory called something like linux-middle.
#	mkdir linux-middle
#	tar cf - -C linux/ . | tar xf - -C linux-middle
#-----------------------------------------------------------------------------
# h) Update patch file: 99.patch-work-on
#    The idea is to setup file to have all patch files with lines like:
#	patch-3.40000-cifs-xattr-additions.patch
#	# patch-3.40001-qla2xxx-target-initiator.patch
#	# patch-3.40002-target-core-inline-migration.patch
#	...
#    With only one line at a time commented in.
#-----------------------------------------------------------------------------
# i) After you have all the old patch files in 99.patch-work-on as above (h),
#    do a ./01.DRYRUN and see if it runs.
#	./01.DRYRUN 2>&1 | less
#    Note: any patch failures will cause script (-e) to stop running.
#    Fix any offset line warnings. (They return an error and script stops.)
# -----------------------------------------------------------------------------
# j) If it succeeds, there will be no offset errors of FAILED lines.
#	Then run 02.DOPATCH.
#    This really does the patch. In addition it creates a "new.*" patch file.
#    This may be useful if the following fails.
# -----------------------------------------------------------------------------
# k) Run file 03.UNDRYRUN. Fix the offsets.
# -----------------------------------------------------------------------------
# l) You are probably not unpatching in reverse order, so ignore 04.UNPATCH.
# -----------------------------------------------------------------------------
# m) Go to next patch to add (moving from 40000 to 40001, etc.) by editing file
#    99.patch-work-on.
# -----------------------------------------------------------------------------
# n) Repeat steps "i" thru "m" for all patches.
#-----------------------------------------------------------------------------
# o) Do "make k" after "some" ./02.DOPATCH to make sure the patches compile.
# -----------------------------------------------------------------------------
# p) After patches applied (to get any Kconfig additions, etc., do make "all".
#	This creates the new kernel .config files.
# -----------------------------------------------------------------------------
# q) You are ready to move tar file into enterprise repository, patches, and
#    kernel .config files. Do git add, git commit, and git push as appropriate.
#    NOTE: make sure you try it out before committing. Probably backup before
#    you try to untar and compile the kernel. Better safe than starting over.
#=============================================================================
W="`pwd`"
#=============================================================================
# End of file 0.INCLUDE
