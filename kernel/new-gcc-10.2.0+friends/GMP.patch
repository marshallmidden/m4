diff -Nrp -U 7 --no-dereference --no-ignore-file-name-case --strip-trailing-cr '--exclude=.git*' tmp/gmp-6.2.0/mpn/generic/compute_powtab.c gcc/gmp-6.2.0/mpn/generic/compute_powtab.c
--- tmp/gmp-6.2.0/mpn/generic/compute_powtab.c	2020-01-17 07:44:49.000000000 -0600
+++ gcc/gmp-6.2.0/mpn/generic/compute_powtab.c	2020-11-06 17:23:54.510521676 -0600
@@ -66,14 +66,15 @@ mpn_compute_powtab_mul (powers_t *powtab
 			int base, const size_t *exptab, size_t n_pows)
 {
   mp_size_t n;
   mp_ptr p, t;
   mp_limb_t cy;
   long start_idx;
   int c;
+  long pi;
 
   mp_limb_t big_base = mp_bases[base].big_base;
   int chars_per_limb = mp_bases[base].chars_per_limb;
 
   mp_ptr powtab_mem_ptr = powtab_mem;
 
   size_t digits_in_base = chars_per_limb;
@@ -135,15 +136,15 @@ mpn_compute_powtab_mul (powers_t *powtab
 
       SET_powers_t (pt[0], t, n, digits_in_base, base, shift);
       p = t;
       pt++;
       start_idx = n_pows - 3;
     }
 
-  for (long pi = start_idx; pi >= 0; pi--)
+  for (pi = start_idx; pi >= 0; pi--)
     {
       t = powtab_mem_ptr;
       powtab_mem_ptr += 2 * n + 2;
 
       ASSERT (powtab_mem_ptr < powtab_mem + mpn_str_powtab_alloc (un));
 
       mpn_sqr (t, p, n);
@@ -200,14 +201,15 @@ mpn_compute_powtab_mul (powers_t *powtab
 #if DIV_1_VS_MUL_1_PERCENT < 275
 #define HAVE_mpn_compute_powtab_div 1
 static void
 mpn_compute_powtab_div (powers_t *powtab, mp_ptr powtab_mem, mp_size_t un,
 			int base, const size_t *exptab, size_t n_pows)
 {
   mp_ptr p, t;
+  long pi;
 
   mp_limb_t big_base = mp_bases[base].big_base;
   int chars_per_limb = mp_bases[base].chars_per_limb;
 
   mp_ptr powtab_mem_ptr = powtab_mem;
 
   size_t digits_in_base = chars_per_limb;
@@ -219,15 +221,15 @@ mpn_compute_powtab_div (powers_t *powtab
   p[0] = big_base;
 
   SET_powers_t (pt[0], p, 1, digits_in_base, base, 0);
   pt++;
 
   mp_size_t n = 1;
   mp_size_t shift = 0;
-  for (long pi = n_pows - 1; pi >= 0; pi--)
+  for (pi = n_pows - 1; pi >= 0; pi--)
     {
       t = powtab_mem_ptr;
       powtab_mem_ptr += 2 * n;
 
       ASSERT (powtab_mem_ptr < powtab_mem + mpn_str_powtab_alloc (un));
 
       mpn_sqr (t, p, n);
@@ -267,15 +269,15 @@ mpn_compute_powtab_div (powers_t *powtab
 
       SET_powers_t (pt[0], p, n, digits_in_base, base, shift);
       pt++;
     }
 
   /* Strip any remaining low zero limbs.  */
   pt -= n_pows + 1;
-  for (long pi = n_pows; pi >= 0; pi--)
+  for (pi = n_pows; pi >= 0; pi--)
     {
       mp_ptr t = pt[pi].p;
       mp_size_t shift = pt[pi].shift;
       mp_size_t n = pt[pi].n;
       int c;
       c = t[0] == 0;
       t += c;
@@ -289,27 +291,29 @@ mpn_compute_powtab_div (powers_t *powtab
 #endif
 
 static long
 powtab_decide (size_t *exptab, size_t un, int base)
 {
   int chars_per_limb = mp_bases[base].chars_per_limb;
   long n_pows = 0;
-  for (size_t pn = (un + 1) >> 1; pn != 1; pn = (pn + 1) >> 1)
+  size_t pn;
+  long i;
+  for (pn = (un + 1) >> 1; pn != 1; pn = (pn + 1) >> 1)
     {
       exptab[n_pows] = pn * chars_per_limb;
       n_pows++;
     }
   exptab[n_pows] = chars_per_limb;
 
 #if HAVE_mpn_compute_powtab_mul && HAVE_mpn_compute_powtab_div
-  size_t pn = un - 1;
+  pn = un - 1;
   size_t xn = (un + 1) >> 1;
   unsigned mcost = 1;
   unsigned dcost = 1;
-  for (long i = n_pows - 2; i >= 0; i--)
+  for (i = n_pows - 2; i >= 0; i--)
     {
       size_t pow = (pn >> (i + 1)) + 1;
 
       if (pow & 1)
 	dcost += pow;
 
       if (xn != (pow << i))
